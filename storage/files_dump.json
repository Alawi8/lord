{
    "projectInfo": {
        "projectName": "Bagisto",
        "laravelVersion": "11.45.2",
        "phpVersion": "8.2.12",
        "generatedAt": "2025-08-27T02:11:59.311064Z",
        "generatedBy": "Laravel Artisan Command: project:files-json (محسن - 31MB)",
        "executionTimeMs": 600.95,
        "optimizations": {
            "maxFileSizeKb": 512,
            "maxOutputSizeMb": 31,
            "excludedLargeDirs": true,
            "fileLimit": 500,
            "skippedFiles": 0,
            "maxContentLength": 50000
        }
    },
    "summary": {
        "totalFiles": 132,
        "totalSize": 1165196,
        "totalSizeFormatted": "1.11 MB",
        "categoriesCount": 7,
        "estimatedJsonSize": "569.25 KB",
        "memoryUsage": "42 MB"
    },
    "filesByCategory": {
        "config": {
            "categoryInfo": {
                "displayName": "ملفات الإعدادات",
                "description": "ملفات إعدادات التطبيق",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto\\config",
                "extensions": [
                    "php"
                ],
                "maxDepth": 2,
                "priority": 1
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": "app.php",
                        "relativePath": "config\\app.php",
                        "extension": "php",
                        "size": 6213,
                        "sizeFormatted": "6.07 KB",
                        "contentLength": 6213,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Name\n    |--------------------------------------------------------------------------\n    |\n    | This value is the name of your application. This value is used when the\n    | framework needs to place the application's name in a notification or\n    | any other location as required by the application or its packages.\n    |\n    */\n\n    'name' => env('APP_NAME', 'Bagisto'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Environment\n    |--------------------------------------------------------------------------\n    |\n    | This value determines the \"environment\" your application is currently\n    | running in. This may determine how you prefer to configure various\n    | services your application utilizes. Set this in your \".env\" file.\n    |\n    */\n\n    'env' => env('APP_ENV', 'production'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Debug Mode\n    |--------------------------------------------------------------------------\n    |\n    | When your application is in debug mode, detailed error messages with\n    | stack traces will be shown on every error that occurs within your\n    | application. If disabled, a simple generic error page is shown.\n    |\n    */\n\n    'debug' => env('APP_DEBUG', false),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Debug Allowed IPs\n    |--------------------------------------------------------------------------\n    |\n    | This value is used to allow the debug mode only for the specified IPs.\n    | This is useful when you want to debug the application on the production\n    | server without enabling it for everyone.\n    */\n\n    'debug_allowed_ips' => env('APP_DEBUG_ALLOWED_IPS', null),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application URL\n    |--------------------------------------------------------------------------\n    |\n    | This URL is used by the console to properly generate URLs when using\n    | the Artisan command line tool. You should set this to the root of\n    | your application so that it is used when running Artisan tasks.\n    |\n    */\n\n    'url' => env('APP_URL', 'http://localhost'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Admin URL\n    |--------------------------------------------------------------------------\n    |\n    | This URL suffix is used to define the admin url for example\n    | admin/ or backend/\n    |\n    */\n\n    'admin_url' => env('APP_ADMIN_URL', 'admin'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Timezone\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the default timezone for your application, which\n    | will be used by the PHP date and date-time functions. We have gone\n    | ahead and set this to a sensible default for you out of the box.\n    |\n    */\n\n    'timezone' => env('APP_TIMEZONE', 'Asia/Kolkata'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Locale Configuration\n    |--------------------------------------------------------------------------\n    |\n    | The application locale determines the default locale that will be used\n    | by the translation service provider. You are free to set this value\n    | to any of the locales which will be supported by the application.\n    |\n    */\n\n    'locale' => env('APP_LOCALE', 'en'),\n\n    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),\n\n    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Country\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the default country by country code.\n    | Ensure it is uppercase and reflects the 'code' column of the\n    | countries table.\n    |\n    | for example: DE EN FR\n    | (use capital letters!)\n    */\n\n    'default_country' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Base Currency Code\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the base currency code for your application.\n    |\n    */\n\n    'currency' => env('APP_CURRENCY', 'USD'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default channel Code\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the default channel code for your application.\n    |\n    */\n\n    'channel' => 'default',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Encryption Key\n    |--------------------------------------------------------------------------\n    |\n    | This key is used by the Illuminate encrypter service and should be set\n    | to a random, 32 character string, otherwise these encrypted strings\n    | will not be safe. Please do this before deploying an application!\n    |\n    */\n\n    'cipher' => 'AES-256-CBC',\n\n    'key' => env('APP_KEY'),\n\n    'previous_keys' => [\n        ...array_filter(\n            explode(',', env('APP_PREVIOUS_KEYS', ''))\n        ),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Maintenance Mode Driver\n    |--------------------------------------------------------------------------\n    |\n    | These configuration options determine the driver used to determine and\n    | manage Laravel's \"maintenance mode\" status. The \"cache\" driver will\n    | allow maintenance mode to be controlled across multiple machines.\n    |\n    | Supported drivers: \"file\", \"cache\"\n    |\n    */\n\n    'maintenance' => [\n        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),\n        'store'  => env('APP_MAINTENANCE_STORE', 'database'),\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "auth.php",
                        "relativePath": "config\\auth.php",
                        "extension": "php",
                        "size": 3767,
                        "sizeFormatted": "3.68 KB",
                        "contentLength": 3767,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option defines the default authentication \"guard\" and password\n    | reset \"broker\" for your application. You may change these values\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n\n    'defaults' => [\n        'guard'     => 'customer',\n        'passwords' => 'customers',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | which utilizes session storage plus the Eloquent user provider.\n    |\n    | All authentication guards have a user provider, which defines how the\n    | users are actually retrieved out of your database or other storage\n    | system used by the application. Typically, Eloquent is utilized.\n    |\n    | Supported: \"session\"\n    |\n    */\n\n    'guards' => [\n        'customer' => [\n            'driver'   => 'session',\n            'provider' => 'customers',\n        ],\n\n        'admin' => [\n            'driver'   => 'session',\n            'provider' => 'admins',\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication guards have a user provider, which defines how the\n    | users are actually retrieved out of your database or other storage\n    | system used by the application. Typically, Eloquent is utilized.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | providers to represent the model / table. These providers may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'customers' => [\n            'driver' => 'eloquent',\n            'model'  => Webkul\\Customer\\Models\\Customer::class,\n        ],\n\n        'admins' => [\n            'driver' => 'eloquent',\n            'model'  => Webkul\\User\\Models\\Admin::class,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | These configuration options specify the behavior of Laravel's password\n    | reset functionality, including the table utilized for token storage\n    | and the user provider that is invoked to actually retrieve users.\n    |\n    | The expiry time is the number of minutes that each reset token will be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    | The throttle setting is the number of seconds a user must wait before\n    | generating more password reset tokens. This prevents the user from\n    | quickly generating a very large amount of password reset tokens.\n    |\n    */\n\n    'passwords' => [\n        'customers' => [\n            'provider' => 'customers',\n            'table'    => 'customer_password_resets',\n            'expire'   => 60,\n            'throttle' => 60,\n        ],\n\n        'admins' => [\n            'provider' => 'admins',\n            'table'    => 'admin_password_resets',\n            'expire'   => 60,\n            'throttle' => 60,\n        ],\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "bagisto-vite.php",
                        "relativePath": "config\\bagisto-vite.php",
                        "extension": "php",
                        "size": 1083,
                        "sizeFormatted": "1.06 KB",
                        "contentLength": 1083,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Bagisto Vite Configuration\n    |--------------------------------------------------------------------------\n    |\n    | Please add your Vite registry here to seamlessly support the `bagisto_assets` function.\n    |\n    */\n\n    'viters' => [\n        'admin' => [\n            'hot_file'                 => 'admin-default-vite.hot',\n            'build_directory'          => 'themes/admin/default/build',\n            'package_assets_directory' => 'src/Resources/assets',\n        ],\n\n        'shop' => [\n            'hot_file'                 => 'shop-default-vite.hot',\n            'build_directory'          => 'themes/shop/default/build',\n            'package_assets_directory' => 'src/Resources/assets',\n        ],\n\n        'installer' => [\n            'hot_file'                 => 'installer-default-vite.hot',\n            'build_directory'          => 'themes/installer/default/build',\n            'package_assets_directory' => 'src/Resources/assets',\n        ],\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "breadcrumbs.php",
                        "relativePath": "config\\breadcrumbs.php",
                        "extension": "php",
                        "size": 2378,
                        "sizeFormatted": "2.32 KB",
                        "contentLength": 2378,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | View Name\n    |--------------------------------------------------------------------------\n    |\n    | Choose a view to display when Breadcrumbs::render() is called.\n    | Built in templates are:\n    |\n    | - 'breadcrumbs::bootstrap5'  - Bootstrap 5\n    | - 'breadcrumbs::bootstrap4'  - Bootstrap 4\n    | - 'breadcrumbs::bulma'       - Bulma\n    | - 'breadcrumbs::foundation6' - Foundation 6\n    | - 'breadcrumbs::json-ld'     - JSON-LD Structured Data\n    | - 'breadcrumbs::materialize' - Materialize\n    | - 'breadcrumbs::tailwind'    - Tailwind CSS\n    | - 'breadcrumbs::uikit'       - UIkit\n    |\n    | Or a custom view, e.g. '_partials/breadcrumbs'.\n    |\n    */\n\n    'view' => 'breadcrumbs::bootstrap5',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Breadcrumbs File(s)\n    |--------------------------------------------------------------------------\n    |\n    | The file(s) where breadcrumbs are defined. e.g.\n    |\n    | - base_path('routes/breadcrumbs.php')\n    | - glob(base_path('breadcrumbs/*.php'))\n    |\n    */\n\n    'files' => base_path('routes/breadcrumbs.php'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Exceptions\n    |--------------------------------------------------------------------------\n    |\n    | Determine when to throw an exception.\n    |\n    */\n\n    // When route-bound breadcrumbs are used but the current route doesn't have a name (UnnamedRouteException)\n    'unnamed-route-exception' => true,\n\n    // When route-bound breadcrumbs are used and the matching breadcrumb doesn't exist (InvalidBreadcrumbException)\n    'missing-route-bound-breadcrumb-exception' => true,\n\n    // When a named breadcrumb is used but doesn't exist (InvalidBreadcrumbException)\n    'invalid-named-breadcrumb-exception' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Classes\n    |--------------------------------------------------------------------------\n    |\n    | Subclass the default classes for more advanced customisations.\n    |\n    */\n\n    // Manager\n    'manager-class' => Diglactic\\Breadcrumbs\\Manager::class,\n\n    // Generator\n    'generator-class' => Diglactic\\Breadcrumbs\\Generator::class,\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "broadcasting.php",
                        "relativePath": "config\\broadcasting.php",
                        "extension": "php",
                        "size": 1615,
                        "sizeFormatted": "1.58 KB",
                        "contentLength": 1615,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Broadcaster\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default broadcaster that will be used by the\n    | framework when an event needs to be broadcast. You may set this to\n    | any of the connections defined in the \"connections\" array below.\n    |\n    | Supported: \"pusher\", \"redis\", \"log\", \"null\"\n    |\n    */\n\n    'default' => env('BROADCAST_DRIVER', 'null'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Broadcast Connections\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define all of the broadcast connections that will be used\n    | to broadcast events to other systems or over websockets. Samples of\n    | each available type of connection are provided inside this array.\n    |\n    */\n\n    'connections' => [\n        'pusher' => [\n            'driver'  => 'pusher',\n            'key'     => env('PUSHER_APP_KEY'),\n            'secret'  => env('PUSHER_APP_SECRET'),\n            'app_id'  => env('PUSHER_APP_ID'),\n            'options' => [\n                'cluster'   => env('PUSHER_APP_CLUSTER'),\n                'encrypted' => true,\n            ],\n        ],\n\n        'redis' => [\n            'driver'     => 'redis',\n            'connection' => 'default',\n        ],\n\n        'log' => [\n            'driver' => 'log',\n        ],\n\n        'null' => [\n            'driver' => 'null',\n        ],\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "cache.php",
                        "relativePath": "config\\cache.php",
                        "extension": "php",
                        "size": 3560,
                        "sizeFormatted": "3.48 KB",
                        "contentLength": 3560,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Str;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Cache Store\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default cache store that will be used by the\n    | framework. This connection is utilized if another isn't explicitly\n    | specified when running a cache operation inside the application.\n    |\n    */\n\n    'default' => env('CACHE_STORE', 'file'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Cache Stores\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define all of the cache \"stores\" for your application as\n    | well as their drivers. You may even define multiple stores for the\n    | same cache driver to group types of items stored in your caches.\n    |\n    | Supported drivers: \"array\", \"database\", \"file\", \"memcached\",\n    |                    \"redis\", \"dynamodb\", \"octane\", \"null\"\n    |\n    */\n\n    'stores' => [\n\n        'array' => [\n            'driver'    => 'array',\n            'serialize' => false,\n        ],\n\n        'database' => [\n            'driver'          => 'database',\n            'connection'      => env('DB_CACHE_CONNECTION'),\n            'table'           => env('DB_CACHE_TABLE', 'cache'),\n            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),\n            'lock_table'      => env('DB_CACHE_LOCK_TABLE'),\n        ],\n\n        'file' => [\n            'driver'    => 'file',\n            'path'      => storage_path('framework/cache/data'),\n            'lock_path' => storage_path('framework/cache/data'),\n        ],\n\n        'memcached' => [\n            'driver'        => 'memcached',\n            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),\n            'sasl'          => [\n                env('MEMCACHED_USERNAME'),\n                env('MEMCACHED_PASSWORD'),\n            ],\n            'options' => [\n                // Memcached::OPT_CONNECT_TIMEOUT => 2000,\n            ],\n            'servers' => [\n                [\n                    'host'   => env('MEMCACHED_HOST', '127.0.0.1'),\n                    'port'   => env('MEMCACHED_PORT', 11211),\n                    'weight' => 100,\n                ],\n            ],\n        ],\n\n        'redis' => [\n            'driver'          => 'redis',\n            'connection'      => env('REDIS_CACHE_CONNECTION', 'cache'),\n            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),\n        ],\n\n        'dynamodb' => [\n            'driver'   => 'dynamodb',\n            'key'      => env('AWS_ACCESS_KEY_ID'),\n            'secret'   => env('AWS_SECRET_ACCESS_KEY'),\n            'region'   => env('AWS_DEFAULT_REGION', 'us-east-1'),\n            'table'    => env('DYNAMODB_CACHE_TABLE', 'cache'),\n            'endpoint' => env('DYNAMODB_ENDPOINT'),\n        ],\n\n        'octane' => [\n            'driver' => 'octane',\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Cache Key Prefix\n    |--------------------------------------------------------------------------\n    |\n    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache\n    | stores, there might be other applications using the same cache. For\n    | that reason, you may prefix every cache key to avoid collisions.\n    |\n    */\n\n    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "concord.php",
                        "relativePath": "config\\concord.php",
                        "extension": "php",
                        "size": 2124,
                        "sizeFormatted": "2.07 KB",
                        "contentLength": 2124,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /**\n     * The path of the convention file.\n     */\n    'convention' => Webkul\\Core\\CoreConvention::class,\n\n    /**\n     * Example:\n     *\n     * VendorA\\ModuleX\\Providers\\ModuleServiceProvider::class,\n     * VendorB\\ModuleY\\Providers\\ModuleServiceProvider::class,\n     */\n    'modules' => [\n        \\Webkul\\Admin\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Attribute\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\BookingProduct\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\CMS\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\CartRule\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\CatalogRule\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Category\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Checkout\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Core\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Customer\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\DataGrid\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\DataTransfer\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\GDPR\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Inventory\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Marketing\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Notification\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Payment\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Paypal\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Product\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Rule\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Sales\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Shipping\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Shop\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Sitemap\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\SocialLogin\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Tax\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\Theme\\Providers\\ModuleServiceProvider::class,\n        \\Webkul\\User\\Providers\\ModuleServiceProvider::class,\n\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "cors.php",
                        "relativePath": "config\\cors.php",
                        "extension": "php",
                        "size": 846,
                        "sizeFormatted": "846 B",
                        "contentLength": 846,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Cross-Origin Resource Sharing (CORS) Configuration\n    |--------------------------------------------------------------------------\n    |\n    | Here you may configure your settings for cross-origin resource sharing\n    | or \"CORS\". This determines what cross-origin operations may execute\n    | in web browsers. You are free to adjust these settings as needed.\n    |\n    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n    |\n    */\n\n    'paths' => ['api/*', 'sanctum/csrf-cookie'],\n\n    'allowed_methods' => ['*'],\n\n    'allowed_origins' => ['*'],\n\n    'allowed_origins_patterns' => [],\n\n    'allowed_headers' => ['*'],\n\n    'exposed_headers' => [],\n\n    'max_age' => 0,\n\n    'supports_credentials' => false,\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "database.php",
                        "relativePath": "config\\database.php",
                        "extension": "php",
                        "size": 7150,
                        "sizeFormatted": "6.98 KB",
                        "contentLength": 7150,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Str;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Database Connection Name\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify which of the database connections below you wish\n    | to use as your default connection for database operations. This is\n    | the connection which will be utilized unless another connection\n    | is explicitly specified when you execute a query / statement.\n    |\n    */\n\n    'default' => env('DB_CONNECTION', 'mysql'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Database Connections\n    |--------------------------------------------------------------------------\n    |\n    | Below are all of the database connections defined for your application.\n    | An example configuration is provided for each database system which\n    | is supported by Laravel. You're free to add / remove connections.\n    |\n    */\n\n    'connections' => [\n\n        'sqlite' => [\n            'driver'                  => 'sqlite',\n            'url'                     => env('DB_URL'),\n            'database'                => env('DB_DATABASE', database_path('database.sqlite')),\n            'prefix'                  => env('DB_PREFIX', ''),\n            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),\n            'busy_timeout'            => null,\n            'journal_mode'            => null,\n            'synchronous'             => null,\n        ],\n\n        'mysql' => [\n            'driver'         => 'mysql',\n            'url'            => env('DB_URL'),\n            'host'           => env('DB_HOST', '127.0.0.1'),\n            'port'           => env('DB_PORT', '3306'),\n            'database'       => env('DB_DATABASE', 'laravel'),\n            'username'       => env('DB_USERNAME', 'root'),\n            'password'       => env('DB_PASSWORD', ''),\n            'unix_socket'    => env('DB_SOCKET', ''),\n            'charset'        => env('DB_CHARSET', 'utf8mb4'),\n            'collation'      => env('DB_COLLATION', 'utf8mb4_unicode_ci'),\n            'prefix'         => env('DB_PREFIX', ''),\n            'prefix_indexes' => true,\n            'strict'         => false,\n            'engine'         => null,\n            'options'        => extension_loaded('pdo_mysql') ? array_filter([\n                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),\n            ]) : [],\n        ],\n\n        'mariadb' => [\n            'driver'         => 'mariadb',\n            'url'            => env('DB_URL'),\n            'host'           => env('DB_HOST', '127.0.0.1'),\n            'port'           => env('DB_PORT', '3306'),\n            'database'       => env('DB_DATABASE', 'laravel'),\n            'username'       => env('DB_USERNAME', 'root'),\n            'password'       => env('DB_PASSWORD', ''),\n            'unix_socket'    => env('DB_SOCKET', ''),\n            'charset'        => env('DB_CHARSET', 'utf8mb4'),\n            'collation'      => env('DB_COLLATION', 'utf8mb4_unicode_ci'),\n            'prefix'         => env('DB_PREFIX', ''),\n            'prefix_indexes' => true,\n            'strict'         => false,\n            'engine'         => null,\n            'options'        => extension_loaded('pdo_mysql') ? array_filter([\n                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),\n            ]) : [],\n        ],\n\n        'pgsql' => [\n            'driver'         => 'pgsql',\n            'url'            => env('DB_URL'),\n            'host'           => env('DB_HOST', '127.0.0.1'),\n            'port'           => env('DB_PORT', '5432'),\n            'database'       => env('DB_DATABASE', 'laravel'),\n            'username'       => env('DB_USERNAME', 'root'),\n            'password'       => env('DB_PASSWORD', ''),\n            'charset'        => env('DB_CHARSET', 'utf8'),\n            'prefix'         => env('DB_PREFIX', ''),\n            'prefix_indexes' => true,\n            'search_path'    => 'public',\n            'sslmode'        => 'prefer',\n        ],\n\n        'sqlsrv' => [\n            'driver'         => 'sqlsrv',\n            'url'            => env('DB_URL'),\n            'host'           => env('DB_HOST', 'localhost'),\n            'port'           => env('DB_PORT', '1433'),\n            'database'       => env('DB_DATABASE', 'laravel'),\n            'username'       => env('DB_USERNAME', 'root'),\n            'password'       => env('DB_PASSWORD', ''),\n            'charset'        => env('DB_CHARSET', 'utf8'),\n            'prefix'         => env('DB_PREFIX', ''),\n            'prefix_indexes' => true,\n            // 'encrypt' => env('DB_ENCRYPT', 'yes'),\n            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Migration Repository Table\n    |--------------------------------------------------------------------------\n    |\n    | This table keeps track of all the migrations that have already run for\n    | your application. Using this information, we can determine which of\n    | the migrations on disk haven't actually been run on the database.\n    |\n    */\n\n    'migrations' => [\n        'table'                  => 'migrations',\n        'update_date_on_publish' => true,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Redis Databases\n    |--------------------------------------------------------------------------\n    |\n    | Redis is an open source, fast, and advanced key-value store that also\n    | provides a richer body of commands than a typical key-value system\n    | such as Memcached. You may define your connection settings here.\n    |\n    */\n\n    'redis' => [\n\n        'client' => env('REDIS_CLIENT', 'phpredis'),\n\n        'options' => [\n            'cluster' => env('REDIS_CLUSTER', 'redis'),\n            'prefix'  => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n        ],\n\n        'default' => [\n            'url'      => env('REDIS_URL'),\n            'host'     => env('REDIS_HOST', '127.0.0.1'),\n            'username' => env('REDIS_USERNAME'),\n            'password' => env('REDIS_PASSWORD'),\n            'port'     => env('REDIS_PORT', '6379'),\n            'database' => env('REDIS_DB', '0'),\n        ],\n\n        'cache' => [\n            'url'      => env('REDIS_URL'),\n            'host'     => env('REDIS_HOST', '127.0.0.1'),\n            'username' => env('REDIS_USERNAME'),\n            'password' => env('REDIS_PASSWORD'),\n            'port'     => env('REDIS_PORT', '6379'),\n            'database' => env('REDIS_CACHE_DB', '1'),\n        ],\n\n        'session' => [\n            'url'      => env('REDIS_URL'),\n            'host'     => env('REDIS_HOST', '127.0.0.1'),\n            'username' => env('REDIS_USERNAME'),\n            'password' => env('REDIS_PASSWORD', null),\n            'port'     => env('REDIS_PORT', 6379),\n            'database' => env('REDIS_SESSION_DATABASE', '2'),\n        ],\n\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "debugbar.php",
                        "relativePath": "config\\debugbar.php",
                        "extension": "php",
                        "size": 18069,
                        "sizeFormatted": "17.65 KB",
                        "contentLength": 18069,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n     |--------------------------------------------------------------------------\n     | Debugbar Settings\n     |--------------------------------------------------------------------------\n     |\n     | Debugbar is enabled by default, when debug is set to true in app.php.\n     | You can override the value by setting enable to true or false instead of null.\n     |\n     | You can provide an array of URI's that must be ignored (eg. 'api/*')\n     |\n     */\n\n    'enabled' => env('DEBUGBAR_ENABLED', null),\n    'hide_empty_tabs' => env('DEBUGBAR_HIDE_EMPTY_TABS', true), // Hide tabs until they have content\n    'except' => [\n        'telescope*',\n        'horizon*',\n    ],\n\n    /*\n     |--------------------------------------------------------------------------\n     | Storage settings\n     |--------------------------------------------------------------------------\n     |\n     | Debugbar stores data for session/ajax requests.\n     | You can disable this, so the debugbar stores data in headers/session,\n     | but this can cause problems with large data collectors.\n     | By default, file storage (in the storage folder) is used. Redis and PDO\n     | can also be used. For PDO, run the package migrations first.\n     |\n     | Warning: Enabling storage.open will allow everyone to access previous\n     | request, do not enable open storage in publicly available environments!\n     | Specify a callback if you want to limit based on IP or authentication.\n     | Leaving it to null will allow localhost only.\n     */\n    'storage' => [\n        'enabled'    => env('DEBUGBAR_STORAGE_ENABLED', true),\n        'open'       => env('DEBUGBAR_OPEN_STORAGE'), // bool/callback.\n        'driver'     => env('DEBUGBAR_STORAGE_DRIVER', 'file'), // redis, file, pdo, socket, custom\n        'path'       => env('DEBUGBAR_STORAGE_PATH', storage_path('debugbar')), // For file driver\n        'connection' => env('DEBUGBAR_STORAGE_CONNECTION', null), // Leave null for default connection (Redis/PDO)\n        'provider'   => env('DEBUGBAR_STORAGE_PROVIDER', ''), // Instance of StorageInterface for custom driver\n        'hostname'   => env('DEBUGBAR_STORAGE_HOSTNAME', '127.0.0.1'), // Hostname to use with the \"socket\" driver\n        'port'       => env('DEBUGBAR_STORAGE_PORT', 2304), // Port to use with the \"socket\" driver\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Editor\n    |--------------------------------------------------------------------------\n    |\n    | Choose your preferred editor to use when clicking file name.\n    |\n    | Supported: \"phpstorm\", \"vscode\", \"vscode-insiders\", \"vscode-remote\",\n    |            \"vscode-insiders-remote\", \"vscodium\", \"textmate\", \"emacs\",\n    |            \"sublime\", \"atom\", \"nova\", \"macvim\", \"idea\", \"netbeans\",\n    |            \"xdebug\", \"espresso\"\n    |\n    */\n\n    'editor' => env('DEBUGBAR_EDITOR') ?: env('IGNITION_EDITOR', 'phpstorm'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Remote Path Mapping\n    |--------------------------------------------------------------------------\n    |\n    | If you are using a remote dev server, like Laravel Homestead, Docker, or\n    | even a remote VPS, it will be necessary to specify your path mapping.\n    |\n    | Leaving one, or both of these, empty or null will not trigger the remote\n    | URL changes and Debugbar will treat your editor links as local files.\n    |\n    | \"remote_sites_path\" is an absolute base path for your sites or projects\n    | in Homestead, Vagrant, Docker, or another remote development server.\n    |\n    | Example value: \"/home/vagrant/Code\"\n    |\n    | \"local_sites_path\" is an absolute base path for your sites or projects\n    | on your local computer where your IDE or code editor is running on.\n    |\n    | Example values: \"/Users/<name>/Code\", \"C:\\Users\\<name>\\Documents\\Code\"\n    |\n    */\n\n    'remote_sites_path' => env('DEBUGBAR_REMOTE_SITES_PATH'),\n    'local_sites_path' => env('DEBUGBAR_LOCAL_SITES_PATH', env('IGNITION_LOCAL_SITES_PATH')),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Vendors\n     |--------------------------------------------------------------------------\n     |\n     | Vendor files are included by default, but can be set to false.\n     | This can also be set to 'js' or 'css', to only include javascript or css vendor files.\n     | Vendor files are for css: font-awesome (including fonts) and highlight.js (css files)\n     | and for js: jquery and highlight.js\n     | So if you want syntax highlighting, set it to true.\n     | jQuery is set to not conflict with existing jQuery scripts.\n     |\n     */\n\n    'include_vendors' => env('DEBUGBAR_INCLUDE_VENDORS', true),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Capture Ajax Requests\n     |--------------------------------------------------------------------------\n     |\n     | The Debugbar can capture Ajax requests and display them. If you don't want this (ie. because of errors),\n     | you can use this option to disable sending the data through the headers.\n     |\n     | Optionally, you can also send ServerTiming headers on ajax requests for the Chrome DevTools.\n     |\n     | Note for your request to be identified as ajax requests they must either send the header\n     | X-Requested-With with the value XMLHttpRequest (most JS libraries send this), or have application/json as a Accept header.\n     |\n     | By default `ajax_handler_auto_show` is set to true allowing ajax requests to be shown automatically in the Debugbar.\n     | Changing `ajax_handler_auto_show` to false will prevent the Debugbar from reloading.\n     |\n     | You can defer loading the dataset, so it will be loaded with ajax after the request is done. (Experimental)\n     */\n\n    'capture_ajax' => env('DEBUGBAR_CAPTURE_AJAX', true),\n    'add_ajax_timing' => env('DEBUGBAR_ADD_AJAX_TIMING', false),\n    'ajax_handler_auto_show' => env('DEBUGBAR_AJAX_HANDLER_AUTO_SHOW', true),\n    'ajax_handler_enable_tab' => env('DEBUGBAR_AJAX_HANDLER_ENABLE_TAB', true),\n    'defer_datasets' => env('DEBUGBAR_DEFER_DATASETS', false),\n    /*\n     |--------------------------------------------------------------------------\n     | Custom Error Handler for Deprecated warnings\n     |--------------------------------------------------------------------------\n     |\n     | When enabled, the Debugbar shows deprecated warnings for Symfony components\n     | in the Messages tab.\n     |\n     */\n    'error_handler' => env('DEBUGBAR_ERROR_HANDLER', false),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Clockwork integration\n     |--------------------------------------------------------------------------\n     |\n     | The Debugbar can emulate the Clockwork headers, so you can use the Chrome\n     | Extension, without the server-side code. It uses Debugbar collectors instead.\n     |\n     */\n    'clockwork' => env('DEBUGBAR_CLOCKWORK', false),\n\n    /*\n     |--------------------------------------------------------------------------\n     | DataCollectors\n     |--------------------------------------------------------------------------\n     |\n     | Enable/disable DataCollectors\n     |\n     */\n\n    'collectors' => [\n        'phpinfo'         => env('DEBUGBAR_COLLECTORS_PHPINFO', false),         // Php version\n        'messages'        => env('DEBUGBAR_COLLECTORS_MESSAGES', true),         // Messages\n        'time'            => env('DEBUGBAR_COLLECTORS_TIME', true),             // Time Datalogger\n        'memory'          => env('DEBUGBAR_COLLECTORS_MEMORY', true),           // Memory usage\n        'exceptions'      => env('DEBUGBAR_COLLECTORS_EXCEPTIONS', true),       // Exception displayer\n        'log'             => env('DEBUGBAR_COLLECTORS_LOG', true),              // Logs from Monolog (merged in messages if enabled)\n        'db'              => env('DEBUGBAR_COLLECTORS_DB', true),               // Show database (PDO) queries and bindings\n        'views'           => env('DEBUGBAR_COLLECTORS_VIEWS', true),            // Views with their data\n        'route'           => env('DEBUGBAR_COLLECTORS_ROUTE', false),           // Current route information\n        'auth'            => env('DEBUGBAR_COLLECTORS_AUTH', false),            // Display Laravel authentication status\n        'gate'            => env('DEBUGBAR_COLLECTORS_GATE', true),             // Display Laravel Gate checks\n        'session'         => env('DEBUGBAR_COLLECTORS_SESSION', false),         // Display session data\n        'symfony_request' => env('DEBUGBAR_COLLECTORS_SYMFONY_REQUEST', true),  // Only one can be enabled..\n        'mail'            => env('DEBUGBAR_COLLECTORS_MAIL', true),             // Catch mail messages\n        'laravel'         => env('DEBUGBAR_COLLECTORS_LARAVEL', true),          // Laravel version and environment\n        'events'          => env('DEBUGBAR_COLLECTORS_EVENTS', false),          // All events fired\n        'default_request' => env('DEBUGBAR_COLLECTORS_DEFAULT_REQUEST', false), // Regular or special Symfony request logger\n        'logs'            => env('DEBUGBAR_COLLECTORS_LOGS', false),            // Add the latest log messages\n        'files'           => env('DEBUGBAR_COLLECTORS_FILES', false),           // Show the included files\n        'config'          => env('DEBUGBAR_COLLECTORS_CONFIG', false),          // Display config settings\n        'cache'           => env('DEBUGBAR_COLLECTORS_CACHE', false),           // Display cache events\n        'models'          => env('DEBUGBAR_COLLECTORS_MODELS', true),           // Display models\n        'livewire'        => env('DEBUGBAR_COLLECTORS_LIVEWIRE', true),         // Display Livewire (when available)\n        'jobs'            => env('DEBUGBAR_COLLECTORS_JOBS', false),            // Display dispatched jobs\n        'pennant'         => env('DEBUGBAR_COLLECTORS_PENNANT', false),         // Display Pennant feature flags\n    ],\n\n    /*\n     |--------------------------------------------------------------------------\n     | Extra options\n     |--------------------------------------------------------------------------\n     |\n     | Configure some DataCollectors\n     |\n     */\n\n    'options' => [\n        'time' => [\n            'memory_usage' => env('DEBUGBAR_OPTIONS_TIME_MEMORY_USAGE', false), // Calculated by subtracting memory start and end, it may be inaccurate\n        ],\n        'messages' => [\n            'trace' => env('DEBUGBAR_OPTIONS_MESSAGES_TRACE', true),                  // Trace the origin of the debug message\n            'capture_dumps' => env('DEBUGBAR_OPTIONS_MESSAGES_CAPTURE_DUMPS', false), // Capture laravel `dump();` as message\n        ],\n        'memory' => [\n            'reset_peak' => env('DEBUGBAR_OPTIONS_MEMORY_RESET_PEAK', false),       // run memory_reset_peak_usage before collecting\n            'with_baseline' => env('DEBUGBAR_OPTIONS_MEMORY_WITH_BASELINE', false), // Set boot memory usage as memory peak baseline\n            'precision' => (int) env('DEBUGBAR_OPTIONS_MEMORY_PRECISION', 0),       // Memory rounding precision\n        ],\n        'auth' => [\n            'show_name' => env('DEBUGBAR_OPTIONS_AUTH_SHOW_NAME', true),     // Also show the users name/email in the debugbar\n            'show_guards' => env('DEBUGBAR_OPTIONS_AUTH_SHOW_GUARDS', true), // Show the guards that are used\n        ],\n        'gate' => [\n            'trace' => false,      // Trace the origin of the Gate checks\n        ],\n        'db' => [\n            'with_params'       => env('DEBUGBAR_OPTIONS_WITH_PARAMS', true),   // Render SQL with the parameters substituted\n            'exclude_paths'     => [       // Paths to exclude entirely from the collector\n                //'vendor/laravel/framework/src/Illuminate/Session', // Exclude sessions queries\n            ],\n            'backtrace'         => env('DEBUGBAR_OPTIONS_DB_BACKTRACE', true),   // Use a backtrace to find the origin of the query in your files.\n            'backtrace_exclude_paths' => [],   // Paths to exclude from backtrace. (in addition to defaults)\n            'timeline'          => env('DEBUGBAR_OPTIONS_DB_TIMELINE', false),  // Add the queries to the timeline\n            'duration_background'  => env('DEBUGBAR_OPTIONS_DB_DURATION_BACKGROUND', true),   // Show shaded background on each query relative to how long it took to execute.\n            'explain' => [                 // Show EXPLAIN output on queries\n                'enabled' => env('DEBUGBAR_OPTIONS_DB_EXPLAIN_ENABLED', false),\n            ],\n            'hints'             => env('DEBUGBAR_OPTIONS_DB_HINTS', false),          // Show hints for common mistakes\n            'show_copy'         => env('DEBUGBAR_OPTIONS_DB_SHOW_COPY', true),       // Show copy button next to the query,\n            'slow_threshold'    => env('DEBUGBAR_OPTIONS_DB_SLOW_THRESHOLD', false), // Only track queries that last longer than this time in ms\n            'memory_usage'      => env('DEBUGBAR_OPTIONS_DB_MEMORY_USAGE', false),   // Show queries memory usage\n            'soft_limit'       => (int) env('DEBUGBAR_OPTIONS_DB_SOFT_LIMIT', 100),  // After the soft limit, no parameters/backtrace are captured\n            'hard_limit'       => (int) env('DEBUGBAR_OPTIONS_DB_HARD_LIMIT', 500),  // After the hard limit, queries are ignored\n        ],\n        'mail' => [\n            'timeline' => env('DEBUGBAR_OPTIONS_MAIL_TIMELINE', true),  // Add mails to the timeline\n            'show_body' => env('DEBUGBAR_OPTIONS_MAIL_SHOW_BODY', true),\n        ],\n        'views' => [\n            'timeline' => env('DEBUGBAR_OPTIONS_VIEWS_TIMELINE', true),                  // Add the views to the timeline\n            'data' => env('DEBUGBAR_OPTIONS_VIEWS_DATA', false),                         // True for all data, 'keys' for only names, false for no parameters.\n            'group' => (int) env('DEBUGBAR_OPTIONS_VIEWS_GROUP', 50),                    // Group duplicate views. Pass value to auto-group, or true/false to force\n            'inertia_pages' => env('DEBUGBAR_OPTIONS_VIEWS_INERTIA_PAGES', 'js/Pages'),  // Path for Inertia views\n            'exclude_paths' => [    // Add the paths which you don't want to appear in the views\n                'vendor/filament'   // Exclude Filament components by default\n            ],\n        ],\n        'route' => [\n            'label' => env('DEBUGBAR_OPTIONS_ROUTE_LABEL', true),  // Show complete route on bar\n        ],\n        'session' => [\n            'hiddens' => [], // Hides sensitive values using array paths\n        ],\n        'symfony_request' => [\n            'label' => env('DEBUGBAR_OPTIONS_SYMFONY_REQUEST_LABEL', true),  // Show route on bar\n            'hiddens' => [], // Hides sensitive values using array paths, example: request_request.password\n        ],\n        'events' => [\n            'data' => env('DEBUGBAR_OPTIONS_EVENTS_DATA', false), // Collect events data, listeners\n            'excluded' => [], // Example: ['eloquent.*', 'composing', Illuminate\\Cache\\Events\\CacheHit::class]\n        ],\n        'logs' => [\n            'file' => env('DEBUGBAR_OPTIONS_LOGS_FILE', null),\n        ],\n        'cache' => [\n            'values' => env('DEBUGBAR_OPTIONS_CACHE_VALUES', true), // Collect cache values\n        ],\n    ],\n\n    /*\n     |--------------------------------------------------------------------------\n     | Inject Debugbar in Response\n     |--------------------------------------------------------------------------\n     |\n     | Usually, the debugbar is added just before </body>, by listening to the\n     | Response after the App is done. If you disable this, you have to add them\n     | in your template yourself. See http://phpdebugbar.com/docs/rendering.html\n     |\n     */\n\n    'inject' => env('DEBUGBAR_INJECT', true),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Debugbar route prefix\n     |--------------------------------------------------------------------------\n     |\n     | Sometimes you want to set route prefix to be used by Debugbar to load\n     | its resources from. Usually the need comes from misconfigured web server or\n     | from trying to overcome bugs like this: http://trac.nginx.org/nginx/ticket/97\n     |\n     */\n    'route_prefix' => env('DEBUGBAR_ROUTE_PREFIX', '_debugbar'),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Debugbar route middleware\n     |--------------------------------------------------------------------------\n     |\n     | Additional middleware to run on the Debugbar routes\n     */\n    'route_middleware' => [],\n\n    /*\n     |--------------------------------------------------------------------------\n     | Debugbar route domain\n     |--------------------------------------------------------------------------\n     |\n     | By default Debugbar route served from the same domain that request served.\n     | To override default domain, specify it as a non-empty value.\n     */\n    'route_domain' => env('DEBUGBAR_ROUTE_DOMAIN', null),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Debugbar theme\n     |--------------------------------------------------------------------------\n     |\n     | Switches between light and dark theme. If set to auto it will respect system preferences\n     | Possible values: auto, light, dark\n     */\n    'theme' => env('DEBUGBAR_THEME', 'auto'),\n\n    /*\n     |--------------------------------------------------------------------------\n     | Backtrace stack limit\n     |--------------------------------------------------------------------------\n     |\n     | By default, the Debugbar limits the number of frames returned by the 'debug_backtrace()' function.\n     | If you need larger stacktraces, you can increase this number. Setting it to 0 will result in no limit.\n     */\n    'debug_backtrace_limit' => (int) env('DEBUGBAR_DEBUG_BACKTRACE_LIMIT', 50),\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "dompdf.php",
                        "relativePath": "config\\dompdf.php",
                        "extension": "php",
                        "size": 11476,
                        "sizeFormatted": "11.21 KB",
                        "contentLength": 11476,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn array(\n\n    /*\n    |--------------------------------------------------------------------------\n    | Settings\n    |--------------------------------------------------------------------------\n    |\n    | Set some default values. It is possible to add all defines that can be set\n    | in dompdf_config.inc.php. You can also override the entire config file.\n    |\n    */\n    'show_warnings' => false,   // Throw an Exception on warnings from dompdf\n\n    'public_path' => null,  // Override the public path if needed\n\n    /*\n     * Dejavu Sans font is missing glyphs for converted entities, turn it off if you need to show € and £.\n     */\n    'convert_entities' => true,\n\n    'options' => array(\n        /**\n         * The location of the DOMPDF font directory\n         *\n         * The location of the directory where DOMPDF will store fonts and font metrics\n         * Note: This directory must exist and be writable by the webserver process.\n         * *Please note the trailing slash.*\n         *\n         * Notes regarding fonts:\n         * Additional .afm font metrics can be added by executing load_font.php from command line.\n         *\n         * Only the original \"Base 14 fonts\" are present on all pdf viewers. Additional fonts must\n         * be embedded in the pdf file or the PDF may not display correctly. This can significantly\n         * increase file size unless font subsetting is enabled. Before embedding a font please\n         * review your rights under the font license.\n         *\n         * Any font specification in the source HTML is translated to the closest font available\n         * in the font directory.\n         *\n         * The pdf standard \"Base 14 fonts\" are:\n         * Courier, Courier-Bold, Courier-BoldOblique, Courier-Oblique,\n         * Helvetica, Helvetica-Bold, Helvetica-BoldOblique, Helvetica-Oblique,\n         * Times-Roman, Times-Bold, Times-BoldItalic, Times-Italic,\n         * Symbol, ZapfDingbats.\n         */\n        \"font_dir\" => storage_path('fonts'), // advised by dompdf (https://github.com/dompdf/dompdf/pull/782)\n\n        /**\n         * The location of the DOMPDF font cache directory\n         *\n         * This directory contains the cached font metrics for the fonts used by DOMPDF.\n         * This directory can be the same as DOMPDF_FONT_DIR\n         *\n         * Note: This directory must exist and be writable by the webserver process.\n         */\n        \"font_cache\" => storage_path('fonts'),\n\n        /**\n         * The location of a temporary directory.\n         *\n         * The directory specified must be writeable by the webserver process.\n         * The temporary directory is required to download remote images and when\n         * using the PDFLib back end.\n         */\n        \"temp_dir\" => sys_get_temp_dir(),\n\n        /**\n         * ==== IMPORTANT ====\n         *\n         * dompdf's \"chroot\": Prevents dompdf from accessing system files or other\n         * files on the webserver.  All local files opened by dompdf must be in a\n         * subdirectory of this directory.  DO NOT set it to '/' since this could\n         * allow an attacker to use dompdf to read any files on the server.  This\n         * should be an absolute path.\n         * This is only checked on command line call by dompdf.php, but not by\n         * direct class use like:\n         * $dompdf = new DOMPDF();  $dompdf->load_html($htmldata); $dompdf->render(); $pdfdata = $dompdf->output();\n         */\n        \"chroot\" => realpath(base_path()),\n\n        /**\n         * Protocol whitelist\n         *\n         * Protocols and PHP wrappers allowed in URIs, and the validation rules\n         * that determine if a resouce may be loaded. Full support is not guaranteed\n         * for the protocols/wrappers specified\n         * by this array.\n         *\n         * @var array\n         */\n        'allowed_protocols' => [\n            \"file://\" => [\"rules\" => []],\n            \"http://\" => [\"rules\" => []],\n            \"https://\" => [\"rules\" => []]\n        ],\n\n         /**\n          * @var string\n          */\n        'log_output_file' => null,\n\n        /**\n         * Whether to enable font subsetting or not.\n         */\n        \"enable_font_subsetting\" => false,\n\n        /**\n         * The PDF rendering backend to use\n         *\n         * Valid settings are 'PDFLib', 'CPDF' (the bundled R&OS PDF class), 'GD' and\n         * 'auto'. 'auto' will look for PDFLib and use it if found, or if not it will\n         * fall back on CPDF. 'GD' renders PDFs to graphic files. {@link\n         * Canvas_Factory} ultimately determines which rendering class to instantiate\n         * based on this setting.\n         *\n         * Both PDFLib & CPDF rendering backends provide sufficient rendering\n         * capabilities for dompdf, however additional features (e.g. object,\n         * image and font support, etc.) differ between backends.  Please see\n         * {@link PDFLib_Adapter} for more information on the PDFLib backend\n         * and {@link CPDF_Adapter} and lib/class.pdf.php for more information\n         * on CPDF. Also see the documentation for each backend at the links\n         * below.\n         *\n         * The GD rendering backend is a little different than PDFLib and\n         * CPDF. Several features of CPDF and PDFLib are not supported or do\n         * not make any sense when creating image files.  For example,\n         * multiple pages are not supported, nor are PDF 'objects'.  Have a\n         * look at {@link GD_Adapter} for more information.  GD support is\n         * experimental, so use it at your own risk.\n         *\n         * @link http://www.pdflib.com\n         * @link http://www.ros.co.nz/pdf\n         * @link http://www.php.net/image\n         */\n        \"pdf_backend\" => \"CPDF\",\n\n        /**\n         * PDFlib license key\n         *\n         * If you are using a licensed, commercial version of PDFlib, specify\n         * your license key here.  If you are using PDFlib-Lite or are evaluating\n         * the commercial version of PDFlib, comment out this setting.\n         *\n         * @link http://www.pdflib.com\n         *\n         * If pdflib present in web server and auto or selected explicitely above,\n         * a real license code must exist!\n         */\n        //\"DOMPDF_PDFLIB_LICENSE\" => \"your license key here\",\n\n        /**\n         * html target media view which should be rendered into pdf.\n         * List of types and parsing rules for future extensions:\n         * http://www.w3.org/TR/REC-html40/types.html\n         *   screen, tty, tv, projection, handheld, print, braille, aural, all\n         * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.\n         * Note, even though the generated pdf file is intended for print output,\n         * the desired content might be different (e.g. screen or projection view of html file).\n         * Therefore allow specification of content here.\n         */\n        \"default_media_type\" => \"screen\",\n\n        /**\n         * The default paper size.\n         *\n         * North America standard is \"letter\"; other countries generally \"a4\"\n         *\n         * @see CPDF_Adapter::PAPER_SIZES for valid sizes ('letter', 'legal', 'A4', etc.)\n         */\n        \"default_paper_size\" => \"a4\",\n\n         /**\n          * The default paper orientation.\n          *\n          * The orientation of the page (portrait or landscape).\n          *\n          * @var string\n          */\n        'default_paper_orientation' => \"portrait\",\n\n        /**\n         * The default font family\n         *\n         * Used if no suitable fonts can be found. This must exist in the font folder.\n         * @var string\n         */\n        \"default_font\" => \"serif\",\n\n        /**\n         * Image DPI setting\n         *\n         * This setting determines the default DPI setting for images and fonts.  The\n         * DPI may be overridden for inline images by explictly setting the\n         * image's width & height style attributes (i.e. if the image's native\n         * width is 600 pixels and you specify the image's width as 72 points,\n         * the image will have a DPI of 600 in the rendered PDF.  The DPI of\n         * background images can not be overridden and is controlled entirely\n         * via this parameter.\n         *\n         * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).\n         * If a size in html is given as px (or without unit as image size),\n         * this tells the corresponding size in pt.\n         * This adjusts the relative sizes to be similar to the rendering of the\n         * html page in a reference browser.\n         *\n         * In pdf, always 1 pt = 1/72 inch\n         *\n         * Rendering resolution of various browsers in px per inch:\n         * Windows Firefox and Internet Explorer:\n         *   SystemControl->Display properties->FontResolution: Default:96, largefonts:120, custom:?\n         * Linux Firefox:\n         *   about:config *resolution: Default:96\n         *   (xorg screen dimension in mm and Desktop font dpi settings are ignored)\n         *\n         * Take care about extra font/image zoom factor of browser.\n         *\n         * In images, <img> size in pixel attribute, img css style, are overriding\n         * the real image dimension in px for rendering.\n         *\n         * @var int\n         */\n        \"dpi\" => 96,\n\n        /**\n         * Enable inline PHP\n         *\n         * If this setting is set to true then DOMPDF will automatically evaluate\n         * inline PHP contained within <script type=\"text/php\"> ... </script> tags.\n         *\n         * Enabling this for documents you do not trust (e.g. arbitrary remote html\n         * pages) is a security risk.  Set this option to false if you wish to process\n         * untrusted documents.\n         *\n         * @var bool\n         */\n        \"enable_php\" => false,\n\n        /**\n         * Enable inline Javascript\n         *\n         * If this setting is set to true then DOMPDF will automatically insert\n         * JavaScript code contained within <script type=\"text/javascript\"> ... </script> tags.\n         *\n         * @var bool\n         */\n        \"enable_javascript\" => true,\n\n        /**\n         * Enable remote file access\n         *\n         * If this setting is set to true, DOMPDF will access remote sites for\n         * images and CSS files as required.\n         * This is required for part of test case www/test/image_variants.html through www/examples.php\n         *\n         * Attention!\n         * This can be a security risk, in particular in combination with DOMPDF_ENABLE_PHP and\n         * allowing remote access to dompdf.php or on allowing remote html code to be passed to\n         * $dompdf = new DOMPDF(, $dompdf->load_html(...,\n         * This allows anonymous users to download legally doubtful internet content which on\n         * tracing back appears to being downloaded by your server, or allows malicious php code\n         * in remote html pages to be executed by your server with your account privileges.\n         *\n         * @var bool\n         */\n        \"enable_remote\" => true,\n\n        /**\n         * A ratio applied to the fonts height to be more like browsers' line height\n         */\n        \"font_height_ratio\" => 1.1,\n\n        /**\n         * Use the HTML5 Lib parser\n         *\n         * @deprecated This feature is now always on in dompdf 2.x\n         * @var bool\n         */\n        \"enable_html5_parser\" => true,\n    ),\n\n\n);\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "elasticsearch.php",
                        "relativePath": "config\\elasticsearch.php",
                        "extension": "php",
                        "size": 2133,
                        "sizeFormatted": "2.08 KB",
                        "contentLength": 2133,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /**\n     * Here you can specify the connection to use when building a client.\n     */\n    'connection' => 'default',\n\n    /**\n     * These are the available connections parameters that you can use to connect\n     */\n    'connections' => [\n        'default' => [\n            'hosts' => [\n                env('ELASTICSEARCH_HOST', 'http://localhost:9200'),\n            ],\n\n            'user'   => env('ELASTICSEARCH_USER', null),\n            'pass'   => env('ELASTICSEARCH_PASS', null),\n        ],\n\n        /**\n         * You can connect with API key authentication by setting the `api` key\n         * instead of the `user` and `pass` keys.\n         */\n        'api' => [\n            'hosts' => [\n                env('ELASTICSEARCH_HOST', null),\n            ],\n\n            'key'   => env('ELASTICSEARCH_API_KEY', null),\n        ],\n\n        /**\n         * You can connect to Elastic Cloud with the Cloud ID using the `cloud` key.\n         */\n        'cloud' => [\n            'id'      => env('ELASTICSEARCH_CLOUD_ID', null),\n\n            /**\n             * If you are authenticating with API KEY then set user and pass as null\n             */\n            'api_key' => env('ELASTICSEARCH_API_KEY', null),\n\n            /**\n             * If you are authenticating with username and password then set api_key as null\n             */\n            'user'    => env('ELASTICSEARCH_USER', null),\n            'pass'    => env('ELASTICSEARCH_PASS', null),\n        ],\n    ],\n\n    /**\n     * CA Bundle\n     *\n     * If you have the http_ca.crt certificate copied during the start of Elasticsearch\n     * then the path here\n     *\n     * @see https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/connecting.html#auth-http\n     */\n    'caBundle' => null,\n\n    /**\n     * Retries\n     *\n     * By default, the client will retry n times, where n = number of nodes in\n     * your cluster. If you would like to disable retries, or change the number,\n     * you can do so here.\n     *\n     * @see https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/set-retries.html\n     */\n    'retries' => null,\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "excel.php",
                        "relativePath": "config\\excel.php",
                        "extension": "php",
                        "size": 14274,
                        "sizeFormatted": "13.94 KB",
                        "contentLength": 14274,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Maatwebsite\\Excel\\Excel;\nuse PhpOffice\\PhpSpreadsheet\\Reader\\Csv;\n\nreturn [\n    'exports' => [\n\n        /*\n        |--------------------------------------------------------------------------\n        | Chunk size\n        |--------------------------------------------------------------------------\n        |\n        | When using FromQuery, the query is automatically chunked.\n        | Here you can specify how big the chunk should be.\n        |\n        */\n        'chunk_size'             => 1000,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Pre-calculate formulas during export\n        |--------------------------------------------------------------------------\n        */\n        'pre_calculate_formulas' => false,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Enable strict null comparison\n        |--------------------------------------------------------------------------\n        |\n        | When enabling strict null comparison empty cells ('') will\n        | be added to the sheet.\n        */\n        'strict_null_comparison' => false,\n\n        /*\n        |--------------------------------------------------------------------------\n        | CSV Settings\n        |--------------------------------------------------------------------------\n        |\n        | Configure e.g. delimiter, enclosure and line ending for CSV exports.\n        |\n        */\n        'csv'                    => [\n            'delimiter'              => ',',\n            'enclosure'              => '\"',\n            'line_ending'            => PHP_EOL,\n            'use_bom'                => false,\n            'include_separator_line' => false,\n            'excel_compatibility'    => false,\n            'output_encoding'        => '',\n            'test_auto_detect'       => true,\n        ],\n\n        /*\n        |--------------------------------------------------------------------------\n        | Worksheet properties\n        |--------------------------------------------------------------------------\n        |\n        | Configure e.g. default title, creator, subject,...\n        |\n        */\n        'properties'             => [\n            'creator'        => '',\n            'lastModifiedBy' => '',\n            'title'          => '',\n            'description'    => '',\n            'subject'        => '',\n            'keywords'       => '',\n            'category'       => '',\n            'manager'        => '',\n            'company'        => '',\n        ],\n    ],\n\n    'imports'            => [\n\n        /*\n        |--------------------------------------------------------------------------\n        | Read Only\n        |--------------------------------------------------------------------------\n        |\n        | When dealing with imports, you might only be interested in the\n        | data that the sheet exists. By default we ignore all styles,\n        | however if you want to do some logic based on style data\n        | you can enable it by setting read_only to false.\n        |\n        */\n        'read_only'    => true,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Ignore Empty\n        |--------------------------------------------------------------------------\n        |\n        | When dealing with imports, you might be interested in ignoring\n        | rows that have null values or empty strings. By default rows\n        | containing empty strings or empty values are not ignored but can be\n        | ignored by enabling the setting ignore_empty to true.\n        |\n        */\n        'ignore_empty' => false,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Heading Row Formatter\n        |--------------------------------------------------------------------------\n        |\n        | Configure the heading row formatter.\n        | Available options: none|slug|custom\n        |\n        */\n        'heading_row'  => [\n            'formatter' => 'slug',\n        ],\n\n        /*\n        |--------------------------------------------------------------------------\n        | CSV Settings\n        |--------------------------------------------------------------------------\n        |\n        | Configure e.g. delimiter, enclosure and line ending for CSV imports.\n        |\n        */\n        'csv'          => [\n            'delimiter'        => null,\n            'enclosure'        => '\"',\n            'escape_character' => '\\\\',\n            'contiguous'       => false,\n            'input_encoding'   => Csv::GUESS_ENCODING,\n        ],\n\n        /*\n        |--------------------------------------------------------------------------\n        | Worksheet properties\n        |--------------------------------------------------------------------------\n        |\n        | Configure e.g. default title, creator, subject,...\n        |\n        */\n        'properties'   => [\n            'creator'        => '',\n            'lastModifiedBy' => '',\n            'title'          => '',\n            'description'    => '',\n            'subject'        => '',\n            'keywords'       => '',\n            'category'       => '',\n            'manager'        => '',\n            'company'        => '',\n        ],\n\n        /*\n       |--------------------------------------------------------------------------\n       | Cell Middleware\n       |--------------------------------------------------------------------------\n       |\n       | Configure middleware that is executed on getting a cell value\n       |\n       */\n        'cells'        => [\n            'middleware' => [\n                //\\Maatwebsite\\Excel\\Middleware\\TrimCellValue::class,\n                //\\Maatwebsite\\Excel\\Middleware\\ConvertEmptyCellValuesToNull::class,\n            ],\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Extension detector\n    |--------------------------------------------------------------------------\n    |\n    | Configure here which writer/reader type should be used when the package\n    | needs to guess the correct type based on the extension alone.\n    |\n    */\n    'extension_detector' => [\n        'xlsx'     => Excel::XLSX,\n        'xlsm'     => Excel::XLSX,\n        'xltx'     => Excel::XLSX,\n        'xltm'     => Excel::XLSX,\n        'xls'      => Excel::XLS,\n        'xlt'      => Excel::XLS,\n        'ods'      => Excel::ODS,\n        'ots'      => Excel::ODS,\n        'slk'      => Excel::SLK,\n        'xml'      => Excel::XML,\n        'gnumeric' => Excel::GNUMERIC,\n        'htm'      => Excel::HTML,\n        'html'     => Excel::HTML,\n        'csv'      => Excel::CSV,\n        'tsv'      => Excel::TSV,\n\n        /*\n        |--------------------------------------------------------------------------\n        | PDF Extension\n        |--------------------------------------------------------------------------\n        |\n        | Configure here which Pdf driver should be used by default.\n        | Available options: Excel::MPDF | Excel::TCPDF | Excel::DOMPDF\n        |\n        */\n        'pdf'      => Excel::DOMPDF,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Value Binder\n    |--------------------------------------------------------------------------\n    |\n    | PhpSpreadsheet offers a way to hook into the process of a value being\n    | written to a cell. In there some assumptions are made on how the\n    | value should be formatted. If you want to change those defaults,\n    | you can implement your own default value binder.\n    |\n    | Possible value binders:\n    |\n    | [x] Maatwebsite\\Excel\\DefaultValueBinder::class\n    | [x] PhpOffice\\PhpSpreadsheet\\Cell\\StringValueBinder::class\n    | [x] PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder::class\n    |\n    */\n    'value_binder'       => [\n        'default' => Maatwebsite\\Excel\\DefaultValueBinder::class,\n    ],\n\n    'cache'        => [\n        /*\n        |--------------------------------------------------------------------------\n        | Default cell caching driver\n        |--------------------------------------------------------------------------\n        |\n        | By default PhpSpreadsheet keeps all cell values in memory, however when\n        | dealing with large files, this might result into memory issues. If you\n        | want to mitigate that, you can configure a cell caching driver here.\n        | When using the illuminate driver, it will store each value in the\n        | cache store. This can slow down the process, because it needs to\n        | store each value. You can use the \"batch\" store if you want to\n        | only persist to the store when the memory limit is reached.\n        |\n        | Drivers: memory|illuminate|batch\n        |\n        */\n        'driver'      => 'memory',\n\n        /*\n        |--------------------------------------------------------------------------\n        | Batch memory caching\n        |--------------------------------------------------------------------------\n        |\n        | When dealing with the \"batch\" caching driver, it will only\n        | persist to the store when the memory limit is reached.\n        | Here you can tweak the memory limit to your liking.\n        |\n        */\n        'batch'       => [\n            'memory_limit' => 60000,\n        ],\n\n        /*\n        |--------------------------------------------------------------------------\n        | Illuminate cache\n        |--------------------------------------------------------------------------\n        |\n        | When using the \"illuminate\" caching driver, it will automatically use\n        | your default cache store. However if you prefer to have the cell\n        | cache on a separate store, you can configure the store name here.\n        | You can use any store defined in your cache config. When leaving\n        | at \"null\" it will use the default store.\n        |\n        */\n        'illuminate'  => [\n            'store' => null,\n        ],\n\n        /*\n        |--------------------------------------------------------------------------\n        | Cache Time-to-live (TTL)\n        |--------------------------------------------------------------------------\n        |\n        | The TTL of items written to cache. If you want to keep the items cached\n        | indefinitely, set this to null.  Otherwise, set a number of seconds,\n        | a \\DateInterval, or a callable.\n        |\n        | Allowable types: callable|\\DateInterval|int|null\n        |\n         */\n        'default_ttl' => 10800,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Transaction Handler\n    |--------------------------------------------------------------------------\n    |\n    | By default the import is wrapped in a transaction. This is useful\n    | for when an import may fail and you want to retry it. With the\n    | transactions, the previous import gets rolled-back.\n    |\n    | You can disable the transaction handler by setting this to null.\n    | Or you can choose a custom made transaction handler here.\n    |\n    | Supported handlers: null|db\n    |\n    */\n    'transactions' => [\n        'handler' => 'db',\n        'db'      => [\n            'connection' => null,\n        ],\n    ],\n\n    'temporary_files' => [\n\n        /*\n        |--------------------------------------------------------------------------\n        | Local Temporary Path\n        |--------------------------------------------------------------------------\n        |\n        | When exporting and importing files, we use a temporary file, before\n        | storing reading or downloading. Here you can customize that path.\n        | permissions is an array with the permission flags for the directory (dir)\n        | and the create file (file).\n        |\n        */\n        'local_path'          => storage_path('framework/cache/laravel-excel'),\n\n        /*\n        |--------------------------------------------------------------------------\n        | Local Temporary Path Permissions\n        |--------------------------------------------------------------------------\n        |\n        | Permissions is an array with the permission flags for the directory (dir)\n        | and the create file (file).\n        | If omitted the default permissions of the filesystem will be used.\n        |\n        */\n        'local_permissions'   => [\n            // 'dir'  => 0755,\n            // 'file' => 0644,\n        ],\n\n        /*\n        |--------------------------------------------------------------------------\n        | Remote Temporary Disk\n        |--------------------------------------------------------------------------\n        |\n        | When dealing with a multi server setup with queues in which you\n        | cannot rely on having a shared local temporary path, you might\n        | want to store the temporary file on a shared disk. During the\n        | queue executing, we'll retrieve the temporary file from that\n        | location instead. When left to null, it will always use\n        | the local path. This setting only has effect when using\n        | in conjunction with queued imports and exports.\n        |\n        */\n        'remote_disk'         => null,\n        'remote_prefix'       => null,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Force Resync\n        |--------------------------------------------------------------------------\n        |\n        | When dealing with a multi server setup as above, it's possible\n        | for the clean up that occurs after entire queue has been run to only\n        | cleanup the server that the last AfterImportJob runs on. The rest of the server\n        | would still have the local temporary file stored on it. In this case your\n        | local storage limits can be exceeded and future imports won't be processed.\n        | To mitigate this you can set this config value to be true, so that after every\n        | queued chunk is processed the local temporary file is deleted on the server that\n        | processed it.\n        |\n        */\n        'force_resync_remote' => null,\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "filesystems.php",
                        "relativePath": "config\\filesystems.php",
                        "extension": "php",
                        "size": 2749,
                        "sizeFormatted": "2.68 KB",
                        "contentLength": 2749,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Filesystem Disk\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the default filesystem disk that should be used\n    | by the framework. The \"local\" disk, as well as a variety of cloud\n    | based disks are available to your application for file storage.\n    |\n    */\n\n    'default' => env('FILESYSTEM_DISK', 'public'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Filesystem Disks\n    |--------------------------------------------------------------------------\n    |\n    | Below you may configure as many filesystem disks as necessary, and you\n    | may even configure multiple disks for the same driver. Examples for\n    | most supported storage drivers are configured here for reference.\n    |\n    | Supported drivers: \"local\", \"ftp\", \"sftp\", \"s3\"\n    |\n    */\n\n    'disks' => [\n\n        'local' => [\n            'driver' => 'local',\n            'root'   => storage_path('app'),\n            'serve'  => true,\n            'throw'  => false,\n        ],\n\n        'private' => [\n            'driver' => 'local',\n            'root'   => storage_path('app/private'),\n            'serve'  => true,\n            'throw'  => false,\n        ],\n\n        'public' => [\n            'driver'     => 'local',\n            'root'       => storage_path('app/public'),\n            'url'        => env('APP_URL').'/storage',\n            'visibility' => 'public',\n            'throw'      => false,\n        ],\n\n        's3' => [\n            'driver'                  => 's3',\n            'key'                     => env('AWS_ACCESS_KEY_ID'),\n            'secret'                  => env('AWS_SECRET_ACCESS_KEY'),\n            'region'                  => env('AWS_DEFAULT_REGION'),\n            'bucket'                  => env('AWS_BUCKET'),\n            'url'                     => env('AWS_URL'),\n            'endpoint'                => env('AWS_ENDPOINT'),\n            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),\n            'throw'                   => false,\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Symbolic Links\n    |--------------------------------------------------------------------------\n    |\n    | Here you may configure the symbolic links that will be created when the\n    | `storage:link` Artisan command is executed. The array keys should be\n    | the locations of the links and the values should be their targets.\n    |\n    */\n\n    'links' => [\n        public_path('storage') => storage_path('app/public'),\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "hashing.php",
                        "relativePath": "config\\hashing.php",
                        "extension": "php",
                        "size": 1563,
                        "sizeFormatted": "1.53 KB",
                        "contentLength": 1563,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Hash Driver\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default hash driver that will be used to hash\n    | passwords for your application. By default, the bcrypt algorithm is\n    | used; however, you remain free to modify this option if you wish.\n    |\n    | Supported: \"bcrypt\", \"argon\"\n    |\n    */\n\n    'driver' => 'bcrypt',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Bcrypt Options\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the configuration options that should be used when\n    | passwords are hashed using the Bcrypt algorithm. This will allow you\n    | to control the amount of time it takes to hash the given password.\n    |\n    */\n\n    'bcrypt' => [\n        'rounds' => env('BCRYPT_ROUNDS', 10),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Argon Options\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the configuration options that should be used when\n    | passwords are hashed using the Argon algorithm. These will allow you\n    | to control the amount of time it takes to hash the given password.\n    |\n    */\n\n    'argon' => [\n        'memory'  => 1024,\n        'threads' => 2,\n        'time'    => 2,\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "image.php",
                        "relativePath": "config\\image.php",
                        "extension": "php",
                        "size": 509,
                        "sizeFormatted": "509 B",
                        "contentLength": 509,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Image Driver\n    |--------------------------------------------------------------------------\n    |\n    | Intervention Image supports \"GD Library\" and \"Imagick\" to process images\n    | internally. You may choose one of them according to your PHP\n    | configuration. By default PHP's \"GD Library\" implementation is used.\n    |\n    | Supported: \"gd\", \"imagick\"\n    |\n    */\n\n    'driver' => 'gd',\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "imagecache.php",
                        "relativePath": "config\\imagecache.php",
                        "extension": "php",
                        "size": 1950,
                        "sizeFormatted": "1.9 KB",
                        "contentLength": 1950,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Name of route\n    |--------------------------------------------------------------------------\n    |\n    | Enter the routes name to enable dynamic imagecache manipulation.\n    | This handle will define the first part of the URI:\n    |\n    | {route}/{template}/{filename}\n    |\n    | Examples: \"images\", \"img/cache\"\n    |\n     */\n\n    'route' => 'cache',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Storage paths\n    |--------------------------------------------------------------------------\n    |\n    | The following paths will be searched for the image filename, submited\n    | by URI.\n    |\n    | Define as many directories as you like.\n    |\n     */\n\n    'paths' => [\n        storage_path('app/public'),\n        public_path('storage'),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Manipulation templates\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify your own manipulation filter templates.\n    | The keys of this array will define which templates\n    | are available in the URI:\n    |\n    | {route}/{template}/{filename}\n    |\n    | The values of this array will define which filter class\n    | will be applied, by its fully qualified name.\n    |\n     */\n\n    'templates' => [\n        'small'  => 'Webkul\\Shop\\CacheFilters\\Small',\n        'medium' => 'Webkul\\Shop\\CacheFilters\\Medium',\n        'large'  => 'Webkul\\Shop\\CacheFilters\\Large',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Image Cache Lifetime\n    |--------------------------------------------------------------------------\n    |\n    | Lifetime in minutes of the images handled by the imagecache route.\n    |\n     */\n\n    'lifetime' => 525600,\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "logging.php",
                        "relativePath": "config\\logging.php",
                        "extension": "php",
                        "size": 4638,
                        "sizeFormatted": "4.53 KB",
                        "contentLength": 4638,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Monolog\\Handler\\NullHandler;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Handler\\SyslogUdpHandler;\nuse Monolog\\Processor\\PsrLogMessageProcessor;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Log Channel\n    |--------------------------------------------------------------------------\n    |\n    | This option defines the default log channel that is utilized to write\n    | messages to your logs. The value provided here should match one of\n    | the channels present in the list of \"channels\" configured below.\n    |\n    */\n\n    'default' => env('LOG_CHANNEL', 'stack'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Deprecations Log Channel\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the log channel that should be used to log warnings\n    | regarding deprecated PHP and library features. This allows you to get\n    | your application ready for upcoming major versions of dependencies.\n    |\n    */\n\n    'deprecations' => [\n        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),\n        'trace'   => env('LOG_DEPRECATIONS_TRACE', false),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Log Channels\n    |--------------------------------------------------------------------------\n    |\n    | Here you may configure the log channels for your application. Laravel\n    | utilizes the Monolog PHP logging library, which includes a variety\n    | of powerful log handlers and formatters that you're free to use.\n    |\n    | Available drivers: \"single\", \"daily\", \"slack\", \"syslog\",\n    |                    \"errorlog\", \"monolog\", \"custom\", \"stack\"\n    |\n    */\n\n    'channels' => [\n\n        'stack' => [\n            'driver'            => 'stack',\n            'channels'          => explode(',', env('LOG_STACK', 'single')),\n            'ignore_exceptions' => false,\n        ],\n\n        'single' => [\n            'driver'               => 'single',\n            'path'                 => storage_path('logs/laravel.log'),\n            'level'                => env('LOG_LEVEL', 'debug'),\n            'replace_placeholders' => true,\n        ],\n\n        'daily' => [\n            'driver'               => 'daily',\n            'path'                 => storage_path('logs/laravel.log'),\n            'level'                => env('LOG_LEVEL', 'debug'),\n            'days'                 => env('LOG_DAILY_DAYS', 14),\n            'replace_placeholders' => true,\n        ],\n\n        'slack' => [\n            'driver'               => 'slack',\n            'url'                  => env('LOG_SLACK_WEBHOOK_URL'),\n            'username'             => env('LOG_SLACK_USERNAME', 'Laravel Log'),\n            'emoji'                => env('LOG_SLACK_EMOJI', ':boom:'),\n            'level'                => env('LOG_LEVEL', 'critical'),\n            'replace_placeholders' => true,\n        ],\n\n        'papertrail' => [\n            'driver'       => 'monolog',\n            'level'        => env('LOG_LEVEL', 'debug'),\n            'handler'      => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),\n            'handler_with' => [\n                'host'             => env('PAPERTRAIL_URL'),\n                'port'             => env('PAPERTRAIL_PORT'),\n                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),\n            ],\n            'processors' => [PsrLogMessageProcessor::class],\n        ],\n\n        'stderr' => [\n            'driver'    => 'monolog',\n            'level'     => env('LOG_LEVEL', 'debug'),\n            'handler'   => StreamHandler::class,\n            'formatter' => env('LOG_STDERR_FORMATTER'),\n            'with'      => [\n                'stream' => 'php://stderr',\n            ],\n            'processors' => [PsrLogMessageProcessor::class],\n        ],\n\n        'syslog' => [\n            'driver'               => 'syslog',\n            'level'                => env('LOG_LEVEL', 'debug'),\n            'facility'             => env('LOG_SYSLOG_FACILITY', LOG_USER),\n            'replace_placeholders' => true,\n        ],\n\n        'errorlog' => [\n            'driver'               => 'errorlog',\n            'level'                => env('LOG_LEVEL', 'debug'),\n            'replace_placeholders' => true,\n        ],\n\n        'null' => [\n            'driver'  => 'monolog',\n            'handler' => NullHandler::class,\n        ],\n\n        'emergency' => [\n            'path' => storage_path('logs/laravel.log'),\n        ],\n\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "mail.php",
                        "relativePath": "config\\mail.php",
                        "extension": "php",
                        "size": 4540,
                        "sizeFormatted": "4.43 KB",
                        "contentLength": 4540,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Mailer\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default mailer that is used to send all email\n    | messages unless another mailer is explicitly specified when sending\n    | the message. All additional mailers can be configured within the\n    | \"mailers\" array. Examples of each type of mailer are provided.\n    |\n    */\n\n    'default' => env('MAIL_MAILER', 'smtp'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Mailer Configurations\n    |--------------------------------------------------------------------------\n    |\n    | Here you may configure all of the mailers used by your application plus\n    | their respective settings. Several examples have been configured for\n    | you and you are free to add your own as your application requires.\n    |\n    | Laravel supports a variety of mail \"transport\" drivers that can be used\n    | when delivering an email. You may specify which one you're using for\n    | your mailers below. You may also add additional mailers if needed.\n    |\n    | Supported: \"smtp\", \"sendmail\", \"mailgun\", \"ses\", \"ses-v2\",\n    |            \"postmark\", \"resend\", \"log\", \"array\",\n    |            \"failover\", \"roundrobin\"\n    |\n    */\n\n    'mailers' => [\n\n        'smtp' => [\n            'transport'    => 'smtp',\n            'url'          => env('MAIL_URL'),\n            'host'         => env('MAIL_HOST', '127.0.0.1'),\n            'port'         => env('MAIL_PORT', 2525),\n            'encryption'   => env('MAIL_ENCRYPTION', 'tls'),\n            'username'     => env('MAIL_USERNAME'),\n            'password'     => env('MAIL_PASSWORD'),\n            'timeout'      => null,\n            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),\n        ],\n\n        'ses' => [\n            'transport' => 'ses',\n        ],\n\n        'postmark' => [\n            'transport' => 'postmark',\n\n            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n\n            // 'client' => [\n            //     'timeout' => 5,\n            // ],\n        ],\n\n        'resend' => [\n            'transport' => 'resend',\n        ],\n\n        'sendmail' => [\n            'transport' => 'sendmail',\n            'path'      => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),\n        ],\n\n        'log' => [\n            'transport' => 'log',\n            'channel'   => env('MAIL_LOG_CHANNEL'),\n        ],\n\n        'array' => [\n            'transport' => 'array',\n        ],\n\n        'failover' => [\n            'transport' => 'failover',\n\n            'mailers' => [\n                'smtp',\n                'log',\n            ],\n        ],\n\n        'roundrobin' => [\n            'transport' => 'roundrobin',\n\n            'mailers' => [\n                'ses',\n                'postmark',\n            ],\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Global \"From\" Address\n    |--------------------------------------------------------------------------\n    |\n    | You may wish for all emails sent by your application to be sent from\n    | the same address. Here you may specify a name and address that is\n    | used globally for all emails that are sent by your application.\n    |\n    */\n\n    'from' => [\n        'address' => env('MAIL_FROM_ADDRESS'),\n        'name'    => env('MAIL_FROM_NAME'),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Global \"Admin\" Address\n    |--------------------------------------------------------------------------\n    |\n    | General admin related admins, such as order notifications.\n    |\n    */\n\n    'admin' => [\n        'address' => env('ADMIN_MAIL_ADDRESS'),\n        'name'    => env('ADMIN_MAIL_NAME', 'Admin'),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Global \"Contact\" Address\n    |--------------------------------------------------------------------------\n    |\n    | General contact address used in the footer of the email templates.\n\n    | Here, you may specify a name and address that is used globally for\n    | all e-mails that are sent by your application.\n    |\n    */\n\n    'contact' => [\n        'address' => env('CONTACT_MAIL_ADDRESS'),\n        'name'    => env('CONTACT_MAIL_NAME', 'Contact'),\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "octane.php",
                        "relativePath": "config\\octane.php",
                        "extension": "php",
                        "size": 7051,
                        "sizeFormatted": "6.89 KB",
                        "contentLength": 7051,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Laravel\\Octane\\Contracts\\OperationTerminated;\nuse Laravel\\Octane\\Events\\RequestHandled;\nuse Laravel\\Octane\\Events\\RequestReceived;\nuse Laravel\\Octane\\Events\\RequestTerminated;\nuse Laravel\\Octane\\Events\\TaskReceived;\nuse Laravel\\Octane\\Events\\TaskTerminated;\nuse Laravel\\Octane\\Events\\TickReceived;\nuse Laravel\\Octane\\Events\\TickTerminated;\nuse Laravel\\Octane\\Events\\WorkerErrorOccurred;\nuse Laravel\\Octane\\Events\\WorkerStarting;\nuse Laravel\\Octane\\Events\\WorkerStopping;\nuse Laravel\\Octane\\Listeners\\CloseMonologHandlers;\nuse Laravel\\Octane\\Listeners\\CollectGarbage;\nuse Laravel\\Octane\\Listeners\\DisconnectFromDatabases;\nuse Laravel\\Octane\\Listeners\\EnsureUploadedFilesAreValid;\nuse Laravel\\Octane\\Listeners\\EnsureUploadedFilesCanBeMoved;\nuse Laravel\\Octane\\Listeners\\FlushOnce;\nuse Laravel\\Octane\\Listeners\\FlushTemporaryContainerInstances;\nuse Laravel\\Octane\\Listeners\\FlushUploadedFiles;\nuse Laravel\\Octane\\Listeners\\ReportException;\nuse Laravel\\Octane\\Listeners\\StopWorkerIfNecessary;\nuse Laravel\\Octane\\Octane;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Octane Server\n    |--------------------------------------------------------------------------\n    |\n    | This value determines the default \"server\" that will be used by Octane\n    | when starting, restarting, or stopping your server via the CLI. You\n    | are free to change this to the supported server of your choosing.\n    |\n    | Supported: \"roadrunner\", \"swoole\", \"frankenphp\"\n    |\n    */\n\n    'server' => env('OCTANE_SERVER', 'roadrunner'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Force HTTPS\n    |--------------------------------------------------------------------------\n    |\n    | When this configuration value is set to \"true\", Octane will inform the\n    | framework that all absolute links must be generated using the HTTPS\n    | protocol. Otherwise your links may be generated using plain HTTP.\n    |\n    */\n\n    'https' => env('OCTANE_HTTPS', false),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Octane Listeners\n    |--------------------------------------------------------------------------\n    |\n    | All of the event listeners for Octane's events are defined below. These\n    | listeners are responsible for resetting your application's state for\n    | the next request. You may even add your own listeners to the list.\n    |\n    */\n\n    'listeners' => [\n        WorkerStarting::class => [\n            EnsureUploadedFilesAreValid::class,\n            EnsureUploadedFilesCanBeMoved::class,\n        ],\n\n        RequestReceived::class => [\n            ...Octane::prepareApplicationForNextOperation(),\n            ...Octane::prepareApplicationForNextRequest(),\n            //\n        ],\n\n        RequestHandled::class => [\n            //\n        ],\n\n        RequestTerminated::class => [\n            // FlushUploadedFiles::class,\n        ],\n\n        TaskReceived::class => [\n            ...Octane::prepareApplicationForNextOperation(),\n            //\n        ],\n\n        TaskTerminated::class => [\n            //\n        ],\n\n        TickReceived::class => [\n            ...Octane::prepareApplicationForNextOperation(),\n            //\n        ],\n\n        TickTerminated::class => [\n            //\n        ],\n\n        OperationTerminated::class => [\n            FlushOnce::class,\n            FlushTemporaryContainerInstances::class,\n            // DisconnectFromDatabases::class,\n            // CollectGarbage::class,\n        ],\n\n        WorkerErrorOccurred::class => [\n            ReportException::class,\n            StopWorkerIfNecessary::class,\n        ],\n\n        WorkerStopping::class => [\n            CloseMonologHandlers::class,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Warm / Flush Bindings\n    |--------------------------------------------------------------------------\n    |\n    | The bindings listed below will either be pre-warmed when a worker boots\n    | or they will be flushed before every new request. Flushing a binding\n    | will force the container to resolve that binding again when asked.\n    |\n    */\n\n    'warm' => [\n        ...Octane::defaultServicesToWarm(),\n    ],\n\n    'flush' => [\n        //\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Octane Swoole Tables\n    |--------------------------------------------------------------------------\n    |\n    | While using Swoole, you may define additional tables as required by the\n    | application. These tables can be used to store data that needs to be\n    | quickly accessed by other workers on the particular Swoole server.\n    |\n    */\n\n    'tables' => [\n        'example:1000' => [\n            'name' => 'string:1000',\n            'votes' => 'int',\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Octane Swoole Cache Table\n    |--------------------------------------------------------------------------\n    |\n    | While using Swoole, you may leverage the Octane cache, which is powered\n    | by a Swoole table. You may set the maximum number of rows as well as\n    | the number of bytes per row using the configuration options below.\n    |\n    */\n\n    'cache' => [\n        'rows' => 1000,\n        'bytes' => 10000,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | File Watching\n    |--------------------------------------------------------------------------\n    |\n    | The following list of files and directories will be watched when using\n    | the --watch option offered by Octane. If any of the directories and\n    | files are changed, Octane will automatically reload your workers.\n    |\n    */\n\n    'watch' => [\n        'app',\n        'bootstrap',\n        'config/**/*.php',\n        'database/**/*.php',\n        'public/**/*.php',\n        'resources/**/*.php',\n        'routes',\n        'composer.lock',\n        '.env',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Garbage Collection Threshold\n    |--------------------------------------------------------------------------\n    |\n    | When executing long-lived PHP scripts such as Octane, memory can build\n    | up before being cleared by PHP. You can force Octane to run garbage\n    | collection if your application consumes this amount of megabytes.\n    |\n    */\n\n    'garbage' => 50,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Maximum Execution Time\n    |--------------------------------------------------------------------------\n    |\n    | The following setting configures the maximum execution time for requests\n    | being handled by Octane. You may set this value to 0 to indicate that\n    | there isn't a specific time limit on Octane request execution time.\n    |\n    */\n\n    'max_execution_time' => 30,\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "openai.php",
                        "relativePath": "config\\openai.php",
                        "extension": "php",
                        "size": 979,
                        "sizeFormatted": "979 B",
                        "contentLength": 979,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | OpenAI API Key and Organization\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify your OpenAI API Key and organization. This will be\n    | used to authenticate with the OpenAI API - you can find your API key\n    | and organization on your OpenAI dashboard, at https://openai.com.\n    */\n\n    'api_key'      => env('OPENAI_API_KEY'),\n    'organization' => env('OPENAI_ORGANIZATION'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Request Timeout\n    |--------------------------------------------------------------------------\n    |\n    | The timeout may be used to specify the maximum number of seconds to wait\n    | for a response. By default, the client will time out after 30 seconds.\n    */\n\n    'request_timeout' => env('OPENAI_REQUEST_TIMEOUT', 30),\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "products.php",
                        "relativePath": "config\\products.php",
                        "extension": "php",
                        "size": 354,
                        "sizeFormatted": "354 B",
                        "contentLength": 354,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /**\n     * Skip attribute during product copy.\n     *\n     * Supported Relations: ['categories', 'inventories', 'customer_group_prices', 'images', 'videos', 'product_relations']\n     *\n     * Support Attributes: All Attributes (Example: 'sku', 'product_number', etc)\n     */\n    'copy' => [\n        'skip_attributes' => [],\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "queue.php",
                        "relativePath": "config\\queue.php",
                        "extension": "php",
                        "size": 3943,
                        "sizeFormatted": "3.85 KB",
                        "contentLength": 3943,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Queue Connection Name\n    |--------------------------------------------------------------------------\n    |\n    | Laravel's queue supports a variety of backends via a single, unified\n    | API, giving you convenient access to each backend using identical\n    | syntax for each. The default queue connection is defined below.\n    |\n    */\n\n    'default' => env('QUEUE_CONNECTION', 'database'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Queue Connections\n    |--------------------------------------------------------------------------\n    |\n    | Here you may configure the connection options for every queue backend\n    | used by your application. An example configuration is provided for\n    | each backend supported by Laravel. You're also free to add more.\n    |\n    | Drivers: \"sync\", \"database\", \"beanstalkd\", \"sqs\", \"redis\", \"null\"\n    |\n    */\n\n    'connections' => [\n\n        'sync' => [\n            'driver' => 'sync',\n        ],\n\n        'database' => [\n            'driver'       => 'database',\n            'connection'   => env('DB_QUEUE_CONNECTION'),\n            'table'        => env('DB_QUEUE_TABLE', 'jobs'),\n            'queue'        => env('DB_QUEUE', 'default'),\n            'retry_after'  => (int) env('DB_QUEUE_RETRY_AFTER', 90),\n            'after_commit' => false,\n        ],\n\n        'beanstalkd' => [\n            'driver'       => 'beanstalkd',\n            'host'         => env('BEANSTALKD_QUEUE_HOST', 'localhost'),\n            'queue'        => env('BEANSTALKD_QUEUE', 'default'),\n            'retry_after'  => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),\n            'block_for'    => 0,\n            'after_commit' => false,\n        ],\n\n        'sqs' => [\n            'driver'       => 'sqs',\n            'key'          => env('AWS_ACCESS_KEY_ID'),\n            'secret'       => env('AWS_SECRET_ACCESS_KEY'),\n            'prefix'       => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),\n            'queue'        => env('SQS_QUEUE', 'default'),\n            'suffix'       => env('SQS_SUFFIX'),\n            'region'       => env('AWS_DEFAULT_REGION', 'us-east-1'),\n            'after_commit' => false,\n        ],\n\n        'redis' => [\n            'driver'       => 'redis',\n            'connection'   => env('REDIS_QUEUE_CONNECTION', 'default'),\n            'queue'        => env('REDIS_QUEUE', 'default'),\n            'retry_after'  => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),\n            'block_for'    => null,\n            'after_commit' => false,\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Job Batching\n    |--------------------------------------------------------------------------\n    |\n    | The following options configure the database and table that store job\n    | batching information. These options can be updated to any database\n    | connection and table which has been defined by your application.\n    |\n    */\n\n    'batching' => [\n        'database' => env('DB_CONNECTION', 'mysql'),\n        'table'    => 'job_batches',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Failed Queue Jobs\n    |--------------------------------------------------------------------------\n    |\n    | These options configure the behavior of failed queue job logging so you\n    | can control how and where failed jobs are stored. Laravel ships with\n    | support for storing failed jobs in a simple file or in a database.\n    |\n    | Supported drivers: \"database-uuids\", \"dynamodb\", \"file\", \"null\"\n    |\n    */\n\n    'failed' => [\n        'driver'   => env('QUEUE_FAILED_DRIVER', 'database-uuids'),\n        'database' => env('DB_CONNECTION', 'mysql'),\n        'table'    => 'failed_jobs',\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "repository.php",
                        "relativePath": "config\\repository.php",
                        "extension": "php",
                        "size": 9207,
                        "sizeFormatted": "8.99 KB",
                        "contentLength": 9207,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\n/*\n|--------------------------------------------------------------------------\n| Prettus Repository Config\n|--------------------------------------------------------------------------\n|\n|\n*/\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Repository Pagination Limit Default\n    |--------------------------------------------------------------------------\n    |\n    */\n    'pagination' => [\n        'limit' => 15,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Fractal Presenter Config\n    |--------------------------------------------------------------------------\n    |\n\n    Available serializers:\n    ArraySerializer\n    DataArraySerializer\n    JsonApiSerializer\n\n    */\n    'fractal'    => [\n        'params'     => [\n            'include' => 'include',\n        ],\n        'serializer' => League\\Fractal\\Serializer\\DataArraySerializer::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Cache Config\n    |--------------------------------------------------------------------------\n    |\n    */\n    'cache'      => [\n        /*\n         |--------------------------------------------------------------------------\n         | Cache Status\n         |--------------------------------------------------------------------------\n         |\n         | Enable or disable cache\n         |\n         */\n        'enabled'    => false,\n\n        /*\n         |--------------------------------------------------------------------------\n         | Cache Minutes\n         |--------------------------------------------------------------------------\n         |\n         | Time of expiration cache\n         |\n         */\n        'minutes'    => 10080,\n\n        /*\n         |--------------------------------------------------------------------------\n         | Cache Repository\n         |--------------------------------------------------------------------------\n         |\n         | Instance of Illuminate\\Contracts\\Cache\\Repository\n         |\n         */\n        'repository' => 'cache',\n\n        /*\n          |--------------------------------------------------------------------------\n          | Cache Clean Listener\n          |--------------------------------------------------------------------------\n          |\n          |\n          |\n          */\n        'clean'      => [\n\n            /*\n              |--------------------------------------------------------------------------\n              | Enable clear cache on repository changes\n              |--------------------------------------------------------------------------\n              |\n              */\n            'enabled' => true,\n\n            /*\n              |--------------------------------------------------------------------------\n              | Actions in Repository\n              |--------------------------------------------------------------------------\n              |\n              | create : Clear Cache on create Entry in repository\n              | update : Clear Cache on update Entry in repository\n              | delete : Clear Cache on delete Entry in repository\n              |\n              */\n            'on'      => [\n                'created' => true,\n                'updated' => true,\n                'deleted' => true,\n            ],\n        ],\n\n        'params'     => [\n            /*\n            |--------------------------------------------------------------------------\n            | Skip Cache Params\n            |--------------------------------------------------------------------------\n            |\n            |\n            | Ex: http://prettus.local/?search=lorem&skipCache=true\n            |\n            */\n            'skipCache' => 'skipCache',\n        ],\n\n        /*\n       |--------------------------------------------------------------------------\n       | Methods Allowed\n       |--------------------------------------------------------------------------\n       |\n       | methods cacheable : all, paginate, find, findByField, findWhere, getByCriteria\n       |\n       | Ex:\n       |\n       | 'only'  =>['all','paginate'],\n       |\n       | or\n       |\n       | 'except'  =>['find'],\n       */\n        'allowed'    => [\n            'only'   => null,\n            'except' => null,\n        ],\n\n        'repositories' => [\n            'Webkul\\Core\\Repositories\\CoreConfigRepository' => [\n                'enabled' => true,\n\n                // 'minutes'    => 10080,\n\n                // 'clean'      => [\n                //     'enabled' => true,\n\n                //     'on'      => [\n                //         'created' => true,\n                //         'updated' => true,\n                //         'deleted' => true,\n                //     ]\n                // ],\n\n                // 'allowed' => [\n                //     'only' => null,\n\n                //     'except' => null\n                // ],\n            ],\n\n            'Webkul\\Core\\Repositories\\ChannelRepository' => [\n                'enabled' => true,\n            ],\n\n            'Webkul\\Core\\Repositories\\CountryRepository' => [\n                'enabled' => true,\n            ],\n\n            'Webkul\\Core\\Repositories\\CountryStateRepository' => [\n                'enabled' => true,\n            ],\n\n            'Webkul\\Core\\Repositories\\CurrencyRepository' => [\n                'enabled' => true,\n            ],\n\n            'Webkul\\Core\\Repositories\\LocaleRepository' => [\n                'enabled' => true,\n            ],\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Criteria Config\n    |--------------------------------------------------------------------------\n    |\n    | Settings of request parameters names that will be used by Criteria\n    |\n    */\n    'criteria'   => [\n        /*\n        |--------------------------------------------------------------------------\n        | Accepted Conditions\n        |--------------------------------------------------------------------------\n        |\n        | Conditions accepted in consultations where the Criteria\n        |\n        | Ex:\n        |\n        | 'acceptedConditions'=>['=','like']\n        |\n        | $query->where('foo','=','bar')\n        | $query->where('foo','like','bar')\n        |\n        */\n        'acceptedConditions' => [\n            '=',\n            'like',\n            'in',\n        ],\n        /*\n        |--------------------------------------------------------------------------\n        | Request Params\n        |--------------------------------------------------------------------------\n        |\n        | Request parameters that will be used to filter the query in the repository\n        |\n        | Params :\n        |\n        | - search : Searched value\n        |   Ex: http://prettus.local/?search=lorem\n        |\n        | - searchFields : Fields in which research should be carried out\n        |   Ex:\n        |    http://prettus.local/?search=lorem&searchFields=name;email\n        |    http://prettus.local/?search=lorem&searchFields=name:like;email\n        |    http://prettus.local/?search=lorem&searchFields=name:like\n        |\n        | - filter : Fields that must be returned to the response object\n        |   Ex:\n        |   http://prettus.local/?search=lorem&filter=id,name\n        |\n        | - orderBy : Order By\n        |   Ex:\n        |   http://prettus.local/?search=lorem&orderBy=id\n        |\n        | - sortedBy : Sort\n        |   Ex:\n        |   http://prettus.local/?search=lorem&orderBy=id&sortedBy=asc\n        |   http://prettus.local/?search=lorem&orderBy=id&sortedBy=desc\n        |\n        | - searchJoin: Specifies the search method (AND / OR), by default the\n        |               application searches each parameter with OR\n        |   EX:\n        |   http://prettus.local/?search=lorem&searchJoin=and\n        |   http://prettus.local/?search=lorem&searchJoin=or\n        |\n        */\n        'params'             => [\n            'search'       => 'search',\n            'searchFields' => 'searchFields',\n            'filter'       => 'filter',\n            'orderBy'      => 'orderBy',\n            'sortedBy'     => 'sortedBy',\n            'with'         => 'with',\n            'searchJoin'   => 'searchJoin',\n            'withCount'    => 'withCount',\n        ],\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | Generator Config\n    |--------------------------------------------------------------------------\n    |\n    */\n    'generator'  => [\n        'basePath'          => app()->path(),\n        'rootNamespace'     => 'App\\\\',\n        'stubsOverridePath' => app()->path(),\n        'paths'             => [\n            'models'       => 'Entities',\n            'repositories' => 'Repositories',\n            'interfaces'   => 'Repositories',\n            'transformers' => 'Transformers',\n            'presenters'   => 'Presenters',\n            'validators'   => 'Validators',\n            'controllers'  => 'Http/Controllers',\n            'provider'     => 'RepositoryServiceProvider',\n            'criteria'     => 'Criteria',\n        ],\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "responsecache.php",
                        "relativePath": "config\\responsecache.php",
                        "extension": "php",
                        "size": 3216,
                        "sizeFormatted": "3.14 KB",
                        "contentLength": 3216,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /*\n     * Determine if the response cache middleware should be enabled.\n     */\n    'enabled' => env('RESPONSE_CACHE_ENABLED', false),\n\n    /*\n     *  The given class will determinate if a request should be cached. The\n     *  default class will cache all successful GET-requests.\n     *\n     *  You can provide your own class given that it implements the\n     *  CacheProfile interface.\n     */\n    'cache_profile' => Spatie\\ResponseCache\\CacheProfiles\\CacheAllSuccessfulGetRequests::class,\n\n    /*\n     *  Optionally, you can specify a header that will force a cache bypass.\n     *  This can be useful to monitor the performance of your application.\n     */\n    'cache_bypass_header' => [\n        'name'  => env('CACHE_BYPASS_HEADER_NAME', null),\n        'value' => env('CACHE_BYPASS_HEADER_VALUE', null),\n    ],\n\n    /*\n     * When using the default CacheRequestFilter this setting controls the\n     * default number of seconds responses must be cached.\n     */\n    'cache_lifetime_in_seconds' => env('RESPONSE_CACHE_LIFETIME', 60 * 60 * 24 * 7),\n\n    /*\n     * This setting determines if a http header named with the cache time\n     * should be added to a cached response. This can be handy when\n     * debugging.\n     */\n    'add_cache_time_header' => env('APP_DEBUG', true),\n\n    /*\n     * This setting determines the name of the http header that contains\n     * the time at which the response was cached\n     */\n    'cache_time_header_name' => env('RESPONSE_CACHE_HEADER_NAME', 'laravel-responsecache'),\n\n    /*\n     * This setting determines if a http header named with the cache age\n     * should be added to a cached response. This can be handy when\n     * debugging.\n     * ONLY works when \"add_cache_time_header\" is also active!\n     */\n    'add_cache_age_header' => env('RESPONSE_CACHE_AGE_HEADER', false),\n\n    /*\n     * This setting determines the name of the http header that contains\n     * the age of cache\n     */\n    'cache_age_header_name' => env('RESPONSE_CACHE_AGE_HEADER_NAME', 'laravel-responsecache-age'),\n\n    /*\n     * Here you may define the cache store that should be used to store\n     * requests. This can be the name of any store that is\n     * configured in app/config/cache.php\n     */\n    'cache_store' => env('RESPONSE_CACHE_DRIVER', 'file'),\n\n    /*\n     * Here you may define replacers that dynamically replace content from the response.\n     * Each replacer must implement the Replacer interface.\n     */\n    'replacers' => [\n        \\Spatie\\ResponseCache\\Replacers\\CsrfTokenReplacer::class,\n    ],\n\n    /*\n     * If the cache driver you configured supports tags, you may specify a tag name\n     * here. All responses will be tagged. When clearing the responsecache only\n     * items with that tag will be flushed.\n     *\n     * You may use a string or an array here.\n     */\n    'cache_tag' => '',\n\n    /*\n     * This class is responsible for generating a hash for a request. This hash\n     * is used to look up a cached response.\n     */\n    'hasher' => \\Webkul\\FPC\\Hasher\\DefaultHasher::class,\n\n    /*\n     * This class is responsible for serializing responses.\n     */\n    'serializer' => \\Spatie\\ResponseCache\\Serializers\\DefaultSerializer::class,\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "sanctum.php",
                        "relativePath": "config\\sanctum.php",
                        "extension": "php",
                        "size": 2420,
                        "sizeFormatted": "2.36 KB",
                        "contentLength": 2420,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Laravel\\Sanctum\\Sanctum;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Stateful Domains\n    |--------------------------------------------------------------------------\n    |\n    | Requests from the following domains / hosts will receive stateful API\n    | authentication cookies. Typically, these should include your local\n    | and production domains which access your API via a frontend SPA.\n    |\n    */\n\n    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(\n        '%s%s',\n        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',\n        Sanctum::currentApplicationUrlWithPort()\n    ))),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Sanctum Guards\n    |--------------------------------------------------------------------------\n    |\n    | This array contains the authentication guards that will be checked when\n    | Sanctum is trying to authenticate a request. If none of these guards\n    | are able to authenticate the request, Sanctum will use the bearer\n    | token that's present on an incoming request for authentication.\n    |\n    */\n\n    'guard' => [],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Expiration Minutes\n    |--------------------------------------------------------------------------\n    |\n    | This value controls the number of minutes until an issued token will be\n    | considered expired. If this value is null, personal access tokens do\n    | not expire. This won't tweak the lifetime of first-party sessions.\n    |\n    */\n\n    'expiration' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Sanctum Middleware\n    |--------------------------------------------------------------------------\n    |\n    | When authenticating your first-party SPA with Sanctum you may need to\n    | customize some of the middleware Sanctum uses while processing the\n    | request. You may change the middleware listed below as required.\n    |\n    */\n\n    'middleware' => [\n        'authenticate_session' => Laravel\\Sanctum\\Http\\Middleware\\AuthenticateSession::class,\n        'encrypt_cookies'      => Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n        'validate_csrf_token'  => Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "services.php",
                        "relativePath": "config\\services.php",
                        "extension": "php",
                        "size": 4170,
                        "sizeFormatted": "4.07 KB",
                        "contentLength": 4170,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Third Party Services\n    |--------------------------------------------------------------------------\n    |\n    | This file is for storing the credentials for third party services such\n    | as Mailgun, Postmark, AWS and more. This file provides the de facto\n    | location for this type of information, allowing packages to have\n    | a conventional file to locate the various service credentials.\n    |\n    */\n\n    'postmark' => [\n        'token' => env('POSTMARK_TOKEN'),\n    ],\n\n    'ses' => [\n        'key'    => env('AWS_ACCESS_KEY_ID'),\n        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    ],\n\n    'resend' => [\n        'key' => env('RESEND_KEY'),\n    ],\n\n    'slack' => [\n        'notifications' => [\n            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),\n            'channel'              => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),\n        ],\n    ],\n\n    'exchange_api' => [\n        'default' => 'exchange_rates',\n\n        'fixer' => [\n            'key'   => env('FIXER_API_KEY'),\n            'class' => 'Webkul\\Core\\Helpers\\Exchange\\FixerExchange',\n        ],\n\n        'exchange_rates' => [\n            'key'   => env('EXCHANGE_RATES_API_KEY'),\n            'class' => 'Webkul\\Core\\Helpers\\Exchange\\ExchangeRates',\n            'url'   => env('EXCHANGE_RATES_API_ENDPOINT'),\n        ],\n    ],\n\n    'facebook' => [\n        'client_id'     => env('FACEBOOK_CLIENT_ID'),\n        'client_secret' => env('FACEBOOK_CLIENT_SECRET'),\n        'redirect'      => env('FACEBOOK_CALLBACK_URL'),\n    ],\n\n    'twitter' => [\n        'client_id'     => env('TWITTER_CLIENT_ID'),\n        'client_secret' => env('TWITTER_CLIENT_SECRET'),\n        'redirect'      => env('TWITTER_CALLBACK_URL'),\n    ],\n\n    'google' => [\n        'client_id'     => env('GOOGLE_CLIENT_ID'),\n        'client_secret' => env('GOOGLE_CLIENT_SECRET'),\n        'redirect'      => env('GOOGLE_CALLBACK_URL'),\n    ],\n\n    'linkedin-openid' => [\n        'client_id'     => env('LINKEDIN_CLIENT_ID'),\n        'client_secret' => env('LINKEDIN_CLIENT_SECRET'),\n        'redirect'      => env('LINKEDIN_CALLBACK_URL'),\n    ],\n\n    'github' => [\n        'client_id'     => env('GITHUB_CLIENT_ID'),\n        'client_secret' => env('GITHUB_CLIENT_SECRET'),\n        'redirect'      => env('GITHUB_CALLBACK_URL'),\n    ],\n    'whatsapp' => [\n        'enabled' => env('WHATSAPP_ENABLED', false),\n        'api_url' => env('WHATSAPP_API_URL', 'https://api.whatsapp.com/v1'),\n        'token' => env('WHATSAPP_API_TOKEN'),\n        'phone_number_id' => env('WHATSAPP_PHONE_NUMBER_ID'),\n        'verify_token' => env('WHATSAPP_VERIFY_TOKEN'),\n        'business_account_id' => env('WHATSAPP_BUSINESS_ACCOUNT_ID'),\n        \n        // إعدادات OTP\n        'otp' => [\n            'template_name' => env('WHATSAPP_OTP_TEMPLATE', 'otp_verification'),\n            'validity_minutes' => env('WHATSAPP_OTP_VALIDITY', 5),\n            'max_attempts' => env('WHATSAPP_OTP_MAX_ATTEMPTS', 3),\n            'resend_cooldown' => env('WHATSAPP_OTP_RESEND_COOLDOWN', 60), // seconds\n        ],\n        \n        // رسائل النظام\n        'templates' => [\n            'otp' => [\n                'ar' => 'مرحباً {name}، رمز التحقق الخاص بك هو: {otp}. صالح لمدة {validity} دقائق. لا تشارك هذا الرمز مع أي شخص.',\n                'en' => 'Hello {name}, your verification code is: {otp}. Valid for {validity} minutes. Do not share this code with anyone.',\n            ],\n            'welcome' => [\n                'ar' => 'مرحباً بك في {store_name}! تم تسجيل دخولك بنجاح.',\n                'en' => 'Welcome to {store_name}! You have successfully logged in.',\n            ],\n            'account_created' => [\n                'ar' => 'تم إنشاء حسابك الجديد بنجاح! مرحباً بك في {store_name}.',\n                'en' => 'Your new account has been created successfully! Welcome to {store_name}.',\n            ],\n        ],\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "session.php",
                        "relativePath": "config\\session.php",
                        "extension": "php",
                        "size": 7848,
                        "sizeFormatted": "7.66 KB",
                        "contentLength": 7848,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Str;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Session Driver\n    |--------------------------------------------------------------------------\n    |\n    | This option determines the default session driver that is utilized for\n    | incoming requests. Laravel supports a variety of storage options to\n    | persist session data. Database storage is a great default choice.\n    |\n    | Supported: \"file\", \"cookie\", \"database\", \"apc\",\n    |            \"memcached\", \"redis\", \"dynamodb\", \"array\"\n    |\n    */\n\n    'driver' => env('SESSION_DRIVER', 'file'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Lifetime\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the number of minutes that you wish the session\n    | to be allowed to remain idle before it expires. If you want them\n    | to expire immediately when the browser is closed then you may\n    | indicate that via the expire_on_close configuration option.\n    |\n    */\n\n    'lifetime' => env('SESSION_LIFETIME', 120),\n\n    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Encryption\n    |--------------------------------------------------------------------------\n    |\n    | This option allows you to easily specify that all of your session data\n    | should be encrypted before it's stored. All encryption is performed\n    | automatically by Laravel and you may use the session like normal.\n    |\n    */\n\n    'encrypt' => env('SESSION_ENCRYPT', false),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session File Location\n    |--------------------------------------------------------------------------\n    |\n    | When utilizing the \"file\" session driver, the session files are placed\n    | on disk. The default storage location is defined here; however, you\n    | are free to provide another location where they should be stored.\n    |\n    */\n\n    'files' => storage_path('framework/sessions'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Database Connection\n    |--------------------------------------------------------------------------\n    |\n    | When using the \"database\" or \"redis\" session drivers, you may specify a\n    | connection that should be used to manage these sessions. This should\n    | correspond to a connection in your database configuration options.\n    |\n    */\n\n    'connection' => env('SESSION_CONNECTION'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Database Table\n    |--------------------------------------------------------------------------\n    |\n    | When using the \"database\" session driver, you may specify the table to\n    | be used to store sessions. Of course, a sensible default is defined\n    | for you; however, you're welcome to change this to another table.\n    |\n    */\n\n    'table' => env('SESSION_TABLE', 'sessions'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cache Store\n    |--------------------------------------------------------------------------\n    |\n    | When using one of the framework's cache driven session backends, you may\n    | define the cache store which should be used to store the session data\n    | between requests. This must match one of your defined cache stores.\n    |\n    | Affects: \"apc\", \"dynamodb\", \"memcached\", \"redis\"\n    |\n    */\n\n    'store' => env('SESSION_STORE'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Sweeping Lottery\n    |--------------------------------------------------------------------------\n    |\n    | Some session drivers must manually sweep their storage location to get\n    | rid of old sessions from storage. Here are the chances that it will\n    | happen on a given request. By default, the odds are 2 out of 100.\n    |\n    */\n\n    'lottery' => [2, 100],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cookie Name\n    |--------------------------------------------------------------------------\n    |\n    | Here you may change the name of the session cookie that is created by\n    | the framework. Typically, you should not need to change this value\n    | since doing so does not grant a meaningful security improvement.\n    |\n    */\n\n    'cookie' => env(\n        'SESSION_COOKIE',\n        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'\n    ),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cookie Path\n    |--------------------------------------------------------------------------\n    |\n    | The session cookie path determines the path for which the cookie will\n    | be regarded as available. Typically, this will be the root path of\n    | your application, but you're free to change this when necessary.\n    |\n    */\n\n    'path' => env('SESSION_PATH', '/'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cookie Domain\n    |--------------------------------------------------------------------------\n    |\n    | This value determines the domain and subdomains the session cookie is\n    | available to. By default, the cookie will be available to the root\n    | domain and all subdomains. Typically, this shouldn't be changed.\n    |\n    */\n\n    'domain' => env('SESSION_DOMAIN'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | HTTPS Only Cookies\n    |--------------------------------------------------------------------------\n    |\n    | By setting this option to true, session cookies will only be sent back\n    | to the server if the browser has a HTTPS connection. This will keep\n    | the cookie from being sent to you when it can't be done securely.\n    |\n    */\n\n    'secure' => env('SESSION_SECURE_COOKIE'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | HTTP Access Only\n    |--------------------------------------------------------------------------\n    |\n    | Setting this value to true will prevent JavaScript from accessing the\n    | value of the cookie and the cookie will only be accessible through\n    | the HTTP protocol. It's unlikely you should disable this option.\n    |\n    */\n\n    'http_only' => env('SESSION_HTTP_ONLY', true),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Same-Site Cookies\n    |--------------------------------------------------------------------------\n    |\n    | This option determines how your cookies behave when cross-site requests\n    | take place, and can be used to mitigate CSRF attacks. By default, we\n    | will set this value to \"lax\" to permit secure cross-site requests.\n    |\n    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value\n    |\n    | Supported: \"lax\", \"strict\", \"none\", null\n    |\n    */\n\n    'same_site' => env('SESSION_SAME_SITE', 'lax'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Partitioned Cookies\n    |--------------------------------------------------------------------------\n    |\n    | Setting this value to true will tie the cookie to the top-level site for\n    | a cross-site context. Partitioned cookies are accepted by the browser\n    | when flagged \"secure\" and the Same-Site attribute is set to \"none\".\n    |\n    */\n\n    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "sitemap.php",
                        "relativePath": "config\\sitemap.php",
                        "extension": "php",
                        "size": 1549,
                        "sizeFormatted": "1.51 KB",
                        "contentLength": 1549,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse GuzzleHttp\\RequestOptions;\nuse Spatie\\Sitemap\\Crawler\\Profile;\n\nreturn [\n\n    /*\n     * These options will be passed to GuzzleHttp\\Client when it is created.\n     * For in-depth information on all options see the Guzzle docs:\n     *\n     * http://docs.guzzlephp.org/en/stable/request-options.html\n     */\n    'guzzle_options' => [\n\n        /*\n         * Whether or not cookies are used in a request.\n         */\n        RequestOptions::COOKIES => true,\n\n        /*\n         * The number of seconds to wait while trying to connect to a server.\n         * Use 0 to wait indefinitely.\n         */\n        RequestOptions::CONNECT_TIMEOUT => 10,\n\n        /*\n         * The timeout of the request in seconds. Use 0 to wait indefinitely.\n         */\n        RequestOptions::TIMEOUT => 10,\n\n        /*\n         * Describes the redirect behavior of a request.\n         */\n        RequestOptions::ALLOW_REDIRECTS => false,\n    ],\n\n    /*\n     * The sitemap generator can execute JavaScript on each page so it will\n     * discover links that are generated by your JS scripts. This feature\n     * is powered by headless Chrome.\n     */\n    'execute_javascript' => false,\n\n    /*\n     * The package will make an educated guess as to where Google Chrome is installed.\n     * You can also manually pass its location here.\n     */\n    'chrome_binary_path' => null,\n\n    /*\n     * The sitemap generator uses a CrawlProfile implementation to determine\n     * which urls should be crawled for the sitemap.\n     */\n    'crawl_profile' => Profile::class,\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "themes.php",
                        "relativePath": "config\\themes.php",
                        "extension": "php",
                        "size": 1623,
                        "sizeFormatted": "1.58 KB",
                        "contentLength": 1623,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Shop Theme Configuration\n    |--------------------------------------------------------------------------\n    |\n    | All the configurations are related to the shop themes.\n    |\n    */\n\n    'shop-default' => 'default',\n\n    'shop' => [\n        'default' => [\n            'name'        => 'Default',\n            'assets_path' => 'public/themes/shop/default',\n            'views_path'  => 'resources/themes/default/views',\n\n            'vite'        => [\n                'hot_file'                 => 'shop-default-vite.hot',\n                'build_directory'          => 'themes/shop/default/build',\n                'package_assets_directory' => 'src/Resources/assets',\n            ],\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Admin Theme Configuration\n    |--------------------------------------------------------------------------\n    |\n    | All the configurations are related to the admin themes.\n    |\n    */\n\n    'admin-default' => 'default',\n\n    'admin' => [\n        'default' => [\n            'name'        => 'Default',\n            'assets_path' => 'public/themes/admin/default',\n            'views_path'  => 'resources/admin-themes/default/views',\n\n            'vite'        => [\n                'hot_file'                 => 'admin-default-vite.hot',\n                'build_directory'          => 'themes/admin/default/build',\n                'package_assets_directory' => 'src/Resources/assets',\n            ],\n        ],\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "tinker.php",
                        "relativePath": "config\\tinker.php",
                        "extension": "php",
                        "size": 1504,
                        "sizeFormatted": "1.47 KB",
                        "contentLength": 1504,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Console Commands\n    |--------------------------------------------------------------------------\n    |\n    | This option allows you to add additional Artisan commands that should\n    | be available within the Tinker environment. Once the command is in\n    | this array you may execute the command in Tinker using its name.\n    |\n    */\n\n    'commands' => [\n        // App\\Console\\Commands\\ExampleCommand::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Auto Aliased Classes\n    |--------------------------------------------------------------------------\n    |\n    | Tinker will not automatically alias classes in your vendor namespaces\n    | but you may explicitly allow a subset of classes to get aliased by\n    | adding the names of each of those classes to the following list.\n    |\n    */\n\n    'alias' => [\n        //\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Classes That Should Not Be Aliased\n    |--------------------------------------------------------------------------\n    |\n    | Typically, Tinker automatically aliases classes as you require them in\n    | Tinker. However, you may wish to never alias certain classes, which\n    | you may accomplish by listing the classes in the following array.\n    |\n    */\n\n    'dont_alias' => [\n        'App\\Nova',\n    ],\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "translatable.php",
                        "relativePath": "config\\translatable.php",
                        "extension": "php",
                        "size": 5334,
                        "sizeFormatted": "5.21 KB",
                        "contentLength": 5334,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Locales\n    |--------------------------------------------------------------------------\n    |\n    | Contains an array with the applications available locales.\n    |\n    */\n    'locales' => [\n        'en',\n        'fr',\n        'es' => [\n            'MX', // mexican spanish\n            'CO', // colombian spanish\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Locale separator\n    |--------------------------------------------------------------------------\n    |\n    | This is a string used to glue the language and the country when defining\n    | the available locales. Example: if set to '-', then the locale for\n    | colombian spanish will be saved as 'es-CO' into the database.\n    |\n    */\n    'locale_separator' => '-',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default locale\n    |--------------------------------------------------------------------------\n    |\n    | As a default locale, Translatable takes the locale of Laravel's\n    | translator. If for some reason you want to override this,\n    | you can specify what default should be used here.\n    | If you set a value here it will only use the current config value\n    | and never fallback to the translator one.\n    |\n    */\n    'locale' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Use fallback\n    |--------------------------------------------------------------------------\n    |\n    | Determine if fallback locales are returned by default or not. To add\n    | more flexibility and configure this option per \"translatable\"\n    | instance, this value will be overridden by the property\n    | $useTranslationFallback when defined\n    |\n    */\n    'use_fallback' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Use fallback per property\n    |--------------------------------------------------------------------------\n    |\n    | The property fallback feature will return the translated value of\n    | the fallback locale if the property is empty for the selected\n    | locale. Note that 'use_fallback' must be enabled.\n    |\n     */\n    'use_property_fallback' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Fallback Locale\n    |--------------------------------------------------------------------------\n    |\n    | A fallback locale is the locale being used to return a translation\n    | when the requested translation is not existing. To disable it\n    | set it to false.\n    | If set to null it will loop through all configured locales until\n    | one existing is found or end of list reached. The locales are looped\n    | from top to bottom and for country based locales the simple one\n    | is used first. So \"es\" will be checked before \"es_MX\".\n    |\n    */\n    'fallback_locale' => 'en',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Translation Model Namespace\n    |--------------------------------------------------------------------------\n    |\n    | Defines the default 'Translation' class namespace. For example, if\n    | you want to use App\\Translations\\CountryTranslation instead of App\\CountryTranslation\n    | set this to 'App\\Translations'.\n    |\n    */\n    'translation_model_namespace' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Translation Suffix\n    |--------------------------------------------------------------------------\n    |\n    | Defines the default 'Translation' class suffix. For example, if\n    | you want to use CountryTrans instead of CountryTranslation\n    | application, set this to 'Trans'.\n    |\n    */\n    'translation_suffix' => 'Translation',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Locale key\n    |--------------------------------------------------------------------------\n    |\n    | Defines the 'locale' field name, which is used by the\n    | translation model.\n    |\n    */\n    'locale_key' => 'locale',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Always load translations when converting to array\n    |--------------------------------------------------------------------------\n    | Setting this to false will have a performance improvement but will\n    | not return the translations when using toArray(), unless the\n    | translations relationship is already loaded.\n    |\n     */\n    'to_array_always_loads_translations' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Configure the default behavior of the rule factory\n    |--------------------------------------------------------------------------\n    | The default values used to control the behavior of the RuleFactory.\n    | Here you can set your own default format and delimiters for\n    | your whole app.\n     *\n     */\n    'rule_factory' => [\n        'format' => \\Astrotomic\\Translatable\\Validation\\RuleFactory::FORMAT_ARRAY,\n        'prefix' => '%',\n        'suffix' => '%',\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "view.php",
                        "relativePath": "config\\view.php",
                        "extension": "php",
                        "size": 1275,
                        "sizeFormatted": "1.25 KB",
                        "contentLength": 1275,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Blade File Tracer\n    |--------------------------------------------------------------------------\n    |\n    | Shows blade file path in front\n    |\n    */\n\n    'tracer' => false,\n\n    /*\n    |--------------------------------------------------------------------------\n    | View Storage Paths\n    |--------------------------------------------------------------------------\n    |\n    | Most templating systems load templates from disk. Here you may specify\n    | an array of paths that should be checked for your views. Of course\n    | the usual Laravel view path has already been registered for you.\n    |\n    */\n\n    'paths' => [\n        resource_path('views'),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Compiled View Path\n    |--------------------------------------------------------------------------\n    |\n    | This option determines where all the compiled Blade templates will be\n    | stored for your application. Typically, this is within the storage\n    | directory. However, as usual, you are free to change this value.\n    |\n    */\n\n    'compiled' => realpath(storage_path('framework/views')),\n\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "visitor.php",
                        "relativePath": "config\\visitor.php",
                        "extension": "php",
                        "size": 1233,
                        "sizeFormatted": "1.2 KB",
                        "contentLength": 1233,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Default Driver\n    |--------------------------------------------------------------------------\n    |\n    | This value determines which of the following driver to use.\n    | You can switch to a different driver at runtime.\n    |\n    */\n    'default' => 'jenssegers',\n\n    // except save request or route names\n    'except' => ['login', 'register'],\n\n    // name of the table which visit records should save in\n    'table_name' => 'visits',\n\n    /*\n    |--------------------------------------------------------------------------\n    | List of Drivers\n    |--------------------------------------------------------------------------\n    |\n    | This is the array of Classes that maps to Drivers above.\n    | You can create your own driver if you like and add the\n    | config in the drivers array and the class to use for\n    | here with the same name. You will have to implement\n    | Shetabit\\Visitor\\Contracts\\UserAgentParser in your driver.\n    |\n    */\n    'drivers' => [\n        'jenssegers' => \\Shetabit\\Visitor\\Drivers\\JenssegersAgent::class,\n        'UAParser'   => \\Shetabit\\Visitor\\Drivers\\UAParser::class,\n    ],\n];\n"
                    }
                }
            ],
            "statistics": {
                "fileCount": 34,
                "totalSize": 142343,
                "totalSizeFormatted": "139.01 KB"
            }
        },
        "routes": {
            "categoryInfo": {
                "displayName": "ملفات المسارات",
                "description": "تعريفات مسارات التطبيق",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto\\routes",
                "extensions": [
                    "php"
                ],
                "maxDepth": 2,
                "priority": 1
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": "breadcrumbs.php",
                        "relativePath": "routes\\breadcrumbs.php",
                        "extension": "php",
                        "size": 3884,
                        "sizeFormatted": "3.79 KB",
                        "contentLength": 3884,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Diglactic\\Breadcrumbs\\Breadcrumbs;\nuse Diglactic\\Breadcrumbs\\Generator as BreadcrumbTrail;\n\n// Home\nBreadcrumbs::for('home', function (BreadcrumbTrail $trail) {\n    $trail->push(trans('shop::app.customers.account.home'), route('shop.home.index'));\n});\n\n// Home > My Account\nBreadcrumbs::for('account', function (BreadcrumbTrail $trail) {\n    $trail->parent('home');\n    $trail->push(trans('shop::app.layouts.my-account'), route('shop.customers.account.profile.index'));\n});\n\n// Home > My Account > Profile\nBreadcrumbs::for('profile', function (BreadcrumbTrail $trail) {\n    $trail->parent('account');\n    $trail->push(trans('shop::app.layouts.profile'), route('shop.customers.account.profile.index'));\n});\n\n// Home > My Account > Profile > Edit\nBreadcrumbs::for('profile.edit', function (BreadcrumbTrail $trail) {\n    $trail->parent('profile');\n    $trail->push(trans('shop::app.customers.account.profile.edit.edit'), route('shop.customers.account.profile.index'));\n});\n\n// Home > My Account > Address\nBreadcrumbs::for('addresses', function (BreadcrumbTrail $trail) {\n    $trail->parent('account');\n    $trail->push(trans('shop::app.layouts.address'), route('shop.customers.account.addresses.index'));\n});\n\n// Home > My Account > Address > Create\nBreadcrumbs::for('addresses.create', function (BreadcrumbTrail $trail) {\n    $trail->parent('addresses');\n    $trail->push(trans('shop::app.customers.account.addresses.index.add-address'), route('shop.customers.account.addresses.create'));\n});\n\n// Home > My Account > Address > Edit\nBreadcrumbs::for('addresses.edit', function (BreadcrumbTrail $trail, $entity) {\n    $trail->parent('addresses');\n    $trail->push(trans('shop::app.customers.account.addresses.index.edit'), route('shop.customers.account.addresses.edit', $entity->id));\n});\n\n// Home > My Account > Orders\nBreadcrumbs::for('orders', function (BreadcrumbTrail $trail) {\n    $trail->parent('account');\n    $trail->push(trans('shop::app.layouts.orders'), route('shop.customers.account.orders.index'));\n});\n\nBreadcrumbs::for('orders.view', function (BreadcrumbTrail $trail, $entity) {\n    $trail->parent('orders');\n    $trail->push(trans('shop::app.customers.account.orders.view.title'), route('shop.customers.account.orders.view', $entity->id));\n});\n\n// Home > My Account > Downloadable Products\nBreadcrumbs::for('downloadable-products', function (BreadcrumbTrail $trail) {\n    $trail->parent('account');\n    $trail->push(trans('shop::app.layouts.downloadable-products'), route('shop.customers.account.downloadable_products.index'));\n});\n\n// Home > My Account > Reviews\nBreadcrumbs::for('reviews', function (BreadcrumbTrail $trail) {\n    $trail->parent('account');\n    $trail->push(trans('shop::app.layouts.reviews'), route('shop.customers.account.reviews.index'));\n});\n\n// Home > My Account > Wishlist\nBreadcrumbs::for('wishlist', function (BreadcrumbTrail $trail) {\n    $trail->parent('account');\n    $trail->push(trans('shop::app.layouts.wishlist'), route('shop.customers.account.wishlist.index'));\n});\n\n// Home > Cart\nBreadcrumbs::for('cart', function (BreadcrumbTrail $trail) {\n    $trail->parent('home');\n    $trail->push(trans('shop::app.checkout.cart.index.cart'), route('shop.checkout.cart.index'));\n});\n\n// Home > Checkout\nBreadcrumbs::for('checkout', function (BreadcrumbTrail $trail) {\n    $trail->parent('cart');\n    $trail->push(trans('shop::app.checkout.onepage.index.checkout'), route('shop.checkout.onepage.index'));\n});\n\n// Home > Comapre\nBreadcrumbs::for('compare', function (BreadcrumbTrail $trail) {\n    $trail->parent('home');\n    $trail->push(trans('shop::app.compare.product-compare'), route('shop.compare.index'));\n});\n\n// Home > Product\nBreadcrumbs::for('product', function (BreadcrumbTrail $trail, $entity) {\n    $trail->parent('home');\n    $trail->push($entity->name ?? '', route('shop.product_or_category.index', $entity->url_key));\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "console.php",
                        "relativePath": "routes\\console.php",
                        "extension": "php",
                        "size": 220,
                        "sizeFormatted": "220 B",
                        "contentLength": 220,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Foundation\\Inspiring;\nuse Illuminate\\Support\\Facades\\Artisan;\n\nArtisan::command('inspire', function () {\n    $this->comment(Inspiring::quote());\n})->purpose('Display an inspiring quote')->hourly();\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "web.php",
                        "relativePath": "routes\\web.php",
                        "extension": "php",
                        "size": 6,
                        "sizeFormatted": "6 B",
                        "contentLength": 6,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n"
                    }
                }
            ],
            "statistics": {
                "fileCount": 3,
                "totalSize": 4110,
                "totalSizeFormatted": "4.01 KB"
            }
        },
        "env": {
            "categoryInfo": {
                "displayName": "ملفات البيئة",
                "description": "ملفات إعدادات البيئة",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto",
                "extensions": [],
                "specificFiles": [
                    ".env.example"
                ],
                "priority": 1
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": ".env.example",
                        "relativePath": ".env.example",
                        "extension": "example",
                        "size": 1275,
                        "sizeFormatted": "1.25 KB",
                        "contentLength": 1275,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "APP_NAME=Bagisto\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_DEBUG_ALLOWED_IPS=\nAPP_URL=http://localhost\nAPP_ADMIN_URL=admin\nAPP_TIMEZONE=Asia/Kolkata\n\nAPP_LOCALE=en\nAPP_FALLBACK_LOCALE=en\nAPP_FAKER_LOCALE=en_US\n\nAPP_CURRENCY=USD\n\nAPP_MAINTENANCE_DRIVER=file\n# APP_MAINTENANCE_STORE=database\n\nBCRYPT_ROUNDS=12\n\nLOG_CHANNEL=stack\nLOG_STACK=single\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=\nDB_USERNAME=\nDB_PASSWORD=\nDB_PREFIX=\n\nSESSION_DRIVER=file\nSESSION_LIFETIME=120\nSESSION_ENCRYPT=false\nSESSION_PATH=/\nSESSION_DOMAIN=null\n\nBROADCAST_CONNECTION=log\nFILESYSTEM_DISK=public\nQUEUE_CONNECTION=sync\n\nCACHE_STORE=file\nCACHE_PREFIX=\n\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_CLIENT=phpredis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nRESPONSE_CACHE_ENABLED=true\n\nMAIL_MAILER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=\nMAIL_PASSWORD=\nMAIL_ENCRYPTION=tls\n\nMAIL_FROM_ADDRESS=shop@example.com\nMAIL_FROM_NAME=Shop\n\nADMIN_MAIL_ADDRESS=admin@example.com\nADMIN_MAIL_NAME=Admin\n\nCONTACT_MAIL_ADDRESS=\nCONTACT_MAIL_NAME=\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\nVITE_APP_NAME=\"${APP_NAME}\"\nVITE_HOST=localhost\nVITE_PORT=\n"
                    }
                }
            ],
            "statistics": {
                "fileCount": 1,
                "totalSize": 1275,
                "totalSizeFormatted": "1.25 KB"
            }
        },
        "composer": {
            "categoryInfo": {
                "displayName": "إعدادات Composer",
                "description": "ملفات إدارة التبعيات",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto",
                "extensions": [],
                "specificFiles": [
                    "composer.json",
                    "composer.lock"
                ],
                "priority": 1
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": "composer.json",
                        "relativePath": "composer.json",
                        "extension": "json",
                        "size": 5915,
                        "sizeFormatted": "5.78 KB",
                        "contentLength": 5915,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "{\n    \"name\": \"bagisto/bagisto\",\n    \"type\": \"project\",\n    \"description\": \"Bagisto Laravel E-Commerce\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\"\n    ],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"ext-calendar\": \"*\",\n        \"ext-curl\": \"*\",\n        \"ext-intl\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_mysql\": \"*\",\n        \"ext-tokenizer\": \"*\",\n        \"astrotomic/laravel-translatable\": \"^11.0.0\",\n        \"bagisto/image-cache\": \"dev-master\",\n        \"barryvdh/laravel-dompdf\": \"^2.0.0\",\n        \"diglactic/laravel-breadcrumbs\": \"^9.0\",\n        \"elasticsearch/elasticsearch\": \"^8.10\",\n        \"enshrined/svg-sanitize\": \"^0.22.0\",\n        \"guzzlehttp/guzzle\": \"^7.0.1\",\n        \"intervention/image\": \"^2.4\",\n        \"kalnoy/nestedset\": \"^6.0\",\n        \"khaled.alshamaa/ar-php\": \"^6.0.0\",\n        \"konekt/concord\": \"^1.2\",\n        \"laravel/framework\": \"^11.0\",\n        \"laravel/octane\": \"^2.3\",\n        \"laravel/sanctum\": \"^4.0\",\n        \"laravel/socialite\": \"^5.0\",\n        \"laravel/tinker\": \"^2.0\",\n        \"laravel/ui\": \"^4.0\",\n        \"maatwebsite/excel\": \"^3.1.46\",\n        \"mpdf/mpdf\": \"^8.2\",\n        \"nesbot/carbon\": \"^2.72.2\",\n        \"openai-php/laravel\": \"^0.10.1\",\n        \"paypal/paypal-checkout-sdk\": \"1.0.1\",\n        \"predis/predis\": \"^2.2\",\n        \"prettus/l5-repository\": \"^2.6\",\n        \"pusher/pusher-php-server\": \"^7.0\",\n        \"shetabit/visitor\": \"^4.1\",\n        \"spatie/laravel-responsecache\": \"^7.4\",\n        \"spatie/laravel-sitemap\": \"^7.3\"\n    },\n    \"require-dev\": {\n        \"bagisto/laravel-datafaker\": \"2.3.*\",\n        \"barryvdh/laravel-debugbar\": \"^3.8\",\n        \"fakerphp/faker\": \"^1.23\",\n        \"laravel/pint\": \"^1.19\",\n        \"mockery/mockery\": \"^1.6\",\n        \"nunomaduro/collision\": \"^8.0\",\n        \"pestphp/pest\": \"^3.0\",\n        \"pestphp/pest-plugin-laravel\": \"^3.0\",\n        \"phpunit/phpunit\": \"^11.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"Database\\\\Factories\\\\\": \"database/factories/\",\n            \"Database\\\\Seeders\\\\\": \"database/seeders/\",\n            \"Webkul\\\\Admin\\\\\": \"packages/Webkul/Admin/src\",\n            \"Webkul\\\\Attribute\\\\\": \"packages/Webkul/Attribute/src\",\n            \"Webkul\\\\BookingProduct\\\\\": \"packages/Webkul/BookingProduct/src\",\n            \"Webkul\\\\CartRule\\\\\": \"packages/Webkul/CartRule/src\",\n            \"Webkul\\\\CatalogRule\\\\\": \"packages/Webkul/CatalogRule/src\",\n            \"Webkul\\\\Category\\\\\": \"packages/Webkul/Category/src\",\n            \"Webkul\\\\Checkout\\\\\": \"packages/Webkul/Checkout/src\",\n            \"Webkul\\\\CMS\\\\\": \"packages/Webkul/CMS/src\",\n            \"Webkul\\\\Core\\\\\": \"packages/Webkul/Core/src\",\n            \"Webkul\\\\Customer\\\\\": \"packages/Webkul/Customer/src\",\n            \"Webkul\\\\DataGrid\\\\\": \"packages/Webkul/DataGrid/src\",\n            \"Webkul\\\\DataTransfer\\\\\": \"packages/Webkul/DataTransfer/src\",\n            \"Webkul\\\\DebugBar\\\\\": \"packages/Webkul/DebugBar/src\",\n            \"Webkul\\\\FPC\\\\\": \"packages/Webkul/FPC/src\",\n            \"Webkul\\\\GDPR\\\\\": \"packages/Webkul/GDPR/src\",\n            \"Webkul\\\\Installer\\\\\": \"packages/Webkul/Installer/src\",\n            \"Webkul\\\\Inventory\\\\\": \"packages/Webkul/Inventory/src\",\n            \"Webkul\\\\MagicAI\\\\\": \"packages/Webkul/MagicAI/src\",\n            \"Webkul\\\\Marketing\\\\\": \"packages/Webkul/Marketing/src\",\n            \"Webkul\\\\Notification\\\\\": \"packages/Webkul/Notification/src\",\n            \"Webkul\\\\Paypal\\\\\": \"packages/Webkul/Paypal/src\",\n            \"Webkul\\\\Payment\\\\\": \"packages/Webkul/Payment/src\",\n            \"Webkul\\\\Product\\\\\": \"packages/Webkul/Product/src\",\n            \"Webkul\\\\Rule\\\\\": \"packages/Webkul/Rule/src\",\n            \"Webkul\\\\Sales\\\\\": \"packages/Webkul/Sales/src\",\n            \"Webkul\\\\Shipping\\\\\": \"packages/Webkul/Shipping/src\",\n            \"Webkul\\\\Shop\\\\\": \"packages/Webkul/Shop/src\",\n            \"Webkul\\\\Sitemap\\\\\": \"packages/Webkul/Sitemap/src\",\n            \"Webkul\\\\SocialLogin\\\\\": \"packages/Webkul/SocialLogin/src\",\n            \"Webkul\\\\SocialShare\\\\\": \"packages/Webkul/SocialShare/src\",\n            \"Webkul\\\\Tax\\\\\": \"packages/Webkul/Tax/src\",\n            \"Webkul\\\\Theme\\\\\": \"packages/Webkul/Theme/src\",\n            \"Webkul\\\\User\\\\\": \"packages/Webkul/User/src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\",\n            \"Webkul\\\\Admin\\\\Tests\\\\\": \"packages/Webkul/Admin/tests\",\n            \"Webkul\\\\Core\\\\Tests\\\\\": \"packages/Webkul/Core/tests\",\n            \"Webkul\\\\DataGrid\\\\Tests\\\\\": \"packages/Webkul/DataGrid/tests\",\n            \"Webkul\\\\Shop\\\\Tests\\\\\": \"packages/Webkul/Shop/tests\"\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump\",\n            \"@php artisan package:discover --ansi\"\n        ],\n        \"post-create-project-cmd\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\",\n            \"@php artisan key:generate --ansi\"\n        ]\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": [\n                \"intervention/image\",\n                \"laravel/socialite\",\n                \"shetabit/visitor\"\n            ]\n        }\n    },\n    \"repositories\": [{\n        \"type\": \"path\",\n        \"url\": \"packages/*/*\",\n        \"options\": {\n            \"symlink\": true\n        }\n    }],\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true,\n            \"php-http/discovery\": true\n        }\n    },\n    \"minimum-stability\": \"stable\",\n    \"prefer-stable\": true,\n    \"support\": {\n        \"issues\": \"https://github.com/bagisto/bagisto/issues\",\n        \"forum\": \"https://forums.bagisto.com\",\n        \"source\": \"https://github.com/bagisto/bagisto\",\n        \"docs\": \"https://devdocs.bagisto.com\"\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "composer.lock",
                        "relativePath": "composer.lock",
                        "extension": "lock",
                        "size": 517312,
                        "sizeFormatted": "505.19 KB",
                        "contentLength": 50071,
                        "truncated": true
                    },
                    "fileContent": {
                        "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"dc52a94d30562eb739cf3a489ceecd7c\",\n    \"packages\": [\n        {\n            \"name\": \"astrotomic/laravel-translatable\",\n            \"version\": \"v11.16.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Astrotomic/laravel-translatable.git\",\n                \"reference\": \"3edd5a3083b45948942af83903845954c3352652\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Astrotomic/laravel-translatable/zipball/3edd5a3083b45948942af83903845954c3352652\",\n                \"reference\": \"3edd5a3083b45948942af83903845954c3352652\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/contracts\": \"^9.0 || ^10.0 || ^11.0 || ^12.0\",\n                \"illuminate/database\": \"^9.0 || ^10.0 || ^11.0 || ^12.0\",\n                \"illuminate/support\": \"^9.0 || ^10.0 || ^11.0 || ^12.0\",\n                \"php\": \"^8.0\"\n            },\n            \"require-dev\": {\n                \"larastan/larastan\": \"^2.0 || ^3.0\",\n                \"laravel/legacy-factories\": \"^1.0.4\",\n                \"laravel/pint\": \"^1.0\",\n                \"mockery/mockery\": \"^1.3.3\",\n                \"orchestra/testbench\": \"^7.0 || ^8.0 || ^9.0 || ^10.0\",\n                \"phpunit/phpunit\": \"^10.0 || ^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"Astrotomic\\\\Translatable\\\\TranslatableServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Astrotomic\\\\Translatable\\\\\": \"src/Translatable/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Tom Witkowski\",\n                    \"email\": \"gummibeer@astrotomic.info\",\n                    \"homepage\": \"https://gummibeer.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Dimitrios Savvopoulos\",\n                    \"email\": \"ds@dimsav.com\",\n                    \"homepage\": \"http://dimsav.com\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A Laravel package for multilingual models\",\n            \"homepage\": \"https://astrotomic.info\",\n            \"keywords\": [\n                \"database\",\n                \"language\",\n                \"laravel\",\n                \"translation\"\n            ],\n            \"support\": {\n                \"docs\": \"https://docs.astrotomic.info/laravel-translatable\",\n                \"email\": \"dev@astrotomic.info\",\n                \"issues\": \"https://github.com/Astrotomic/laravel-translatable/issues\",\n                \"source\": \"https://github.com/Astrotomic/laravel-translatable\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://forest.astrotomic.info\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/Gummibeer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2025-07-09T14:05:02+00:00\"\n        },\n        {\n            \"name\": \"bagisto/image-cache\",\n            \"version\": \"dev-master\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/bagisto/image-cache.git\",\n                \"reference\": \"b5a24e83ec4387261ae55947534d573fb897c86c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/bagisto/image-cache/zipball/b5a24e83ec4387261ae55947534d573fb897c86c\",\n                \"reference\": \"b5a24e83ec4387261ae55947534d573fb897c86c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/cache\": \"^9|~10|~11\",\n                \"illuminate/filesystem\": \"^9|~10|~11\",\n                \"intervention/image\": \"~2.2\",\n                \"nesbot/carbon\": \"^2.72.2\",\n                \"opis/closure\": \"^3.5\",\n                \"php\": \"^8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^10.0\"\n            },\n            \"default-branch\": true,\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Intervention\\\\Image\\\\\": \"src/Intervention/Image\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Oliver Vogel\",\n                    \"email\": \"oliver@intervention.io\",\n                    \"homepage\": \"http://intervention.io/\"\n                }\n            ],\n            \"description\": \"Caching extension for the Intervention Image Class\",\n            \"homepage\": \"https://image.intervention.io\",\n            \"keywords\": [\n                \"cache\",\n                \"gd\",\n                \"image\",\n                \"imagick\",\n                \"laravel\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/bagisto/image-cache/tree/master\"\n            },\n            \"time\": \"2024-10-03T06:31:17+00:00\"\n        },\n        {\n            \"name\": \"barryvdh/laravel-dompdf\",\n            \"version\": \"v2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/barryvdh/laravel-dompdf.git\",\n                \"reference\": \"c96f90c97666cebec154ca1ffb67afed372114d8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/barryvdh/laravel-dompdf/zipball/c96f90c97666cebec154ca1ffb67afed372114d8\",\n                \"reference\": \"c96f90c97666cebec154ca1ffb67afed372114d8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"dompdf/dompdf\": \"^2.0.7\",\n                \"illuminate/support\": \"^6|^7|^8|^9|^10|^11\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"larastan/larastan\": \"^1.0|^2.7.0\",\n                \"orchestra/testbench\": \"^4|^5|^6|^7|^8|^9\",\n                \"phpro/grumphp\": \"^1 || ^2.5\",\n                \"squizlabs/php_codesniffer\": \"^3.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"aliases\": {\n                        \"PDF\": \"Barryvdh\\\\DomPDF\\\\Facade\\\\Pdf\",\n                        \"Pdf\": \"Barryvdh\\\\DomPDF\\\\Facade\\\\Pdf\"\n                    },\n                    \"providers\": [\n                        \"Barryvdh\\\\DomPDF\\\\ServiceProvider\"\n                    ]\n                },\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Barryvdh\\\\DomPDF\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Barry vd. Heuvel\",\n                    \"email\": \"barryvdh@gmail.com\"\n                }\n            ],\n            \"description\": \"A DOMPDF Wrapper for Laravel\",\n            \"keywords\": [\n                \"dompdf\",\n                \"laravel\",\n                \"pdf\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/barryvdh/laravel-dompdf/issues\",\n                \"source\": \"https://github.com/barryvdh/laravel-dompdf/tree/v2.2.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://fruitcake.nl\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/barryvdh\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-04-25T13:16:04+00:00\"\n        },\n        {\n            \"name\": \"brick/math\",\n            \"version\": \"0.12.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/brick/math.git\",\n                \"reference\": \"866551da34e9a618e64a819ee1e01c20d8a588ba\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/brick/math/zipball/866551da34e9a618e64a819ee1e01c20d8a588ba\",\n                \"reference\": \"866551da34e9a618e64a819ee1e01c20d8a588ba\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"php-coveralls/php-coveralls\": \"^2.2\",\n                \"phpunit/phpunit\": \"^10.1\",\n                \"vimeo/psalm\": \"6.8.8\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Brick\\\\Math\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Arbitrary-precision arithmetic library\",\n            \"keywords\": [\n                \"Arbitrary-precision\",\n                \"BigInteger\",\n                \"BigRational\",\n                \"arithmetic\",\n                \"bigdecimal\",\n                \"bignum\",\n                \"bignumber\",\n                \"brick\",\n                \"decimal\",\n                \"integer\",\n                \"math\",\n                \"mathematics\",\n                \"rational\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/brick/math/issues\",\n                \"source\": \"https://github.com/brick/math/tree/0.12.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/BenMorel\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2025-02-28T13:11:00+00:00\"\n        },\n        {\n            \"name\": \"carbonphp/carbon-doctrine-types\",\n            \"version\": \"3.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/CarbonPHP/carbon-doctrine-types.git\",\n                \"reference\": \"18ba5ddfec8976260ead6e866180bd5d2f71aa1d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/CarbonPHP/carbon-doctrine-types/zipball/18ba5ddfec8976260ead6e866180bd5d2f71aa1d\",\n                \"reference\": \"18ba5ddfec8976260ead6e866180bd5d2f71aa1d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"conflict\": {\n                \"doctrine/dbal\": \"<4.0.0 || >=5.0.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/dbal\": \"^4.0.0\",\n                \"nesbot/carbon\": \"^2.71.0 || ^3.0.0\",\n                \"phpunit/phpunit\": \"^10.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Carbon\\\\Doctrine\\\\\": \"src/Carbon/Doctrine/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"KyleKatarn\",\n                    \"email\": \"kylekatarnls@gmail.com\"\n                }\n            ],\n            \"description\": \"Types to use Carbon in Doctrine\",\n            \"keywords\": [\n                \"carbon\",\n                \"date\",\n                \"datetime\",\n                \"doctrine\",\n                \"time\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/CarbonPHP/carbon-doctrine-types/issues\",\n                \"source\": \"https://github.com/CarbonPHP/carbon-doctrine-types/tree/3.2.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/kylekatarnls\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://opencollective.com/Carbon\",\n                    \"type\": \"open_collective\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/nesbot/carbon\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-02-09T16:56:22+00:00\"\n        },\n        {\n            \"name\": \"composer/ca-bundle\",\n            \"version\": \"1.5.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/composer/ca-bundle.git\",\n                \"reference\": \"d665d22c417056996c59019579f1967dfe5c1e82\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/composer/ca-bundle/zipball/d665d22c417056996c59019579f1967dfe5c1e82\",\n                \"reference\": \"d665d22c417056996c59019579f1967dfe5c1e82\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-openssl\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^8 || ^9\",\n                \"psr/log\": \"^1.0 || ^2.0 || ^3.0\",\n                \"symfony/process\": \"^4.0 || ^5.0 || ^6.0 || ^7.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Composer\\\\CaBundle\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                }\n            ],\n            \"description\": \"Lets you find a path to the system CA bundle, and includes a fallback to the Mozilla CA bundle.\",\n            \"keywords\": [\n                \"cabundle\",\n                \"cacert\",\n                \"certificate\",\n                \"ssl\",\n                \"tls\"\n            ],\n            \"support\": {\n                \"irc\": \"irc://irc.freenode.org/composer\",\n                \"issues\": \"https://github.com/composer/ca-bundle/issues\",\n                \"source\": \"https://github.com/composer/ca-bundle/tree/1.5.7\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://packagist.com\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/composer\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2025-05-26T15:08:54+00:00\"\n        },\n        {\n            \"name\": \"composer/pcre\",\n            \"version\": \"3.3.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/composer/pcre.git\",\n                \"reference\": \"b2bed4734f0cc156ee1fe9c0da2550420d99a21e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/composer/pcre/zipball/b2bed4734f0cc156ee1fe9c0da2550420d99a21e\",\n                \"reference\": \"b2bed4734f0cc156ee1fe9c0da2550420d99a21e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.4 || ^8.0\"\n            },\n            \"conflict\": {\n                \"phpstan/phpstan\": \"<1.11.10\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.12 || ^2\",\n                \"phpstan/phpstan-strict-rules\": \"^1 || ^2\",\n                \"phpunit/phpunit\": \"^8 || ^9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"phpstan\": {\n                    \"includes\": [\n                        \"extension.neon\"\n                    ]\n                },\n                \"branch-alias\": {\n                    \"dev-main\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Composer\\\\Pcre\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                }\n            ],\n            \"description\": \"PCRE wrapping library that offers type-safe preg_* replacements.\",\n            \"keywords\": [\n                \"PCRE\",\n                \"preg\",\n                \"regex\",\n                \"regular expression\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/composer/pcre/issues\",\n                \"source\": \"https://github.com/composer/pcre/tree/3.3.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://packagist.com\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/composer\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-12T16:29:46+00:00\"\n        },\n        {\n            \"name\": \"composer/semver\",\n            \"version\": \"3.4.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/composer/semver.git\",\n                \"reference\": \"4313d26ada5e0c4edfbd1dc481a92ff7bff91f12\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/composer/semver/zipball/4313d26ada5e0c4edfbd1dc481a92ff7bff91f12\",\n                \"reference\": \"4313d26ada5e0c4edfbd1dc481a92ff7bff91f12\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.2 || ^7.0 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.11\",\n                \"symfony/phpunit-bridge\": \"^3 || ^7\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Composer\\\\Semver\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nils Adermann\",\n                    \"email\": \"naderman@naderman.de\",\n                    \"homepage\": \"http://www.naderman.de\"\n                },\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                },\n                {\n                    \"name\": \"Rob Bast\",\n                    \"email\": \"rob.bast@gmail.com\",\n                    \"homepage\": \"http://robbast.nl\"\n                }\n            ],\n            \"description\": \"Semver library that offers utilities, version constraint parsing and validation.\",\n            \"keywords\": [\n                \"semantic\",\n                \"semver\",\n                \"validation\",\n                \"versioning\"\n            ],\n            \"support\": {\n                \"irc\": \"ircs://irc.libera.chat:6697/composer\",\n                \"issues\": \"https://github.com/composer/semver/issues\",\n                \"source\": \"https://github.com/composer/semver/tree/3.4.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://packagist.com\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/composer\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-19T14:15:21+00:00\"\n        },\n        {\n            \"name\": \"dflydev/dot-access-data\",\n            \"version\": \"v3.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dflydev/dflydev-dot-access-data.git\",\n                \"reference\": \"a23a2bf4f31d3518f3ecb38660c95715dfead60f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dflydev/dflydev-dot-access-data/zipball/a23a2bf4f31d3518f3ecb38660c95715dfead60f\",\n                \"reference\": \"a23a2bf4f31d3518f3ecb38660c95715dfead60f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^0.12.42\",\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.3\",\n                \"scrutinizer/ocular\": \"1.6.0\",\n                \"squizlabs/php_codesniffer\": \"^3.5\",\n                \"vimeo/psalm\": \"^4.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Dflydev\\\\DotAccessData\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Dragonfly Development Inc.\",\n                    \"email\": \"info@dflydev.com\",\n                    \"homepage\": \"http://dflydev.com\"\n                },\n                {\n                    \"name\": \"Beau Simensen\",\n                    \"email\": \"beau@dflydev.com\",\n                    \"homepage\": \"http://beausimensen.com\"\n                },\n                {\n                    \"name\": \"Carlos Frutos\",\n                    \"email\": \"carlos@kiwing.it\",\n                    \"homepage\": \"https://github.com/cfrutos\"\n                },\n                {\n                    \"name\": \"Colin O'Dell\",\n                    \"email\": \"colinodell@gmail.com\",\n                    \"homepage\": \"https://www.colinodell.com\"\n                }\n            ],\n            \"description\": \"Given a deep data structure, access data by dot notation.\",\n            \"homepage\": \"https://github.com/dflydev/dflydev-dot-access-data\",\n            \"keywords\": [\n                \"access\",\n                \"data\",\n                \"dot\",\n                \"notation\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/dflydev/dflydev-dot-access-data/issues\",\n                \"source\": \"https://github.com/dflydev/dflydev-dot-access-data/tree/v3.0.3\"\n            },\n            \"time\": \"2024-07-08T12:26:09+00:00\"\n        },\n        {\n            \"name\": \"diglactic/laravel-breadcrumbs\",\n            \"version\": \"v9.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/diglactic/laravel-breadcrumbs.git\",\n                \"reference\": \"88e8f01e013e811215770e27b40a74014c28f2c4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/diglactic/laravel-breadcrumbs/zipball/88e8f01e013e811215770e27b40a74014c28f2c4\",\n                \"reference\": \"88e8f01e013e811215770e27b40a74014c28f2c4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"facade/ignition-contracts\": \"^1.0\",\n                \"laravel/framework\": \"^8.0 || ^9.0 || ^10.0 || ^11.0\",\n                \"php\": \"^7.3 || ^8.0\"\n            },\n            \"conflict\": {\n                \"davejamesmiller/laravel-breadcrumbs\": \"*\"\n            },\n            \"require-dev\": {\n                \"orchestra/testbench\": \"^6.0 || ^7.0 || ^8.0 || ^9.0\",\n                \"php-coveralls/php-coveralls\": \"^2.7\",\n                \"phpunit/phpunit\": \"^9.5 || ^10.5\",\n                \"spatie/phpunit-snapshot-assertions\": \"^4.2 || ^5.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"aliases\": {\n                        \"Breadcrumbs\": \"Diglactic\\\\Breadcrumbs\\\\Breadcrumbs\"\n                    },\n                    \"providers\": [\n                        \"Diglactic\\\\Breadcrumbs\\\\ServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Diglactic\\\\Breadcrumbs\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sheng Slogar\",\n                    \"email\": \"sheng@diglactic.com\",\n                    \"role\": \"Maintainer\"\n                },\n                {\n                    \"name\": \"Dave James Miller\",\n                    \"email\": \"dave@davejamesmiller.com\",\n                    \"role\": \"Original Creator\"\n                }\n            ],\n            \"description\": \"A simple Laravel-style way to create breadcrumbs.\",\n            \"homepage\": \"https://github.com/diglactic/laravel-breadcrumbs\",\n            \"keywords\": [\n                \"laravel\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/diglactic/laravel-breadcrumbs/issues\",\n                \"source\": \"https://github.com/diglactic/laravel-breadcrumbs/tree/v9.0.0\"\n            },\n            \"time\": \"2024-03-12T00:42:39+00:00\"\n        },\n        {\n            \"name\": \"doctrine/inflector\",\n            \"version\": \"2.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/inflector.git\",\n                \"reference\": \"6d6c96277ea252fc1304627204c3d5e6e15faa3b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/inflector/zipball/6d6c96277ea252fc1304627204c3d5e6e15faa3b\",\n                \"reference\": \"6d6c96277ea252fc1304627204c3d5e6e15faa3b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^12.0 || ^13.0\",\n                \"phpstan/phpstan\": \"^1.12 || ^2.0\",\n                \"phpstan/phpstan-phpunit\": \"^1.4 || ^2.0\",\n                \"phpstan/phpstan-strict-rules\": \"^1.6 || ^2.0\",\n                \"phpunit/phpunit\": \"^8.5 || ^12.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Inflector\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"PHP Doctrine Inflector is a small library that can perform string manipulations with regard to upper/lowercase and singular/plural forms of words.\",\n            \"homepage\": \"https://www.doctrine-project.org/projects/inflector.html\",\n            \"keywords\": [\n                \"inflection\",\n                \"inflector\",\n                \"lowercase\",\n                \"manipulation\",\n                \"php\",\n                \"plural\",\n                \"singular\",\n                \"strings\",\n                \"uppercase\",\n                \"words\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/inflector/issues\",\n                \"source\": \"https://github.com/doctrine/inflector/tree/2.1.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.doctrine-project.org/sponsorship.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpdoctrine\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/doctrine%2Finflector\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2025-08-10T19:31:58+00:00\"\n        },\n        {\n            \"name\": \"doctrine/lexer\",\n            \"version\": \"3.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/lexer.git\",\n                \"reference\": \"31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/lexer/zipball/31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd\",\n                \"reference\": \"31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^12\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^10.5\",\n                \"psalm/plugin-phpunit\": \"^0.18.3\",\n                \"vimeo/psalm\": \"^5.21\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Common\\\\Lexer\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.\",\n            \"homepage\": \"https://www.doctrine-project.org/projects/lexer.html\",\n            \"keywords\": [\n                \"annotations\",\n                \"docblock\",\n                \"lexer\",\n                \"parser\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/lexer/issues\",\n                \"source\": \"https://github.com/doctrine/lexer/tree/3.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.doctrine-project.org/sponsorship.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpdoctrine\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/doctrine%2Flexer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-02-05T11:56:58+00:00\"\n        },\n        {\n            \"name\": \"dompdf/dompdf\",\n            \"version\": \"v2.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dompdf/dompdf.git\",\n                \"reference\": \"c20247574601700e1f7c8dab39310fca1964dc52\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dompdf/dompdf/zipball/c20247574601700e1f7c8dab39310fca1964dc52\",\n                \"reference\": \"c20247574601700e1f7c8dab39310fca1964dc52\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"masterminds/html5\": \"^2.0\",\n                \"phenx/php-font-lib\": \">=0.5.4 <1.0.0\",\n                \"phenx/php-svg-lib\": \">=0.5.2 <1.0.0\",\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"ext-json\": \"*\",\n                \"ext-zip\": \"*\",\n                \"mockery/mockery\": \"^1.3\",\n                \"phpunit/phpunit\": \"^7.5 || ^8 || ^9\",\n                \"squizlabs/php_codesniffer\": \"^3.5\"\n            },\n            \"suggest\": {\n                \"ext-gd\": \"Needed to process images\",\n                \"ext-gmagick\": \"Improves image processing performance\",\n                \"ext-imagick\": \"Improves image processing performance\",\n                \"ext-zlib\": \"Needed for pdf stream compression\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Dompdf\\\\\": \"src/\"\n                },\n                \"classmap\": [\n                    \"lib/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"LGPL-2.1\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"The Dompdf Community\",\n                    \"homepage\": \"https://github.com/dompdf/dompdf/blob/master/AUTHORS.md\"\n                }\n            ],\n            \"description\": \"DOMPDF is a CSS 2.1 compliant HTML to PDF converter\",\n            \"homepage\": \"https://github.com/dompdf/dompdf\",\n            \"support\": {\n                \"issues\": \"https://github.com/dompdf/dompdf/issues\",\n                \"source\": \"https://github.com/dompdf/dompdf/tree/v2.0.8\"\n            },\n            \"time\": \"2024-04-29T13:06:17+00:00\"\n        },\n        {\n            \"name\": \"dragonmantank/cron-expression\",\n            \"version\": \"v3.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dragonmantank/cron-expression.git\",\n                \"reference\": \"8c784d071debd117328803d86b2097615b457500\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dragonmantank/cron-expression/zipball/8c784d071debd117328803d86b2097615b457500\",\n                \"reference\": \"8c784d071debd117328803d86b2097615b457500\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2|^8.0\",\n                \"webmozart/assert\": \"^1.0\"\n            },\n            \"replace\": {\n                \"mtdowling/cron-expression\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/extension-installer\": \"^1.0\",\n                \"phpstan/phpstan\": \"^1.0\",\n                \"phpunit/phpunit\": \"^7.0|^8.0|^9.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Cron\\\\\": \"src/Cron/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Chris Tankersley\",\n                    \"email\": \"chris@ctankersley.com\",\n                    \"homepage\": \"https://github.com/dragonmantank\"\n                }\n            ],\n            \"description\": \"CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\",\n            \"keywords\": [\n                \"cron\",\n                \"schedule\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/dragonmantank/cron-expression/issues\",\n                \"source\": \"https://github.com/dragonmantank/cron-expression/tree/v3.4.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/dragonmantank\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-09T13:47:03+00:00\"\n        },\n        {\n            \"name\": \"egulias/email-validator\",\n            \"version\": \"4.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/egulias/EmailValidator.git\",\n                \"reference\": \"d42c8731f0624ad6bdc8d3e5e9a4524f68801cfa\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/egulias/EmailValidator/zipball/d42c8731f0624ad6bdc8d3e5e9a4524f68801cfa\",\n                \"reference\": \"d42c8731f0624ad6bdc8d3e5e9a4524f68801cfa\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/lexer\": \"^2.0 || ^3.0\",\n                \"php\": \">=8.1\",\n                \"symfony/polyfill-intl-idn\": \"^1.26\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^10.2\",\n                \"vimeo/psalm\": \"^5.12\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"PHP Internationalization Libraries are required to use the SpoofChecking validation\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Egulias\\\\EmailValidator\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Eduardo Gulias Davis\"\n                }\n            ],\n            \"description\": \"A library for validating emails against several RFCs\",\n            \"homepage\": \"https://github.com/egulias/EmailValidator\",\n            \"keywords\": [\n                \"email\",\n                \"emailvalidation\",\n                \"emailvalidator\",\n                \"validation\",\n                \"validator\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/egulias/EmailValidator/issues\",\n                \"source\": \"https://github.com/egulias/EmailValidator/tree/4.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/egulias\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2025-03-06T22:45:56+00:00\"\n        },\n        {\n            \"name\": \"elastic/transport\",\n            \"version\": \"v8.11.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/elastic/elastic-transport-php.git\",\n                \"reference\": \"1d476af5dc0b74530d59b67d5dd96ee39768d5a4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/elastic/elastic-transport-php/zipball/1d476af5dc0b74530d59b67d5dd96ee39768d5a4\",\n                \"reference\": \"1d476af5dc0b74530d59b67d5dd96ee39768d5a4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"composer-runtime-api\": \"^2.0\",\n                \"open-telemetry/api\": \"^1.0\",\n                \"php\": \"^7.4 || ^8.0\",\n                \"php-http/discovery\": \"^1.14\",\n                \"php-http/httplug\": \"^2.3\",\n                \"psr/http-client\": \"^1.0\",\n                \"psr/http-factory\": \"^1.0\",\n                \"psr/http-message\": \"^1.0 || ^2.0\",\n                \"psr/log\": \"^1 || ^2 || ^3\"\n            },\n            \"require-dev\": {\n                \"nyholm/psr7\": \"^1.5\",\n                \"open-telemetry/sdk\": \"^1.0\",\n                \"php-http/mock-client\": \"^1.5\",\n                \"phpstan/phpstan\": \"^2.1\",\n                \"phpunit/phpunit\": \"^9.5\",\n                \"symfony/http-client\": \"^5.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Elastic\\\\Transport\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"HTTP transport PHP library for Elastic products\",\n            \"keywords\": [\n                \"PSR_17\",\n                \"elastic\",\n                \"http\",\n                \"psr-18\",\n                \"psr-7\",\n                \"transport\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/elastic/elastic-transport-php/issues\",\n                \"source\": \"https://github.com/elastic/elastic-transport-php/tree/v8.11.0\"\n            },\n            \"time\": \"2025-04-02T08:20:33+00:00\"\n        },\n        {\n            \"name\": \"elasticsearch/elasticsearch\",\n            \"version\": \"v8.19.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/elastic/elasticsearch-php.git\",\n                \"reference\": \"1771284cb43a7b653634d418b6f5f0ec84ff8a6d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/elastic/elasticsearch-php/zipball/1771284cb43a7b653634d418b6f5f0ec84ff8a6d\",\n                \"reference\": \"1771284cb43a7b653634d418b6f5f0ec84ff8a6d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"elastic/transport\": \"^8.11\",\n                \"guzzlehttp/guzzle\": \"^7.0\",\n                \"php\": \"^7.4 || ^8.0\",\n                \"psr/http-client\": \"^1.0\",\n                \"psr/http-message\": \"^1.1 || ^2.0\",\n                \"psr/log\": \"^1|^2|^3\"\n            },\n            \"require-dev\": {\n                \"ext-yaml\": \"*\",\n                \"ext-zip\": \"*\",\n                \"mockery/mockery\": \"^1.5\",\n                \"nyholm/psr7\": \"^1.5\",\n                \"php-http/mock-client\": \"^1.5\",\n                \"phpstan/phpstan\": \"^2.1\",\n                \"phpunit/phpunit\": \"^9.5\",\n                \"psr/http-factory\": \"^1.0\",\n                \"symfony/finder\": \"~4.0\",\n                \"symfony/http-client\": \"^5.0|^6.0|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Elastic\\\\Elasticsearch\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"PHP Client for Elasticsearch\",\n            \"keywords\": [\n                \"client\",\n                \"elastic\",\n                \"elasticsearch\",\n                \"search\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/elastic/elasticsearch-php/issues\",\n                \"source\": \"https://github.com/elastic/elasticsearch-php/tree/v8.19.0\"\n            },\n            \"time\": \"2025-08-06T16:58:06+00:00\"\n        },\n        {\n            \"name\": \"enshrined/svg-sanitize\",\n            \"version\": \"0.22.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/darylldoyle/svg-sanitizer.git\",\n                \"reference\": \"0afa95ea74be155a7bcd6c6fb60c276c39984500\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/darylldoyle/svg-sanitizer/zipball/0afa95ea74be155a7bcd6c6fb60c276c39984500\",\n                \"reference\": \"0afa95ea74be155a7bcd6c6fb60c276c39984500\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^6.5 || ^8.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"enshrined\\\\svgSanitize\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"GPL-2.0-or-later\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Daryll Doyle\",\n                    \"email\": \"daryll@enshrined.co.uk\"\n                }\n            ],\n            \"description\": \"An SVG sanitizer for PHP\",\n            \"support\": {\n                \"issues\": \"https://github.com/darylldoyle/svg-sanitizer/issues\",\n                \"source\": \"https://github.com/darylldoyle/svg-sanitizer/tree/0.22.0\"\n            },\n            \"time\": \"2025-08-12T10:13:48+00:00\"\n        },\n        {\n            \"name\": \"ezyang/htmlpurifier\",\n            \"version\": \"v4.18.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ezyang/htmlpurifier.git\",\n                \"reference\": \"cb56001e54359df7ae76dc522d08845dc741621b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ezyang/htmlpurifier/zipball/cb56001e54359df7ae76dc522d08845dc741621b\",\n                \"reference\": \"cb56001e54359df7ae76dc522d08845dc741621b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"~5.6.0 || ~7.0.0 || ~7.1.0 || ~7.2.0 || ~7.3.0 || ~7.4.0 || ~8.0.0 || ~8.1.0 || ~8.2.0 || ~8.3.0 || ~8.4.0\"\n            },\n            \"require-dev\": {\n                \"cerdic/css-tidy\": \"^1.7 || ^2.0\",\n                \"simpletest/simpletest\": \"dev-master\"\n            },\n            \"suggest\": {\n                \"cerdic/css-tidy\": \"If you want to use the filter 'Filter.ExtractStyleBlocks'.\",\n                \"ext-bcmath\": \"Used for unit conversion and imagecrash protection\",\n                \"ext-iconv\": \"Converts text to and from non-UTF-8 encodings\",\n                \"ext-tidy\": \"Used for pretty-printing HTML\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"library/HTMLPurifier.composer.php\"\n                ],\n                \"psr-0\": {\n                    \"HTMLPurifier\": \"library/\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/library/HTMLPurifier/Language/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"LGPL-2.1-or-later\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Edward Z. Yang\",\n                    \"email\": \"admin@htmlpurifier.org\",\n                    \"homepage\": \"http://ezyang.com\"\n                }\n            ],\n            \"description\": \"Standards compliant HTML filter written in PHP\",\n            \"homepage\": \"http://htmlpurifier.org/\",\n            \"keywords\": [\n                \"html\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/ezyang/htmlpurifier/issues\",\n                \"source\": \"https://github.com/ezyang/htmlpurifier/tree/v4.18.0\"\n            },\n            \"time\": \"2024-11-01T03:51:45+00:00\"\n        },\n        {\n            \"name\": \"facade/ignition-contracts\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/facade/ignition-contracts.git\",\n                \"reference\": \"3c921a1cdba35b68a7f0ccffc6dffc1995b18267\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/facade/ignition-contracts/zipball/3c921a1cdba35b68a7f0ccffc6dffc1995b18267\",\n                \"reference\": \"3c921a1cdba35b68a7f0ccffc6dffc1995b18267\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.3|^8.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"^v2.15.8\",\n                \"phpunit/phpunit\": \"^9.3.11\",\n                \"vimeo/psalm\": \"^3.17.1\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Facade\\\\IgnitionContracts\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\",\n                    \"homepage\": \"https://flareapp.io\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Solution contracts for Ignitio\n\n... [تم قطع المحتوى - الطول الأصلي: 505.19 KB]"
                    }
                }
            ],
            "statistics": {
                "fileCount": 2,
                "totalSize": 523227,
                "totalSizeFormatted": "510.96 KB"
            }
        },
        "app": {
            "categoryInfo": {
                "displayName": "التطبيق الأساسي",
                "description": "ملفات التطبيق الرئيسية",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto\\app",
                "extensions": [
                    "php"
                ],
                "maxDepth": 4,
                "priority": 2,
                "priorityPatterns": [
                    "Http/Controllers",
                    "Models",
                    "Services"
                ]
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": "ProjectFilesJson.php",
                        "relativePath": "app\\Console\\Commands\\ProjectFilesJson.php",
                        "extension": "php",
                        "size": 23886,
                        "sizeFormatted": "23.33 KB",
                        "contentLength": 23886,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Support\\Facades\\File;\nuse Carbon\\Carbon;\n\nclass ProjectFilesJson extends Command\n{\n    protected $signature = 'project:files-json {--path=storage/files_dump.json} {--max-file-size=512} {--exclude-large-dirs} {--limit=500}';\n    protected $description = 'Generate a JSON dump of specific project files with strict 31MB limit';\n\n    // Memory and performance settings - محدث للحد من 31MB\n    private const MAX_FILE_SIZE_KB = 512; // 512KB default (مخفض من 1MB)\n    private const MEMORY_LIMIT = '512M'; // زيادة الذاكرة المتاحة للمعالجة\n    private const CHUNK_SIZE = 50; // تقليل حجم المجموعات\n    private const MAX_OUTPUT_SIZE_MB = 31; // الحد الأقصى لحجم الملف النهائي\n    private const MAX_CONTENT_LENGTH = 50000; // تقليل الحد الأقصى لطول المحتوى (من 100KB إلى 50KB)\n\n    // Directories to exclude - محسن\n    private const EXCLUDED_DIRS = [\n        'node_modules',\n        'vendor',\n        'storage/logs',\n        'storage/framework/cache',\n        'storage/framework/sessions',\n        'storage/framework/views',\n        'bootstrap/cache',\n        '.git',\n        'public/storage',\n        'storage/app/public',\n        'storage/debugbar', // إضافة\n        'storage/clockwork', // إضافة\n        '.vscode',\n        '.idea',\n        'tests/Browser/screenshots'\n    ];\n\n    private int $currentOutputSize = 0; // تتبع حجم البيانات المجمعة\n    private int $maxOutputBytes;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->maxOutputBytes = self::MAX_OUTPUT_SIZE_MB * 1024 * 1024; // تحويل إلى بايت\n    }\n\n    public function handle()\n    {\n        // Set memory limit\n        ini_set('memory_limit', self::MEMORY_LIMIT);\n        \n        $jsonPath = base_path($this->option('path'));\n        $maxFileSizeKb = min((int) $this->option('max-file-size'), self::MAX_FILE_SIZE_KB);\n        $excludeLargeDirs = true; // دائماً مفعل\n        $fileLimit = min((int) $this->option('limit'), 500); // حد أقصى 500 ملف لكل فئة\n\n        try {\n            $this->info(\"🔄 بدء جمع ملفات المشروع (محدود بـ 31MB)...\");\n            $this->info(\"📏 الحد الأقصى لحجم الملف: {$maxFileSizeKb}KB\");\n            $this->info(\"📊 حد الملفات: {$fileLimit} ملف لكل فئة\");\n            $this->info(\"🎯 الحد الأقصى لحجم الإخراج: \" . self::MAX_OUTPUT_SIZE_MB . \"MB\");\n\n            $projectData = $this->buildProjectStructure($maxFileSizeKb, $excludeLargeDirs, $fileLimit);\n\n            // التحقق من جمع البيانات\n            if (empty($projectData) || empty($projectData['filesByCategory'])) {\n                $this->error(\"❌ لم يتم جمع أي بيانات. تحقق من وجود المسارات.\");\n                return 1;\n            }\n\n            // إنشاء المجلد إذا لم يكن موجوداً\n            $directory = dirname($jsonPath);\n            if (!File::exists($directory)) {\n                File::makeDirectory($directory, 0755, true);\n            }\n\n            // حفظ JSON مع التحقق من الحجم\n            $this->saveJsonWithSizeControl($projectData, $jsonPath);\n\n            $finalSize = filesize($jsonPath);\n            $this->info(\"📦 تم إنشاء ملف المشروع بنجاح!\");\n            $this->info(\"📍 المكان: $jsonPath\");\n            $this->info(\"📊 إجمالي الملفات: \" . $projectData['summary']['totalFiles']);\n            $this->info(\"📈 حجم البيانات: \" . $this->formatBytes($projectData['summary']['totalSize']));\n            $this->info(\"📄 حجم ملف JSON: \" . $this->formatBytes($finalSize));\n            \n            if ($finalSize > $this->maxOutputBytes) {\n                $this->warn(\"⚠️  تحذير: حجم الملف يتجاوز 31MB\");\n            } else {\n                $this->info(\"✅ الحجم ضمن الحد المسموح (31MB)\");\n            }\n\n            return 0;\n        } catch (\\Exception $e) {\n            $this->error(\"❌ حدث خطأ: \" . $e->getMessage());\n            $this->error(\"🔍 تفاصيل الخطأ: \" . $e->getTraceAsString());\n            return 1;\n        }\n    }\n\n    private function buildProjectStructure(int $maxFileSizeKb, bool $excludeLargeDirs, int $fileLimit): array\n    {\n        $startTime = microtime(true);\n        $totalFiles = 0;\n        $totalSize = 0;\n        $skippedFiles = 0;\n\n        // تحسين مصادر الملفات - أولوية للملفات المهمة\n        $sources = [\n            'config' => [\n                'displayName' => 'ملفات الإعدادات',\n                'description' => 'ملفات إعدادات التطبيق',\n                'path' => base_path('config'),\n                'extensions' => ['php'],\n                'maxDepth' => 2,\n                'priority' => 1\n            ],\n            'routes' => [\n                'displayName' => 'ملفات المسارات',\n                'description' => 'تعريفات مسارات التطبيق',\n                'path' => base_path('routes'),\n                'extensions' => ['php'],\n                'maxDepth' => 2,\n                'priority' => 1\n            ],\n            'app' => [\n                'displayName' => 'التطبيق الأساسي',\n                'description' => 'ملفات التطبيق الرئيسية',\n                'path' => base_path('app'),\n                'extensions' => ['php'],\n                'maxDepth' => 4,\n                'priority' => 2,\n                'priorityPatterns' => ['Http/Controllers', 'Models', 'Services']\n            ],\n            'bagisto_packages' => [\n                'displayName' => 'حزم Bagisto',\n                'description' => 'ملفات حزم Bagisto المهمة',\n                'path' => base_path('packages/Webkul/Shop'),\n                'extensions' => ['php', 'blade.php'],\n                'maxDepth' => 3,\n                'priority' => 2,\n                'priorityPatterns' => ['src/Config', 'src/Http/Controllers', 'src/Models', 'src/Resources/views']\n            ],\n            'database' => [\n                'displayName' => 'ملفات قاعدة البيانات',\n                'description' => 'الهجرات والبذور والمصانع',\n                'path' => base_path('database'),\n                'extensions' => ['php'],\n                'maxDepth' => 3,\n                'priority' => 3\n            ],\n            'env' => [\n                'displayName' => 'ملفات البيئة',\n                'description' => 'ملفات إعدادات البيئة',\n                'path' => base_path(),\n                'extensions' => [],\n                'specificFiles' => ['.env.example'],\n                'priority' => 1\n            ],\n            'composer' => [\n                'displayName' => 'إعدادات Composer',\n                'description' => 'ملفات إدارة التبعيات',\n                'path' => base_path(),\n                'extensions' => [],\n                'specificFiles' => ['composer.json', 'composer.lock'],\n                'priority' => 1\n            ]\n        ];\n\n        // ترتيب المصادر حسب الأولوية\n        uasort($sources, function($a, $b) {\n            return ($a['priority'] ?? 99) <=> ($b['priority'] ?? 99);\n        });\n\n        $filesByCategory = [];\n\n        foreach ($sources as $categoryKey => $categoryInfo) {\n            // التحقق من عدم تجاوز الحد الأقصى للحجم\n            if ($this->currentOutputSize >= $this->maxOutputBytes * 0.8) { // توقف عند 80% من الحد\n                $this->warn(\"⚠️  تم الوصول لـ 80% من الحد الأقصى، توقف المعالجة\");\n                break;\n            }\n\n            $this->info(\"🔍 فحص: \" . $categoryInfo['displayName']);\n\n            if (!File::exists($categoryInfo['path'])) {\n                $this->warn(\"⚠️  المسار غير موجود: \" . $categoryInfo['path']);\n                continue;\n            }\n\n            $categoryFiles = [];\n            $categorySize = 0;\n            $categoryFileCount = 0;\n\n            try {\n                // معالجة الملفات المحددة\n                if (isset($categoryInfo['specificFiles'])) {\n                    foreach ($categoryInfo['specificFiles'] as $specificFile) {\n                        if ($this->currentOutputSize >= $this->maxOutputBytes * 0.8) break;\n                        \n                        $filePath = $categoryInfo['path'] . DIRECTORY_SEPARATOR . $specificFile;\n                        if (File::exists($filePath)) {\n                            $fileData = $this->processFileOptimized($filePath, $maxFileSizeKb);\n                            if ($fileData && $this->canAddFile($fileData)) {\n                                $categoryFiles[] = $fileData;\n                                $categorySize += $fileData['fileInfo']['size'];\n                                $categoryFileCount++;\n                                $this->updateOutputSize($fileData);\n                            }\n                        }\n                    }\n                } else {\n                    // فحص المجلدات مع التحسينات\n                    $files = $this->getOptimizedFileList(\n                        $categoryInfo['path'],\n                        $categoryInfo['extensions'],\n                        $excludeLargeDirs,\n                        $categoryInfo['maxDepth'] ?? 10,\n                        $categoryInfo['priorityPatterns'] ?? []\n                    );\n\n                    // تحديد عدد الملفات المسموح حسب الأولوية\n                    $allowedFiles = match($categoryInfo['priority'] ?? 3) {\n                        1 => $fileLimit, // أولوية عالية - العدد الكامل\n                        2 => (int)($fileLimit * 0.7), // أولوية متوسطة - 70%\n                        default => (int)($fileLimit * 0.5) // أولوية منخفضة - 50%\n                    };\n\n                    $files = array_slice($files, 0, $allowedFiles);\n\n                    $this->info(\"📁 معالجة \" . count($files) . \" ملف في \" . $categoryInfo['displayName']);\n\n                    // معالجة الملفات في مجموعات\n                    $chunks = array_chunk($files, self::CHUNK_SIZE);\n\n                    foreach ($chunks as $chunk) {\n                        if ($this->currentOutputSize >= $this->maxOutputBytes * 0.8) break;\n\n                        foreach ($chunk as $filePath) {\n                            if ($categoryFileCount >= $allowedFiles || \n                                $this->currentOutputSize >= $this->maxOutputBytes * 0.8) {\n                                break 2;\n                            }\n\n                            $fileData = $this->processFileOptimized($filePath, $maxFileSizeKb);\n                            if ($fileData && $this->canAddFile($fileData)) {\n                                $categoryFiles[] = $fileData;\n                                $categorySize += $fileData['fileInfo']['size'];\n                                $categoryFileCount++;\n                                $this->updateOutputSize($fileData);\n                            } else {\n                                $skippedFiles++;\n                            }\n                        }\n\n                        // تنظيف الذاكرة\n                        if (memory_get_usage() > 400 * 1024 * 1024) { // 400MB\n                            gc_collect_cycles();\n                        }\n                    }\n                }\n\n                $totalFiles += $categoryFileCount;\n                $totalSize += $categorySize;\n\n            } catch (\\Exception $e) {\n                $this->error(\"❌ خطأ في فحص \" . $categoryInfo['path'] . \": \" . $e->getMessage());\n            }\n\n            $filesByCategory[$categoryKey] = [\n                'categoryInfo' => $categoryInfo,\n                'files' => $categoryFiles,\n                'statistics' => [\n                    'fileCount' => $categoryFileCount,\n                    'totalSize' => $categorySize,\n                    'totalSizeFormatted' => $this->formatBytes($categorySize)\n                ]\n            ];\n\n            // تفريغ متغيرات الفئة من الذاكرة\n            unset($categoryFiles);\n            \n            $this->info(\"📊 تمت معالجة {$categoryFileCount} ملف - الحجم الحالي: \" . $this->formatBytes($this->currentOutputSize));\n        }\n\n        $endTime = microtime(true);\n        $executionTime = round(($endTime - $startTime) * 1000, 2);\n\n        if ($skippedFiles > 0) {\n            $this->warn(\"⚠️  تم تخطي {$skippedFiles} ملف (كبير جداً أو غير قابل للقراءة)\");\n        }\n\n        return [\n            'projectInfo' => [\n                'projectName' => config('app.name', 'مشروع Laravel'),\n                'laravelVersion' => app()->version(),\n                'phpVersion' => PHP_VERSION,\n                'generatedAt' => Carbon::now()->toISOString(),\n                'generatedBy' => 'Laravel Artisan Command: project:files-json (محسن - 31MB)',\n                'executionTimeMs' => $executionTime,\n                'optimizations' => [\n                    'maxFileSizeKb' => $maxFileSizeKb,\n                    'maxOutputSizeMb' => self::MAX_OUTPUT_SIZE_MB,\n                    'excludedLargeDirs' => $excludeLargeDirs,\n                    'fileLimit' => $fileLimit,\n                    'skippedFiles' => $skippedFiles,\n                    'maxContentLength' => self::MAX_CONTENT_LENGTH\n                ]\n            ],\n            'summary' => [\n                'totalFiles' => $totalFiles,\n                'totalSize' => $totalSize,\n                'totalSizeFormatted' => $this->formatBytes($totalSize),\n                'categoriesCount' => count($filesByCategory),\n                'estimatedJsonSize' => $this->formatBytes($this->currentOutputSize),\n                'memoryUsage' => $this->formatBytes(memory_get_peak_usage(true))\n            ],\n            'filesByCategory' => $filesByCategory\n        ];\n    }\n\n    private function canAddFile(array $fileData): bool\n    {\n        // تقدير حجم الملف في JSON (تقريبي)\n        $estimatedJsonSize = strlen(json_encode($fileData, JSON_UNESCAPED_SLASHES));\n        return ($this->currentOutputSize + $estimatedJsonSize) < ($this->maxOutputBytes * 0.8);\n    }\n\n    private function updateOutputSize(array $fileData): void\n    {\n        // تحديث الحجم المقدر للإخراج\n        $estimatedJsonSize = strlen(json_encode($fileData, JSON_UNESCAPED_SLASHES));\n        $this->currentOutputSize += $estimatedJsonSize;\n    }\n\n    private function getOptimizedFileList(string $path, array $extensions, bool $excludeLargeDirs, int $maxDepth, array $priorityPatterns): array\n    {\n        $files = [];\n        $priorityFiles = [];\n\n        try {\n            $iterator = new \\RecursiveIteratorIterator(\n                new \\RecursiveDirectoryIterator($path, \\RecursiveDirectoryIterator::SKIP_DOTS),\n                \\RecursiveIteratorIterator::SELF_FIRST\n            );\n\n            $iterator->setMaxDepth($maxDepth);\n\n            foreach ($iterator as $file) {\n                if (!$file->isFile()) continue;\n\n                $filePath = $file->getPathname();\n                $relativePath = str_replace($path . DIRECTORY_SEPARATOR, '', $filePath);\n\n                // تخطي المجلدات المستبعدة\n                if ($this->shouldExcludeFile($relativePath)) {\n                    continue;\n                }\n\n                // فحص امتداد الملف\n                if (!$this->isValidFileExtension($file, $extensions)) {\n                    continue;\n                }\n\n                // فحص حجم الملف قبل الإضافة (حد أقصى 5MB لكل ملف)\n                if ($file->getSize() > 5 * 1024 * 1024) {\n                    continue;\n                }\n\n                // إعطاء أولوية للملفات المهمة\n                if ($this->isPriorityFile($relativePath, $priorityPatterns)) {\n                    $priorityFiles[] = $filePath;\n                } else {\n                    $files[] = $filePath;\n                }\n            }\n        } catch (\\Exception $e) {\n            $this->warn(\"⚠️  خطأ في قراءة المجلد $path: \" . $e->getMessage());\n        }\n\n        // إرجاع الملفات ذات الأولوية أولاً\n        return array_merge($priorityFiles, $files);\n    }\n\n    private function shouldExcludeFile(string $relativePath): bool\n    {\n        foreach (self::EXCLUDED_DIRS as $excludedDir) {\n            if (str_starts_with($relativePath, $excludedDir)) {\n                return true;\n            }\n        }\n        \n        // استبعاد ملفات إضافية\n        $excludedPatterns = [\n            'storage/framework/',\n            'bootstrap/cache/',\n            '.phpunit.result.cache',\n            'npm-debug.log',\n            'yarn-error.log'\n        ];\n        \n        foreach ($excludedPatterns as $pattern) {\n            if (str_contains($relativePath, $pattern)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    private function isPriorityFile(string $relativePath, array $priorityPatterns): bool\n    {\n        foreach ($priorityPatterns as $pattern) {\n            if (str_contains($relativePath, $pattern)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function processFileOptimized(string $filePath, int $maxFileSizeKb): ?array\n    {\n        try {\n            if (!File::exists($filePath)) {\n                return null;\n            }\n\n            $fileInfo = new \\SplFileInfo($filePath);\n            $fileSize = $fileInfo->getSize();\n\n            // تخطي الملفات الكبيرة جداً\n            if ($fileSize > $maxFileSizeKb * 1024) {\n                return null;\n            }\n\n            $content = file_get_contents($filePath);\n            if ($content === false) {\n                return null;\n            }\n\n            // قطع المحتوى إذا كان كبيراً جداً\n            $originalLength = strlen($content);\n            if ($originalLength > self::MAX_CONTENT_LENGTH) {\n                $content = substr($content, 0, self::MAX_CONTENT_LENGTH) . \n                          \"\\n\\n... [تم قطع المحتوى - الطول الأصلي: \" . $this->formatBytes($originalLength) . \"]\";\n            }\n\n            // تنظيف وتحويل المحتوى إلى UTF-8\n            $cleanContent = $this->cleanContent($content);\n\n            return [\n                'fileInfo' => [\n                    'fileName' => $fileInfo->getFilename(),\n                    'relativePath' => str_replace(base_path() . DIRECTORY_SEPARATOR, '', $filePath),\n                    'extension' => $fileInfo->getExtension(),\n                    'size' => $fileSize,\n                    'sizeFormatted' => $this->formatBytes($fileSize),\n                    'contentLength' => strlen($cleanContent),\n                    'truncated' => $originalLength > self::MAX_CONTENT_LENGTH\n                ],\n                'fileContent' => [\n                    'content' => $cleanContent,\n                ]\n            ];\n        } catch (\\Exception $e) {\n            return null;\n        }\n    }\n\n    private function cleanContent(string $content): string\n    {\n        // تنظيف المحتوى وإزالة الأحرف غير المرغوبة\n        $content = mb_convert_encoding($content, 'UTF-8', 'UTF-8');\n        \n        // إزالة الأحرف التي قد تسبب مشاكل في JSON\n        $content = preg_replace('/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/', '', $content);\n        \n        return $content;\n    }\n\n    private function saveJsonWithSizeControl(array $data, string $path): void\n    {\n        // محاولة حفظ البيانات مع التحكم في الحجم\n        $tempPath = $path . '.tmp';\n        \n        $handle = fopen($tempPath, 'w');\n        if (!$handle) {\n            throw new \\Exception(\"لا يمكن فتح الملف للكتابة: $tempPath\");\n        }\n\n        try {\n            $options = JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PARTIAL_OUTPUT_ON_ERROR;\n            \n            // حفظ البيانات الأساسية أولاً\n            $basicData = [\n                'projectInfo' => $data['projectInfo'],\n                'summary' => $data['summary']\n            ];\n            \n            $jsonContent = json_encode($basicData, $options);\n            if ($jsonContent === false) {\n                throw new \\Exception(\"فشل في تشفير JSON الأساسي: \" . json_last_error_msg());\n            }\n            \n            // إضافة الملفات تدريجياً مع فحص الحجم\n            $currentSize = strlen($jsonContent);\n            $processedCategories = [];\n            \n            foreach ($data['filesByCategory'] as $categoryKey => $categoryData) {\n                $categoryJson = json_encode($categoryData, $options);\n                $categorySize = strlen($categoryJson);\n                \n                if ($currentSize + $categorySize < $this->maxOutputBytes) {\n                    $processedCategories[$categoryKey] = $categoryData;\n                    $currentSize += $categorySize;\n                } else {\n                    $this->warn(\"⚠️  تم تخطي فئة '{$categoryData['categoryInfo']['displayName']}' لتجنب تجاوز 31MB\");\n                    break;\n                }\n            }\n            \n            // حفظ البيانات النهائية\n            $finalData = array_merge($basicData, ['filesByCategory' => $processedCategories]);\n            $finalJson = json_encode($finalData, $options);\n            \n            if ($finalJson === false) {\n                throw new \\Exception(\"فشل في تشفير JSON النهائي: \" . json_last_error_msg());\n            }\n            \n            fwrite($handle, $finalJson);\n            fclose($handle);\n            \n            // نقل الملف المؤقت إلى المكان النهائي\n            if (file_exists($path)) {\n                unlink($path);\n            }\n            rename($tempPath, $path);\n            \n        } catch (\\Exception $e) {\n            fclose($handle);\n            if (file_exists($tempPath)) {\n                unlink($tempPath);\n            }\n            throw $e;\n        }\n    }\n\n    private function isValidFileExtension(\\SplFileInfo $file, array $allowedExtensions): bool\n    {\n        if (empty($allowedExtensions)) {\n            return true;\n        }\n\n        $extension = strtolower($file->getExtension());\n        $fileName = $file->getFilename();\n\n        // معالجة ملفات blade.php\n        if (str_ends_with(strtolower($fileName), '.blade.php') && in_array('blade.php', $allowedExtensions)) {\n            return true;\n        }\n\n        return in_array($extension, array_map('strtolower', $allowedExtensions));\n    }\n\n    private function formatBytes(int $bytes): string\n    {\n        if ($bytes === 0) return '0 B';\n        \n        $units = ['B', 'KB', 'MB', 'GB'];\n        $bytes = max($bytes, 0);\n        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));\n        $pow = min($pow, count($units) - 1);\n\n        $bytes /= pow(1024, $pow);\n\n        return round($bytes, 2) . ' ' . $units[$pow];\n    }\n}"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Controller.php",
                        "relativePath": "app\\Http\\Controllers\\Controller.php",
                        "extension": "php",
                        "size": 77,
                        "sizeFormatted": "77 B",
                        "contentLength": 77,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nabstract class Controller\n{\n    //\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "EncryptCookies.php",
                        "relativePath": "app\\Http\\Middleware\\EncryptCookies.php",
                        "extension": "php",
                        "size": 333,
                        "sizeFormatted": "333 B",
                        "contentLength": 333,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Cookie\\Middleware\\EncryptCookies as Middleware;\n\nclass EncryptCookies extends Middleware\n{\n    /**\n     * The names of the cookies that should not be encrypted.\n     *\n     * @var array\n     */\n    protected $except = [\n        'sidebar_collapsed',\n        'dark_mode',\n    ];\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "AppServiceProvider.php",
                        "relativePath": "app\\Providers\\AppServiceProvider.php",
                        "extension": "php",
                        "size": 990,
                        "sizeFormatted": "990 B",
                        "contentLength": 990,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace App\\Providers;\n\nuse Barryvdh\\Debugbar\\Facades\\Debugbar;\nuse Illuminate\\Support\\Facades\\Artisan;\nuse Illuminate\\Support\\Facades\\ParallelTesting;\nuse Illuminate\\Support\\Facades\\Request;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $allowedIPs = array_map('trim', explode(',', config('app.debug_allowed_ips')));\n\n        $allowedIPs = array_filter($allowedIPs);\n\n        if (empty($allowedIPs)) {\n            return;\n        }\n\n        if (in_array(Request::ip(), $allowedIPs)) {\n            Debugbar::enable();\n        } else {\n            Debugbar::disable();\n        }\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        ParallelTesting::setUpTestDatabase(function (string $database, int $token) {\n            Artisan::call('db:seed');\n        });\n    }\n}\n"
                    }
                }
            ],
            "statistics": {
                "fileCount": 4,
                "totalSize": 25286,
                "totalSizeFormatted": "24.69 KB"
            }
        },
        "bagisto_packages": {
            "categoryInfo": {
                "displayName": "حزم Bagisto",
                "description": "ملفات حزم Bagisto المهمة",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto\\packages/Webkul/Shop",
                "extensions": [
                    "php",
                    "blade.php"
                ],
                "maxDepth": 3,
                "priority": 2,
                "priorityPatterns": [
                    "src/Config",
                    "src/Http/Controllers",
                    "src/Models",
                    "src/Resources/views"
                ]
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": "Large.php",
                        "relativePath": "packages/Webkul/Shop\\src\\CacheFilters\\Large.php",
                        "extension": "php",
                        "size": 1254,
                        "sizeFormatted": "1.22 KB",
                        "contentLength": 1254,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\CacheFilters;\n\nuse Illuminate\\Support\\Str;\nuse Intervention\\Image\\Filters\\FilterInterface;\nuse Intervention\\Image\\Image;\n\nclass Large implements FilterInterface\n{\n    /**\n     * Apply filter.\n     *\n     * @return \\Intervention\\Image\\Image\n     */\n    public function applyFilter(Image $image)\n    {\n        /**\n         * If the current url is product image\n         */\n        if (Str::contains(url()->current(), '/product')) {\n            $width = core()->getConfigData('catalog.products.cache_large_image.width') != ''\n                ? core()->getConfigData('catalog.products.cache_large_image.width')\n                : 560;\n\n            $height = core()->getConfigData('catalog.products.cache_large_image.height') != ''\n                ? core()->getConfigData('catalog.products.cache_large_image.height')\n                : 610;\n\n            return $image->fit($width, $height);\n        } elseif (Str::contains(url()->current(), '/category')) {\n            return $image->fit(165, 165);\n        } elseif (Str::contains(url()->current(), '/attribute_option')) {\n            return $image->fit(330, 330);\n        }\n\n        /**\n         * Slider image dimensions\n         */\n        return $image->fit(1280, 467);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Medium.php",
                        "relativePath": "packages/Webkul/Shop\\src\\CacheFilters\\Medium.php",
                        "extension": "php",
                        "size": 1259,
                        "sizeFormatted": "1.23 KB",
                        "contentLength": 1259,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\CacheFilters;\n\nuse Illuminate\\Support\\Str;\nuse Intervention\\Image\\Filters\\FilterInterface;\nuse Intervention\\Image\\Image;\n\nclass Medium implements FilterInterface\n{\n    /**\n     * Apply filter.\n     *\n     * @return \\Intervention\\Image\\Image\n     */\n    public function applyFilter(Image $image)\n    {\n        /**\n         * If the current url is product image\n         */\n        if (Str::contains(url()->current(), '/product')) {\n            $width = core()->getConfigData('catalog.products.cache_medium_image.width') != ''\n                ? core()->getConfigData('catalog.products.cache_medium_image.width')\n                : 350;\n\n            $height = core()->getConfigData('catalog.products.cache_medium_image.height') != ''\n                ? core()->getConfigData('catalog.products.cache_medium_image.height')\n                : 360;\n\n            return $image->fit($width, $height);\n        } elseif (Str::contains(url()->current(), '/category')) {\n            return $image->fit(110, 110);\n        } elseif (Str::contains(url()->current(), '/attribute_option')) {\n            return $image->fit(210, 210);\n        }\n\n        /**\n         * Slider image dimensions\n         */\n        return $image->fit(1024, 372);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Small.php",
                        "relativePath": "packages/Webkul/Shop\\src\\CacheFilters\\Small.php",
                        "extension": "php",
                        "size": 1237,
                        "sizeFormatted": "1.21 KB",
                        "contentLength": 1237,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\CacheFilters;\n\nuse Illuminate\\Support\\Str;\nuse Intervention\\Image\\Filters\\FilterInterface;\nuse Intervention\\Image\\Image;\n\nclass Small implements FilterInterface\n{\n    /**\n     * Apply filter.\n     *\n     * @return \\Intervention\\Image\\Image\n     */\n    public function applyFilter(Image $image)\n    {\n        /**\n         * If the current url is product image\n         */\n        if (Str::contains(url()->current(), '/product')) {\n            $width = core()->getConfigData('catalog.products.cache_small_image.width')\n                ? core()->getConfigData('catalog.products.cache_small_image.width')\n                : 100;\n\n            $height = core()->getConfigData('catalog.products.cache_small_image.height')\n                ? core()->getConfigData('catalog.products.cache_small_image.height')\n                : 100;\n\n            return $image->fit($width, $height);\n        } elseif (Str::contains(url()->current(), '/category')) {\n            return $image->fit(80, 80);\n        } elseif (Str::contains(url()->current(), '/attribute_option')) {\n            return $image->fit(60, 60);\n        }\n\n        /**\n         * Slider image dimensions\n         */\n        return $image->fit(525, 191);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "menu.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Config\\menu.php",
                        "extension": "php",
                        "size": 1738,
                        "sizeFormatted": "1.7 KB",
                        "contentLength": 1738,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    [\n        'key'   => 'account',\n        'name'  => 'shop::app.layouts.my-account',\n        'route' => 'shop.customers.account.profile.index',\n        'icon'  => '',\n        'sort'  => 1,\n    ], [\n        'key'   => 'account.profile',\n        'name'  => 'shop::app.layouts.profile',\n        'route' => 'shop.customers.account.profile.index',\n        'icon'  => 'icon-users',\n        'sort'  => 1,\n    ], [\n        'key'   => 'account.address',\n        'name'  => 'shop::app.layouts.address',\n        'route' => 'shop.customers.account.addresses.index',\n        'icon'  => 'icon-location',\n        'sort'  => 2,\n    ], [\n        'key'   => 'account.orders',\n        'name'  => 'shop::app.layouts.orders',\n        'route' => 'shop.customers.account.orders.index',\n        'icon'  => 'icon-orders',\n        'sort'  => 3,\n    ], [\n        'key'   => 'account.downloadables',\n        'name'  => 'shop::app.layouts.downloadable-products',\n        'route' => 'shop.customers.account.downloadable_products.index',\n        'icon'  => 'icon-download',\n        'sort'  => 4,\n    ], [\n        'key'   => 'account.reviews',\n        'name'  => 'shop::app.layouts.reviews',\n        'route' => 'shop.customers.account.reviews.index',\n        'icon'  => 'icon-star',\n        'sort'  => 5,\n    ], [\n        'key'   => 'account.wishlist',\n        'name'  => 'shop::app.layouts.wishlist',\n        'route' => 'shop.customers.account.wishlist.index',\n        'icon'  => 'icon-heart',\n        'sort'  => 6,\n    ], [\n        'key'   => 'account.gdpr_data_request',\n        'name'  => 'shop::app.layouts.gdpr-request',\n        'route' => 'shop.customers.account.gdpr.index',\n        'icon'  => 'icon-gdpr-safe',\n        'sort'  => 7,\n    ],\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "DownloadableProductDataGrid.php",
                        "relativePath": "packages/Webkul/Shop\\src\\DataGrids\\DownloadableProductDataGrid.php",
                        "extension": "php",
                        "size": 5446,
                        "sizeFormatted": "5.32 KB",
                        "contentLength": 5446,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\DataGrids;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Webkul\\DataGrid\\DataGrid;\n\nclass DownloadableProductDataGrid extends DataGrid\n{\n    /**\n     * Downloadable Product status Expired.\n     */\n    const STATUS_EXPIRED = 'expired';\n\n    /**\n     * Downloadable Product status Pending.\n     */\n    const STATUS_PENDING = 'pending';\n\n    /**\n     * Downloadable Product status Available\n     */\n    const STATUS_AVAILABLE = 'available';\n\n    /**\n     * Prepare query builder.\n     *\n     * @return void\n     */\n    public function prepareQueryBuilder()\n    {\n        $queryBuilder = DB::table('downloadable_link_purchased')\n            ->distinct()\n            ->leftJoin('orders', 'downloadable_link_purchased.order_id', '=', 'orders.id')\n            ->leftJoin('invoices', 'downloadable_link_purchased.order_id', '=', 'invoices.order_id')\n            ->addSelect('downloadable_link_purchased.*', 'invoices.state as invoice_state', 'orders.increment_id')\n            ->addSelect(DB::raw('('.DB::getTablePrefix().'downloadable_link_purchased.download_bought - '.DB::getTablePrefix().'downloadable_link_purchased.download_canceled - '.DB::getTablePrefix().'downloadable_link_purchased.download_used) as remaining_downloads'))\n            ->where('downloadable_link_purchased.customer_id', auth()->guard('customer')->user()->id);\n\n        $this->addFilter('status', 'downloadable_link_purchased.status');\n        $this->addFilter('created_at', 'downloadable_link_purchased.created_at');\n        $this->addFilter('increment_id', 'orders.increment_id');\n\n        return $queryBuilder;\n    }\n\n    /**\n     * Add columns.\n     *\n     * @return void\n     */\n    public function prepareColumns()\n    {\n        $this->addColumn([\n            'index'      => 'increment_id',\n            'label'      => trans('shop::app.customers.account.downloadable-products.orderId'),\n            'type'       => 'string',\n            'filterable' => true,\n            'sortable'   => true,\n        ]);\n\n        $this->addColumn([\n            'index'      => 'product_name',\n            'label'      => trans('shop::app.customers.account.downloadable-products.title'),\n            'type'       => 'string',\n            'searchable' => true,\n            'filterable' => true,\n            'sortable'   => true,\n            'closure'    => function ($row) {\n                if (\n                    $row->status == 'pending'\n                    || $row->status == 'expired'\n                    || $row->invoice_state !== 'paid'\n                ) {\n                    return $row->product_name;\n                }\n\n                return '<a class=\"text-blue-600\" href=\"'.route('shop.customers.account.downloadable_products.download', $row->id).'\" target=\"_blank\">'.$row->product_name.'</a>';\n            },\n        ]);\n\n        $this->addColumn([\n            'index'           => 'created_at',\n            'label'           => trans('shop::app.customers.account.downloadable-products.date'),\n            'type'            => 'date',\n            'filterable'      => true,\n            'filterable_type' => 'date_range',\n            'sortable'        => true,\n        ]);\n\n        $this->addColumn([\n            'index'              => 'status',\n            'label'              => trans('shop::app.customers.account.downloadable-products.status'),\n            'type'               => 'string',\n            'filterable'         => true,\n            'filterable_type'    => 'dropdown',\n            'filterable_options' => [\n                [\n                    'label' => trans('shop::app.customers.account.downloadable-products.expired'),\n                    'value' => self::STATUS_EXPIRED,\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.downloadable-products.pending'),\n                    'value' => self::STATUS_PENDING,\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.downloadable-products.available'),\n                    'value' => self::STATUS_AVAILABLE,\n                ],\n            ],\n            'sortable'   => true,\n            'closure'    => function ($row) {\n                switch ($row->status) {\n                    case self::STATUS_EXPIRED:\n                        return '<p class=\"label-closed\">'.trans('shop::app.customers.account.downloadable-products.expired').'</p>';\n\n                    case self::STATUS_PENDING:\n                        return '<p class=\"label-pending\">'.trans('shop::app.customers.account.downloadable-products.pending').'</p>';\n\n                    case self::STATUS_AVAILABLE:\n                        return '<p class=\"label-active\">'.trans('shop::app.customers.account.downloadable-products.available').'</p>';\n                }\n            },\n        ]);\n\n        $this->addColumn([\n            'index'           => 'remaining_downloads',\n            'label'           => trans('shop::app.customers.account.downloadable-products.remaining-downloads'),\n            'type'            => 'datetime',\n            'filterable_type' => 'datetime_range',\n            'sortable'        => true,\n            'closure'         => function ($row) {\n                if (! $row->download_bought) {\n                    return trans('shop::app.customer.account.downloadable_products.unlimited');\n                }\n\n                return $row->remaining_downloads;\n            },\n        ]);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "GDPRRequestsDatagrid.php",
                        "relativePath": "packages/Webkul/Shop\\src\\DataGrids\\GDPRRequestsDatagrid.php",
                        "extension": "php",
                        "size": 6943,
                        "sizeFormatted": "6.78 KB",
                        "contentLength": 6943,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\DataGrids;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Webkul\\DataGrid\\DataGrid;\n\nclass GDPRRequestsDatagrid extends DataGrid\n{\n    /**\n     * Request status \"approved\".\n     */\n    const STATUS_COMPLETED = 'completed';\n\n    /**\n     * Request status \"pending\", indicating awaiting approval.\n     */\n    const STATUS_PENDING = 'pending';\n\n    /**\n     * Request status \"declined\", indicating rejection or denial.\n     */\n    const STATUS_DECLINED = 'declined';\n\n    /**\n     * Request status \"processing\".\n     */\n    const STATUS_PROCESSING = 'processing';\n\n    /**\n     * Request status \"revoked\".\n     */\n    const STATUS_REVOKED = 'revoked';\n\n    /**\n     * $status Stores the status of the GDPR request.\n     */\n    private static $status = '';\n\n    /**\n     * Prepare query builder.\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder\n     */\n    public function prepareQueryBuilder()\n    {\n        $queryBuilder = DB::table('gdpr_data_request as gdpr')\n            ->addSelect(\n                'gdpr.id',\n                'gdpr.status',\n                'gdpr.type',\n                'gdpr.message',\n                'gdpr.created_at',\n                'gdpr.updated_at'\n            )\n            ->where('gdpr.customer_id', auth()->guard('customer')->user()->id);\n\n        return $queryBuilder;\n    }\n\n    public function prepareColumns()\n    {\n        $this->addColumn([\n            'index'      => 'id',\n            'label'      => trans('shop::app.customers.account.gdpr.index.datagrid.id'),\n            'type'       => 'integer',\n            'searchable' => true,\n            'sortable'   => true,\n            'filterable' => true,\n        ]);\n\n        $this->addColumn([\n            'index'              => 'status',\n            'label'              => trans('shop::app.customers.account.gdpr.index.datagrid.status'),\n            'type'               => 'string',\n            'searchable'         => true,\n            'sortable'           => false,\n            'filterable'         => true,\n            'filterable_type'    => 'dropdown',\n            'filterable_options' => [\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.pending'),\n                    'value' => self::STATUS_PENDING,\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.processing'),\n                    'value' => self::STATUS_PROCESSING,\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.completed'),\n                    'value' => self::STATUS_COMPLETED,\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.declined'),\n                    'value' => self::STATUS_DECLINED,\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.revoked'),\n                    'value' => self::STATUS_REVOKED,\n                ],\n            ],\n            'closure'    => function ($row) {\n                self::$status = $row->status;\n\n                switch ($row->status) {\n                    case self::STATUS_COMPLETED:\n                        return '<p class=\"label-active\">'.trans('shop::app.customers.account.gdpr.index.datagrid.completed').'</p>';\n\n                    case self::STATUS_PENDING:\n                        return '<p class=\"label-pending\">'.trans('shop::app.customers.account.gdpr.index.datagrid.pending').'</p>';\n\n                    case self::STATUS_DECLINED:\n                        return '<p class=\"label-canceled\">'.trans('shop::app.customers.account.gdpr.index.datagrid.declined').'</p>';\n\n                    case self::STATUS_PROCESSING:\n                        return '<p class=\"label-processing\">'.trans('shop::app.customers.account.gdpr.index.datagrid.processing').'</p>';\n\n                    case self::STATUS_REVOKED:\n                        return '<span class=\"label-closed\">'.trans('shop::app.customers.account.gdpr.index.datagrid.revoked').'</span>';\n                }\n            },\n        ]);\n\n        $this->addColumn([\n            'index'              => 'type',\n            'label'              => trans('shop::app.customers.account.gdpr.index.datagrid.type'),\n            'type'               => 'string',\n            'sortable'           => false,\n            'searchable'         => true,\n            'filterable'         => true,\n            'filterable_type'    => 'dropdown',\n            'filterable_options' => [\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.delete'),\n                    'value' => 'delete',\n                ],\n                [\n                    'label' => trans('shop::app.customers.account.gdpr.index.datagrid.update'),\n                    'value' => 'update',\n                ],\n            ],\n            'closure'    => function ($row) {\n                switch ($row->type) {\n                    case 'delete':\n                        return trans('shop::app.customers.account.gdpr.index.datagrid.delete');\n\n                    case 'update':\n                        return trans('shop::app.customers.account.gdpr.index.datagrid.update');\n                }\n            },\n        ]);\n\n        $this->addColumn([\n            'index'      => 'message',\n            'label'      => trans('shop::app.customers.account.gdpr.index.datagrid.message'),\n            'type'       => 'string',\n            'sortable'   => false,\n            'searchable' => true,\n            'filterable' => false,\n        ]);\n\n        $this->addColumn([\n            'index'           => 'created_at',\n            'label'           => trans('shop::app.customers.account.gdpr.index.datagrid.date'),\n            'type'            => 'date',\n            'filterable'      => true,\n            'filterable_type' => 'date_range',\n            'sortable'        => true,\n        ]);\n\n        $this->addColumn([\n            'index'      => 'revoke',\n            'label'      => trans('shop::app.customers.account.gdpr.index.datagrid.revoke-btn'),\n            'type'       => 'string',\n            'sortable'   => false,\n            'searchable' => false,\n            'filterable' => false,\n            'closure'    => function ($row) {\n                $isPending = self::$status == 'pending';\n\n                $url = route('shop.customers.account.gdpr.revoke', $row->id);\n\n                return $isPending\n                    ? '<a href=\"'.$url.'\" class=\"primary-button rounded-full px-6 py-1.5 max-sm:py-1\">'.trans('shop::app.customers.account.gdpr.index.datagrid.revoke-btn').'</a>'\n                    : '<button class=\"primary-button rounded-full px-6 py-1.5 max-sm:py-1\" disabled>'.trans('shop::app.customers.account.gdpr.index.datagrid.revoke-btn').'</button>';\n            },\n        ]);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "OrderDataGrid.php",
                        "relativePath": "packages/Webkul/Shop\\src\\DataGrids\\OrderDataGrid.php",
                        "extension": "php",
                        "size": 5643,
                        "sizeFormatted": "5.51 KB",
                        "contentLength": 5643,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\DataGrids;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Webkul\\DataGrid\\DataGrid;\nuse Webkul\\Sales\\Models\\Order;\n\nclass OrderDataGrid extends DataGrid\n{\n    /**\n     * Prepare query builder.\n     *\n     * @return void\n     */\n    public function prepareQueryBuilder()\n    {\n        $queryBuilder = DB::table('orders')\n            ->addSelect(\n                'orders.id',\n                'orders.increment_id',\n                'orders.status',\n                'orders.created_at',\n                'orders.grand_total',\n                'orders.order_currency_code'\n            )\n            ->where('customer_id', auth()->guard('customer')->user()->id);\n\n        return $queryBuilder;\n    }\n\n    /**\n     * Add columns.\n     *\n     * @return void\n     */\n    public function prepareColumns()\n    {\n        $this->addColumn([\n            'index'      => 'increment_id',\n            'label'      => trans('shop::app.customers.account.orders.order-id'),\n            'type'       => 'string',\n            'searchable' => true,\n            'filterable' => true,\n            'sortable'   => true,\n        ]);\n\n        $this->addColumn([\n            'index'           => 'created_at',\n            'label'           => trans('shop::app.customers.account.orders.order-date'),\n            'type'            => 'date',\n            'searchable'      => true,\n            'filterable'      => true,\n            'filterable_type' => 'date_range',\n            'sortable'        => true,\n        ]);\n\n        $this->addColumn([\n            'index'      => 'grand_total',\n            'label'      => trans('shop::app.customers.account.orders.total'),\n            'type'       => 'integer',\n            'searchable' => true,\n            'filterable' => true,\n            'sortable'   => true,\n            'closure'    => function ($row) {\n                return core()->formatPrice($row->grand_total, $row->order_currency_code);\n            },\n        ]);\n\n        $this->addColumn([\n            'index'              => 'status',\n            'label'              => trans('shop::app.customers.account.orders.status.title'),\n            'type'               => 'string',\n            'searchable'         => true,\n            'filterable'         => true,\n            'filterable_type'    => 'dropdown',\n            'filterable_options' => [\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.processing'),\n                    'value'  => Order::STATUS_PROCESSING,\n                ],\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.completed'),\n                    'value'  => Order::STATUS_COMPLETED,\n                ],\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.canceled'),\n                    'value'  => Order::STATUS_CANCELED,\n                ],\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.closed'),\n                    'value'  => Order::STATUS_CLOSED,\n                ],\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.pending'),\n                    'value'  => Order::STATUS_PENDING,\n                ],\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.pending-payment'),\n                    'value'  => Order::STATUS_PENDING_PAYMENT,\n                ],\n                [\n                    'label'  => trans('shop::app.customers.account.orders.status.options.fraud'),\n                    'value'  => Order::STATUS_FRAUD,\n                ],\n            ],\n            'sortable'   => true,\n            'closure'    => function ($row) {\n                switch ($row->status) {\n                    case Order::STATUS_PROCESSING:\n                        return '<p class=\"label-processing\">'.trans('shop::app.customers.account.orders.status.options.processing').'</p>';\n\n                    case Order::STATUS_COMPLETED:\n                        return '<p class=\"label-active\">'.trans('shop::app.customers.account.orders.status.options.completed').'</p>';\n\n                    case Order::STATUS_CANCELED:\n                        return '<p class=\"label-canceled\">'.trans('shop::app.customers.account.orders.status.options.canceled').'</p>';\n\n                    case Order::STATUS_CLOSED:\n                        return '<p class=\"label-closed\">'.trans('shop::app.customers.account.orders.status.options.closed').'</p>';\n\n                    case Order::STATUS_PENDING:\n                        return '<p class=\"label-pending\">'.trans('shop::app.customers.account.orders.status.options.pending').'</p>';\n\n                    case Order::STATUS_PENDING_PAYMENT:\n                        return '<p class=\"label-pending\">'.trans('shop::app.customers.account.orders.status.options.pending-payment').'</p>';\n\n                    case Order::STATUS_FRAUD:\n                        return '<p class=\"label-canceled\">'.trans('shop::app.customers.account.orders.status.options.fraud').'</p>';\n                }\n            },\n        ]);\n    }\n\n    /**\n     * Prepare actions.\n     *\n     * @return void\n     */\n    public function prepareActions()\n    {\n        $this->addAction([\n            'icon'   => 'icon-eye',\n            'title'  => trans('shop::app.customers.account.orders.action-view'),\n            'method' => 'GET',\n            'url'    => function ($row) {\n                return route('shop.customers.account.orders.view', $row->id);\n            },\n        ]);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "BookingProductController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\BookingProductController.php",
                        "extension": "php",
                        "size": 1781,
                        "sizeFormatted": "1.74 KB",
                        "contentLength": 1781,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Webkul\\BookingProduct\\Helpers\\AppointmentSlot as AppointmentSlotHelper;\nuse Webkul\\BookingProduct\\Helpers\\DefaultSlot as DefaultSlotHelper;\nuse Webkul\\BookingProduct\\Helpers\\EventTicket as EventTicketHelper;\nuse Webkul\\BookingProduct\\Helpers\\RentalSlot as RentalSlotHelper;\nuse Webkul\\BookingProduct\\Helpers\\TableSlot as TableSlotHelper;\nuse Webkul\\BookingProduct\\Repositories\\BookingProductRepository;\n\nclass BookingProductController extends Controller\n{\n    protected array $bookingHelpers = [];\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(\n        protected BookingProductRepository $bookingProductRepository,\n        protected DefaultSlotHelper $defaultSlotHelper,\n        protected AppointmentSlotHelper $appointmentSlotHelper,\n        protected RentalSlotHelper $rentalSlotHelper,\n        protected EventTicketHelper $eventTicketHelper,\n        protected TableSlotHelper $tableSlotHelper\n    ) {\n        $this->bookingHelpers = [\n            'default'     => $this->defaultSlotHelper,\n            'appointment' => $this->appointmentSlotHelper,\n            'rental'      => $this->rentalSlotHelper,\n            'event'       => $this->eventTicketHelper,\n            'table'       => $this->tableSlotHelper,\n        ];\n    }\n\n    /**\n     * Get available slots for the given product and the date.\n     */\n    public function index(int $id): JsonResource\n    {\n        $bookingProduct = $this->bookingProductRepository->find($id);\n\n        return new JsonResource([\n            'data' => $this->bookingHelpers[$bookingProduct->type]->getSlotsByDate($bookingProduct, request()->date),\n        ]);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CartController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\CartController.php",
                        "extension": "php",
                        "size": 376,
                        "sizeFormatted": "376 B",
                        "contentLength": 376,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nclass CartController extends Controller\n{\n    /**\n     * Cart page.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        if (! core()->getConfigData('sales.checkout.shopping_cart.cart_page')) {\n            abort(404);\n        }\n\n        return view('shop::checkout.cart.index');\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CompareController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\CompareController.php",
                        "extension": "php",
                        "size": 660,
                        "sizeFormatted": "660 B",
                        "contentLength": 660,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Webkul\\Attribute\\Repositories\\AttributeFamilyRepository;\n\nclass CompareController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(protected AttributeFamilyRepository $attributeFamilyRepository) {}\n\n    /**\n     * Address route index page.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        $comparableAttributes = $this->attributeFamilyRepository->getComparableAttributesBelongsToFamily();\n\n        return view('shop::compare.index', compact('comparableAttributes'));\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Controller.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\Controller.php",
                        "extension": "php",
                        "size": 291,
                        "sizeFormatted": "291 B",
                        "contentLength": 291,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Bus\\DispatchesJobs;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Routing\\Controller as BaseController;\n\nclass Controller extends BaseController\n{\n    use DispatchesJobs, ValidatesRequests;\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "DataGridController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\DataGridController.php",
                        "extension": "php",
                        "size": 1247,
                        "sizeFormatted": "1.22 KB",
                        "contentLength": 1247,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Crypt;\n\nclass DataGridController extends Controller\n{\n    /**\n     * Look up.\n     */\n    public function lookUp()\n    {\n        /**\n         * Validation for parameters.\n         */\n        $params = $this->validate(request(), [\n            'datagrid_id' => ['required'],\n            'column'      => ['required'],\n            'search'      => ['required', 'min:2'],\n        ]);\n\n        /**\n         * Preparing the datagrid instance and only columns.\n         */\n        $datagrid = app(Crypt::decryptString($params['datagrid_id']));\n        $datagrid->prepareColumns();\n\n        /**\n         * Finding the first column from the collection.\n         */\n        $column = collect($datagrid->getColumns())->where('index', $params['column'])->firstOrFail();\n\n        /**\n         * Fetching on the basis of column options.\n         */\n        return app($column->options['params']['repository'])\n            ->select([$column->options['params']['column']['label'].' as label', $column->options['params']['column']['value'].' as value'])\n            ->where($column->options['params']['column']['label'], 'LIKE', '%'.$params['search'].'%')\n            ->get();\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "HomeController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\HomeController.php",
                        "extension": "php",
                        "size": 2028,
                        "sizeFormatted": "1.98 KB",
                        "contentLength": 2028,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Webkul\\Shop\\Http\\Requests\\ContactRequest;\nuse Webkul\\Shop\\Mail\\ContactUs;\nuse Webkul\\Theme\\Repositories\\ThemeCustomizationRepository;\n\nclass HomeController extends Controller\n{\n    /**\n     * Using const variable for status\n     */\n    const STATUS = 1;\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(protected ThemeCustomizationRepository $themeCustomizationRepository) {}\n\n    /**\n     * Loads the home page for the storefront.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        visitor()->visit();\n\n        $customizations = $this->themeCustomizationRepository->orderBy('sort_order')->findWhere([\n            'status'     => self::STATUS,\n            'channel_id' => core()->getCurrentChannel()->id,\n            'theme_code' => core()->getCurrentChannel()->theme,\n        ]);\n\n        return view('shop::home.index', compact('customizations'));\n    }\n\n    /**\n     * Loads the home page for the storefront if something wrong.\n     *\n     * @return \\Exception\n     */\n    public function notFound()\n    {\n        abort(404);\n    }\n\n    /**\n     * Summary of contact.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function contactUs()\n    {\n        return view('shop::home.contact-us');\n    }\n\n    /**\n     * Summary of store.\n     *\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function sendContactUsMail(ContactRequest $contactRequest)\n    {\n        try {\n            Mail::queue(new ContactUs($contactRequest->only([\n                'name',\n                'email',\n                'contact',\n                'message',\n            ])));\n\n            session()->flash('success', trans('shop::app.home.thanks-for-contact'));\n        } catch (\\Exception $e) {\n            session()->flash('error', $e->getMessage());\n\n            report($e);\n        }\n\n        return back();\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "OnepageController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\OnepageController.php",
                        "extension": "php",
                        "size": 3905,
                        "sizeFormatted": "3.81 KB",
                        "contentLength": 3905,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Event;\nuse Webkul\\Checkout\\Facades\\Cart;\nuse Webkul\\MagicAI\\Facades\\MagicAI;\nuse Webkul\\Sales\\Repositories\\OrderRepository;\n\nclass OnepageController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        if (! core()->getConfigData('sales.checkout.shopping_cart.cart_page')) {\n            abort(404);\n        }\n\n        Event::dispatch('checkout.load.index');\n\n        /**\n         * If guest checkout is not allowed then redirect back to the cart page\n         */\n        if (\n            ! auth()->guard('customer')->check()\n            && ! core()->getConfigData('sales.checkout.shopping_cart.allow_guest_checkout')\n        ) {\n            return redirect()->route('shop.customer.session.index');\n        }\n\n        /**\n         * If user is suspended then redirect back to the cart page\n         */\n        if (auth()->guard('customer')->user()?->is_suspended) {\n            session()->flash('warning', trans('shop::app.checkout.cart.suspended-account-message'));\n\n            return redirect()->route('shop.checkout.cart.index');\n        }\n\n        /**\n         * If cart has errors then redirect back to the cart page\n         */\n        if (Cart::hasError()) {\n            return redirect()->route('shop.checkout.cart.index');\n        }\n\n        $cart = Cart::getCart();\n\n        /**\n         * If cart is has downloadable items and customer is not logged in\n         * then redirect back to the cart page\n         */\n        if (\n            ! auth()->guard('customer')->check()\n            && (\n                $cart->hasDownloadableItems()\n                || ! $cart->hasGuestCheckoutItems()\n            )\n        ) {\n            return redirect()->route('shop.customer.session.index');\n        }\n\n        return view('shop::checkout.onepage.index', compact('cart'));\n    }\n\n    /**\n     * Order success page.\n     *\n     * @return \\Illuminate\\View\\View|\\Illuminate\\Http\\RedirectResponse\n     */\n    public function success(OrderRepository $orderRepository)\n    {\n        if (! $order = $orderRepository->find(session('order_id'))) {\n            return redirect()->route('shop.checkout.cart.index');\n        }\n\n        if (\n            core()->getConfigData('general.magic_ai.settings.enabled')\n            && core()->getConfigData('general.magic_ai.checkout_message.enabled')\n            && ! empty(core()->getConfigData('general.magic_ai.checkout_message.prompt'))\n        ) {\n\n            try {\n                $model = core()->getConfigData('general.magic_ai.checkout_message.model');\n\n                $response = MagicAI::setModel($model)\n                    ->setTemperature(0)\n                    ->setPrompt($this->getCheckoutPrompt($order))\n                    ->ask();\n\n                $order->checkout_message = $response;\n            } catch (\\Exception $e) {\n            }\n        }\n\n        return view('shop::checkout.success', compact('order'));\n    }\n\n    /**\n     * Order success page.\n     *\n     * @param  \\Webkul\\Sales\\Contracts\\Order  $order\n     * @return string\n     */\n    public function getCheckoutPrompt($order)\n    {\n        $prompt = core()->getConfigData('general.magic_ai.checkout_message.prompt');\n\n        $products = '';\n\n        foreach ($order->items as $item) {\n            $products .= \"Name: $item->name\\n\";\n            $products .= \"Qty: $item->qty_ordered\\n\";\n            $products .= 'Price: '.core()->formatPrice($item->total).\"\\n\\n\";\n        }\n\n        $prompt .= \"\\n\\nProduct Details:\\n $products\";\n\n        $prompt .= \"Customer Details:\\n $order->customer_full_name \\n\\n\";\n\n        $prompt .= \"Current Locale:\\n \".core()->getCurrentLocale()->name.\"\\n\\n\";\n\n        $prompt .= \"Store Name:\\n\".core()->getCurrentChannel()->name;\n\n        return $prompt;\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "PageController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\PageController.php",
                        "extension": "php",
                        "size": 1399,
                        "sizeFormatted": "1.37 KB",
                        "contentLength": 1399,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Webkul\\CMS\\Repositories\\PageRepository;\nuse Webkul\\Marketing\\Repositories\\URLRewriteRepository;\n\nclass PageController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(\n        protected PageRepository $pageRepository,\n        protected URLRewriteRepository $urlRewriteRepository\n    ) {}\n\n    /**\n     * To extract the page content and load it in the respective view file\n     *\n     * @param  string  $urlKey\n     * @return \\Illuminate\\View\\View\n     */\n    public function view($urlKey)\n    {\n        $page = $this->pageRepository\n            ->whereHas('channels', function ($query) {\n                $query->where('id', core()->getCurrentChannel()->id);\n            })\n            ->whereTranslation('url_key', $urlKey)->first();\n\n        if (! $page) {\n            $urlRewrite = $this->urlRewriteRepository->findOneWhere([\n                'entity_type'  => 'cms_page',\n                'request_path' => $urlKey,\n                'locale'       => app()->getLocale(),\n            ]);\n\n            if ($urlRewrite) {\n                return redirect()->to($urlRewrite->target_path, $urlRewrite->redirect_type);\n            }\n\n            abort_if(! $page && ! $urlRewrite, 404);\n        }\n\n        return view('shop::cms.page')->with('page', $page);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ProductController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\ProductController.php",
                        "extension": "php",
                        "size": 3488,
                        "sizeFormatted": "3.41 KB",
                        "contentLength": 3488,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Storage;\nuse Webkul\\Product\\Repositories\\ProductAttributeValueRepository;\nuse Webkul\\Product\\Repositories\\ProductDownloadableLinkRepository;\nuse Webkul\\Product\\Repositories\\ProductDownloadableSampleRepository;\nuse Webkul\\Product\\Repositories\\ProductRepository;\n\nclass ProductController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(\n        protected ProductRepository $productRepository,\n        protected ProductAttributeValueRepository $productAttributeValueRepository,\n        protected ProductDownloadableSampleRepository $productDownloadableSampleRepository,\n        protected ProductDownloadableLinkRepository $productDownloadableLinkRepository\n    ) {}\n\n    /**\n     * Download image or file.\n     *\n     * @param  int  $productId\n     * @param  int  $attributeId\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function download($productId, $attributeId)\n    {\n        $productAttribute = $this->productAttributeValueRepository->findOneWhere([\n            'product_id'   => $productId,\n            'attribute_id' => $attributeId,\n        ]);\n\n        return isset($productAttribute['text_value'])\n            ? Storage::download($productAttribute['text_value'])\n            : null;\n    }\n\n    /**\n     * Download the for the specified resource.\n     *\n     * @return \\Illuminate\\Http\\Response|\\Exception\n     */\n    public function downloadSample()\n    {\n        try {\n            if (request('type') == 'link') {\n                $productDownloadableLink = $this->productDownloadableLinkRepository->findOrFail(request('id'));\n\n                if ($productDownloadableLink->sample_type == 'file') {\n                    $privateDisk = Storage::disk('private');\n\n                    return $privateDisk->exists($productDownloadableLink->sample_file)\n                        ? $privateDisk->download($productDownloadableLink->sample_file)\n                        : abort(404);\n                } else {\n                    $fileName = substr($productDownloadableLink->sample_url, strrpos($productDownloadableLink->sample_url, '/') + 1);\n\n                    $tempImage = tempnam(sys_get_temp_dir(), $fileName);\n\n                    copy($productDownloadableLink->sample_url, $tempImage);\n\n                    return response()->download($tempImage, $fileName);\n                }\n            } else {\n                $productDownloadableSample = $this->productDownloadableSampleRepository->findOrFail(request('id'));\n\n                if ($product = $this->productRepository->findOrFail($productDownloadableSample->product_id)) {\n                    if (! $product->visible_individually) {\n                        return redirect()->back();\n                    }\n                }\n\n                if ($productDownloadableSample->type == 'file') {\n                    return Storage::download($productDownloadableSample->file);\n                } else {\n                    $fileName = substr($productDownloadableSample->url, strrpos($productDownloadableSample->url, '/') + 1);\n\n                    $tempImage = tempnam(sys_get_temp_dir(), $fileName);\n\n                    copy($productDownloadableSample->url, $tempImage);\n\n                    return response()->download($tempImage, $fileName);\n                }\n            }\n        } catch (\\Exception $e) {\n            abort(404);\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ProductsCategoriesProxyController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\ProductsCategoriesProxyController.php",
                        "extension": "php",
                        "size": 4259,
                        "sizeFormatted": "4.16 KB",
                        "contentLength": 4259,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Webkul\\Category\\Repositories\\CategoryRepository;\nuse Webkul\\Marketing\\Repositories\\URLRewriteRepository;\nuse Webkul\\Product\\Repositories\\ProductRepository;\nuse Webkul\\Theme\\Repositories\\ThemeCustomizationRepository;\n\nclass ProductsCategoriesProxyController extends Controller\n{\n    /**\n     * Using const variable for status\n     *\n     * @var int Status\n     */\n    const STATUS = 1;\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(\n        protected CategoryRepository $categoryRepository,\n        protected ProductRepository $productRepository,\n        protected ThemeCustomizationRepository $themeCustomizationRepository,\n        protected URLRewriteRepository $urlRewriteRepository\n    ) {}\n\n    /**\n     * Show product or category view. If neither category nor product matches, abort with code 404.\n     *\n     * @return \\Illuminate\\View\\View|\\Exception\n     */\n    public function index(Request $request)\n    {\n        $slugOrURLKey = urldecode(trim($request->getPathInfo(), '/'));\n\n        /**\n         * Support url for chinese, japanese, arabic and english with numbers.\n         */\n        if (! preg_match('/^([\\p{L}\\p{N}\\p{M}\\x{0900}-\\x{097F}\\x{0590}-\\x{05FF}\\x{0600}-\\x{06FF}\\x{0400}-\\x{04FF}_-]+\\/?)+$/u', $slugOrURLKey)) {\n            visitor()->visit();\n\n            $customizations = $this->themeCustomizationRepository->orderBy('sort_order')->findWhere([\n                'status'     => self::STATUS,\n                'channel_id' => core()->getCurrentChannel()->id,\n            ]);\n\n            return view('shop::home.index', compact('customizations'));\n        }\n\n        $category = $this->categoryRepository->findBySlug($slugOrURLKey);\n\n        if ($category) {\n            visitor()->visit($category);\n\n            return view('shop::categories.view', [\n                'category' => $category,\n                'params'   => [\n                    'sort'  => request()->query('sort'),\n                    'limit' => request()->query('limit'),\n                    'mode'  => request()->query('mode'),\n                ],\n            ]);\n        }\n\n        if (core()->getConfigData('catalog.products.search.engine') == 'elastic') {\n            $searchEngine = core()->getConfigData('catalog.products.search.storefront_mode');\n        }\n\n        $product = $this->productRepository\n            ->setSearchEngine($searchEngine ?? 'database')\n            ->findBySlug($slugOrURLKey);\n\n        if ($product) {\n            if (\n                ! $product->url_key\n                || ! $product->visible_individually\n                || ! $product->status\n            ) {\n                abort(404);\n            }\n\n            visitor()->visit($product);\n\n            return view('shop::products.view', compact('product'));\n        }\n\n        /**\n         * If category is not found, try to find it by slug.\n         * If category is found by slug, redirect to category path.\n         */\n        $trimmedSlug = last(explode('/', $slugOrURLKey));\n\n        $category = $this->categoryRepository->findBySlug($trimmedSlug);\n\n        if ($category) {\n            return redirect()->to($trimmedSlug, 301);\n        }\n\n        /**\n         * If neither category nor product matches,\n         * try to find it by url rewrite for category.\n         */\n        $categoryURLRewrite = $this->urlRewriteRepository->findOneWhere([\n            'entity_type'  => 'category',\n            'request_path' => $slugOrURLKey,\n            'locale'       => app()->getLocale(),\n        ]);\n\n        if ($categoryURLRewrite) {\n            return redirect()->to($categoryURLRewrite->target_path, $categoryURLRewrite->redirect_type);\n        }\n\n        /**\n         * If neither category nor product matches,\n         * try to find it by url rewrite for product.\n         */\n        $productURLRewrite = $this->urlRewriteRepository->findOneWhere([\n            'entity_type'  => 'product',\n            'request_path' => $slugOrURLKey,\n        ]);\n\n        if ($productURLRewrite) {\n            return redirect()->to($productURLRewrite->target_path, $productURLRewrite->redirect_type);\n        }\n\n        abort(404);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "SearchController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\SearchController.php",
                        "extension": "php",
                        "size": 1696,
                        "sizeFormatted": "1.66 KB",
                        "contentLength": 1696,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Webkul\\Marketing\\Repositories\\SearchTermRepository;\nuse Webkul\\Product\\Repositories\\SearchRepository;\n\nclass SearchController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(\n        protected SearchTermRepository $searchTermRepository,\n        protected SearchRepository $searchRepository\n    ) {}\n\n    /**\n     * Index to handle the view loaded with the search results\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        $this->validate(request(), [\n            'query' => ['sometimes', 'required', 'string', 'regex:/^[^\\\\\\\\]+$/u'],\n        ]);\n\n        $searchTerm = $this->searchTermRepository->findOneWhere([\n            'term'       => request()->query('query'),\n            'channel_id' => core()->getCurrentChannel()->id,\n            'locale'     => app()->getLocale(),\n        ]);\n\n        if ($searchTerm?->redirect_url) {\n            return redirect()->to($searchTerm->redirect_url);\n        }\n\n        return view('shop::search.index', [\n            'params' => [\n                'sort'  => request()->query('sort'),\n                'limit' => request()->query('limit'),\n                'mode'  => request()->query('mode'),\n            ],\n        ]);\n    }\n\n    /**\n     * Upload image for product search with machine learning.\n     *\n     * @return string\n     */\n    public function upload()\n    {\n        request()->validate([\n            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp',\n        ]);\n\n        return $this->searchRepository->uploadSearchImage(request()->all());\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "SubscriptionController.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Controllers\\SubscriptionController.php",
                        "extension": "php",
                        "size": 2054,
                        "sizeFormatted": "2.01 KB",
                        "contentLength": 2054,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Event;\nuse Webkul\\Core\\Repositories\\SubscribersListRepository;\n\nclass SubscriptionController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct(protected SubscribersListRepository $subscriptionRepository) {}\n\n    /**\n     * Subscribes email to the email subscription list\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store()\n    {\n        $this->validate(request(), [\n            'email' => 'email|required',\n        ]);\n\n        $email = request()->input('email');\n\n        $subscription = $this->subscriptionRepository->findOneByField('email', $email);\n\n        if ($subscription) {\n            session()->flash('error', trans('shop::app.subscription.already'));\n\n            return redirect()->back();\n        }\n\n        Event::dispatch('customer.subscription.before');\n\n        $customer = auth()->user();\n\n        $subscription = $this->subscriptionRepository->create([\n            'email'         => $email,\n            'channel_id'    => core()->getCurrentChannel()->id,\n            'is_subscribed' => 1,\n            'token'         => uniqid(),\n            'customer_id'   => $customer->id ?? null,\n        ]);\n\n        if ($customer) {\n            $customer->subscribed_to_news_letter = 1;\n\n            $customer->save();\n        }\n\n        Event::dispatch('customer.subscription.after', $subscription);\n\n        session()->flash('success', trans('shop::app.subscription.subscribe-success'));\n\n        return redirect()->back();\n    }\n\n    /**\n     * To unsubscribe from a the subscription list\n     *\n     * @param  string  $token\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($token)\n    {\n        $this->subscriptionRepository->deleteWhere(['token' => $token]);\n\n        session()->flash('success', trans('shop::app.subscription.unsubscribe-success'));\n\n        return redirect()->route('shop.home.index');\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "AuthenticateCustomer.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Middleware\\AuthenticateCustomer.php",
                        "extension": "php",
                        "size": 1210,
                        "sizeFormatted": "1.18 KB",
                        "contentLength": 1210,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Middleware;\n\nuse Closure;\n\nclass AuthenticateCustomer\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  string|null  $guard\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $guard = 'customer')\n    {\n        if (! auth()->guard($guard)->check()) {\n            if ($request->expectsJson()) {\n                return response()->json([\n                    'message' => '',\n                ], 401);\n            }\n\n            return redirect()->route('shop.customer.session.index');\n        } else {\n            if (! auth()->guard($guard)->user()->status) {\n                auth()->guard($guard)->logout();\n\n                if ($request->expectsJson()) {\n                    return response()->json([\n                        'message' => trans('shop::app.customers.login-form.not-activated'),\n                    ], 401);\n                }\n\n                session()->flash('warning', trans('shop::app.customers.login-form.not-activated'));\n\n                return redirect()->route('shop.customer.session.index');\n            }\n        }\n\n        return $next($request);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CacheResponse.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Middleware\\CacheResponse.php",
                        "extension": "php",
                        "size": 3327,
                        "sizeFormatted": "3.25 KB",
                        "contentLength": 3327,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Spatie\\ResponseCache\\Middlewares\\CacheResponse as BaseCacheResponseMiddleware;\nuse Spatie\\ResponseCache\\ResponseCache as BaseResponseCache;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Webkul\\Marketing\\Repositories\\SearchTermRepository;\nuse Webkul\\Marketing\\Repositories\\URLRewriteRepository;\n\nclass CacheResponse extends BaseCacheResponseMiddleware\n{\n    /**\n     * Create a middleware instance.\n     *\n     * @return void\n     */\n    public function __construct(protected BaseResponseCache $responseCache)\n    {\n        $this->responseCache = $responseCache;\n\n        parent::__construct($responseCache);\n    }\n\n    /**\n     * Handle an incoming request.\n     *\n     * @param  mixed  ...$args\n     * @return mixed\n     */\n    public function handle(Request $request, Closure $next, ...$args): Response\n    {\n        if (! $this->responseCache->enabled($request)) {\n            return parent::handle($request, $next, ...$args);\n        }\n\n        /**\n         * Redirect to the search term redirect url if the search term is found.\n         */\n        if ($request->route()->getName() == 'shop.search.index') {\n            $searchTerm = app(SearchTermRepository::class)->findOneWhere([\n                'term'       => request()->query('query'),\n                'channel_id' => core()->getCurrentChannel()->id,\n                'locale'     => app()->getLocale(),\n            ]);\n\n            if ($searchTerm?->redirect_url) {\n                return redirect()->to($searchTerm->redirect_url);\n            }\n        }\n\n        /**\n         * Redirect to the target path if the url rewrite is found.\n         */\n        if ($request->route()->getName() == 'shop.product_or_category.index') {\n            $slugOrPath = urldecode(trim($request->getPathInfo(), '/'));\n\n            $categoryURLRewrite = app(URLRewriteRepository::class)->findOneWhere([\n                'entity_type'  => 'category',\n                'request_path' => $slugOrPath,\n                'locale'       => app()->getLocale(),\n            ]);\n\n            if ($categoryURLRewrite) {\n                return redirect()->to($categoryURLRewrite->target_path, $categoryURLRewrite->redirect_type);\n            }\n\n            $productURLRewrite = app(URLRewriteRepository::class)->findOneWhere([\n                'entity_type'  => 'product',\n                'request_path' => $slugOrPath,\n            ]);\n\n            if ($productURLRewrite) {\n                return redirect()->to($productURLRewrite->target_path, $productURLRewrite->redirect_type);\n            }\n        }\n\n        /**\n         * Redirect to the target path if the cms page url rewrite is found.\n         */\n        if ($request->route()->getName() == 'shop.cms.page') {\n            $slug = last(explode('/', $request->getPathInfo()));\n\n            $pageURLRewrite = app(URLRewriteRepository::class)->findOneWhere([\n                'entity_type'  => 'cms_page',\n                'request_path' => $slug,\n                'locale'       => app()->getLocale(),\n            ]);\n\n            if ($pageURLRewrite) {\n                return redirect()->to($pageURLRewrite->target_path, $pageURLRewrite->redirect_type);\n            }\n        }\n\n        return parent::handle($request, $next, ...$args);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Currency.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Middleware\\Currency.php",
                        "extension": "php",
                        "size": 1127,
                        "sizeFormatted": "1.1 KB",
                        "contentLength": 1127,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Middleware;\n\nuse Closure;\nuse Webkul\\Core\\Repositories\\CurrencyRepository;\n\nclass Currency\n{\n    /**\n     * Create a middleware instance.\n     *\n     * @return void\n     */\n    public function __construct(protected CurrencyRepository $currencyRepository) {}\n\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        $currencies = core()->getCurrentChannel()->currencies->pluck('code')->toArray();\n        $currencyCode = core()->getRequestedLocaleCode('currency', false);\n\n        if (! $currencyCode || ! in_array($currencyCode, $currencies)) {\n            $currencyCode = session()->get('currency');\n        }\n\n        if (! $currencyCode || ! in_array($currencyCode, $currencies)) {\n            $currencyCode = core()->getCurrentChannel()->base_currency->code;\n        }\n\n        core()->setCurrentCurrency($currencyCode);\n        session()->put('currency', $currencyCode);\n        unset($request['currency']);\n\n        return $next($request);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Locale.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Middleware\\Locale.php",
                        "extension": "php",
                        "size": 1072,
                        "sizeFormatted": "1.05 KB",
                        "contentLength": 1072,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Middleware;\n\nuse Closure;\nuse Webkul\\Core\\Repositories\\LocaleRepository;\n\nclass Locale\n{\n    /**\n     * Create a middleware instance.\n     *\n     * @return void\n     */\n    public function __construct(protected LocaleRepository $localeRepository) {}\n\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        $locales = core()->getCurrentChannel()->locales->pluck('code')->toArray();\n        $localeCode = core()->getRequestedLocaleCode('locale', false);\n\n        if (! $localeCode || ! in_array($localeCode, $locales)) {\n            $localeCode = session()->get('locale');\n        }\n\n        if (! $localeCode || ! in_array($localeCode, $locales)) {\n            $localeCode = core()->getCurrentChannel()->default_locale->code;\n        }\n\n        app()->setLocale($localeCode);\n        session()->put('locale', $localeCode);\n        unset($request['locale']);\n\n        return $next($request);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Theme.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Middleware\\Theme.php",
                        "extension": "php",
                        "size": 722,
                        "sizeFormatted": "722 B",
                        "contentLength": 722,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Middleware;\n\nuse Closure;\n\nclass Theme\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        $themes = themes();\n\n        $channel = core()->getCurrentChannel();\n\n        if (\n            $channel\n            && $channelThemeCode = $channel->theme\n        ) {\n            $themes->exists($channelThemeCode)\n                ? $themes->set($channelThemeCode)\n                : $themes->set(config('themes.shop-default'));\n        } else {\n            $themes->set(config('themes.shop-default'));\n        }\n\n        return $next($request);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CartAddressRequest.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Requests\\CartAddressRequest.php",
                        "extension": "php",
                        "size": 2174,
                        "sizeFormatted": "2.12 KB",
                        "contentLength": 2174,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Webkul\\Core\\Rules\\PhoneNumber;\nuse Webkul\\Core\\Rules\\PostCode;\nuse Webkul\\Customer\\Rules\\VatIdRule;\n\nclass CartAddressRequest extends FormRequest\n{\n    /**\n     * Rules.\n     *\n     * @var array\n     */\n    protected $rules = [];\n\n    /**\n     * Determine if the product is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        if ($this->has('billing')) {\n            $this->mergeAddressRules('billing');\n        }\n\n        if (! $this->input('billing.use_for_shipping')) {\n            $this->mergeAddressRules('shipping');\n        }\n\n        return $this->rules;\n    }\n\n    /**\n     * Merge new address rules.\n     */\n    private function mergeAddressRules(string $addressType): void\n    {\n        $this->mergeWithRules([\n            \"{$addressType}.company_name\" => ['nullable'],\n            \"{$addressType}.first_name\"   => ['required'],\n            \"{$addressType}.last_name\"    => ['required'],\n            \"{$addressType}.email\"        => ['required'],\n            \"{$addressType}.address\"      => ['required', 'array', 'min:1'],\n            \"{$addressType}.city\"         => ['required'],\n            \"{$addressType}.country\"      => core()->isCountryRequired() ? ['required'] : ['nullable'],\n            \"{$addressType}.state\"        => core()->isStateRequired() ? ['required'] : ['nullable'],\n            \"{$addressType}.postcode\"     => core()->isPostCodeRequired() ? ['required', new PostCode] : [new PostCode],\n            \"{$addressType}.phone\"        => ['required', new PhoneNumber],\n        ]);\n\n        if ($addressType == 'billing') {\n            $this->mergeWithRules([\n                \"{$addressType}.vat_id\" => [(new VatIdRule)->setCountry($this->input('billing.country'))],\n            ]);\n        }\n    }\n\n    /**\n     * Merge additional rules.\n     */\n    private function mergeWithRules($rules): void\n    {\n        $this->rules = array_merge($this->rules, $rules);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ContactRequest.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Requests\\ContactRequest.php",
                        "extension": "php",
                        "size": 930,
                        "sizeFormatted": "930 B",
                        "contentLength": 930,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Webkul\\Core\\Rules\\PhoneNumber;\nuse Webkul\\Customer\\Facades\\Captcha;\n\nclass ContactRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return Captcha::getValidations([\n            'name'    => 'string|required',\n            'email'   => 'string|required',\n            'contact' => new PhoneNumber,\n            'message' => 'required',\n        ]);\n    }\n\n    /**\n     * Get custom messages for validator errors.\n     *\n     * @return array\n     */\n    public function messages()\n    {\n        return Captcha::getValidationMessages();\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "AddressResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\AddressResource.php",
                        "extension": "php",
                        "size": 1474,
                        "sizeFormatted": "1.44 KB",
                        "contentLength": 1474,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass AddressResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'                => $this->id,\n            'address_type'      => $this->address_type,\n            'parent_address_id' => $this->parent_address_id,\n            'customer_id'       => $this->customer_id,\n            'cart_id'           => $this->cart_id,\n            'order_id'          => $this->order_id,\n            'first_name'        => $this->first_name,\n            'last_name'         => $this->last_name,\n            'gender'            => $this->gender,\n            'company_name'      => $this->company_name,\n            'address'           => explode(PHP_EOL, $this->address),\n            'city'              => $this->city,\n            'state'             => $this->state,\n            'country'           => $this->country,\n            'postcode'          => $this->postcode,\n            'email'             => $this->email,\n            'phone'             => $this->phone,\n            'vat_id'            => $this->vat_id,\n            'default_address'   => $this->default_address,\n            'use_for_shipping'  => $this->use_for_shipping,\n            'additional'        => $this->additional,\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "AttributeOptionResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\AttributeOptionResource.php",
                        "extension": "php",
                        "size": 448,
                        "sizeFormatted": "448 B",
                        "contentLength": 448,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass AttributeOptionResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'   => $this->id,\n            'name' => $this->label ?? $this->admin_name,\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "AttributeResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\AttributeResource.php",
                        "extension": "php",
                        "size": 543,
                        "sizeFormatted": "543 B",
                        "contentLength": 543,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass AttributeResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'           => $this->id,\n            'code'         => $this->code,\n            'type'         => $this->type,\n            'name'         => $this->name ?? $this->admin_name,\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CartItemResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\CartItemResource.php",
                        "extension": "php",
                        "size": 2444,
                        "sizeFormatted": "2.39 KB",
                        "contentLength": 2444,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\n\nclass CartItemResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'                        => $this->id,\n            'quantity'                  => $this->quantity,\n            'type'                      => $this->type,\n            'name'                      => $this->name,\n            'price'                     => $this->price,\n            'formatted_price'           => core()->formatPrice($this->price),\n            'price_incl_tax'            => $this->price_incl_tax,\n            'formatted_price_incl_tax'  => core()->formatPrice($this->price_incl_tax),\n            'total'                     => $this->total,\n            'formatted_total'           => core()->formatPrice($this->total),\n            'total_incl_tax'            => $this->total_incl_tax,\n            'formatted_total_incl_tax'  => core()->formatPrice($this->total_incl_tax),\n            'discount_amount'           => $this->discount_amount,\n            'formatted_discount_amount' => core()->formatPrice($this->discount_amount),\n            'base_image'                => $this->getTypeInstance()->getBaseImage($this),\n            'product_url_key'           => $this->product->url_key,\n            'options'                   => $this->formatAdditionalAttributes(),\n        ];\n    }\n\n    /**\n     * Format the additional attributes.\n     */\n    public function formatAdditionalAttributes(): array\n    {\n        $attributes = $this->resource->additional['attributes'] ?? [];\n\n        if (! empty($attributes)) {\n            return collect($attributes)\n                ->map(function ($attribute) {\n                    if (\n                        isset($attribute['attribute_type'])\n                        && $attribute['attribute_type'] == 'file'\n                    ) {\n                        $attribute['file_name'] = File::basename($attribute['option_label']);\n\n                        $attribute['file_url'] = Storage::url($attribute['option_label']);\n                    }\n\n                    return $attribute;\n                })\n                ->toArray();\n        }\n\n        return [];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CartResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\CartResource.php",
                        "extension": "php",
                        "size": 2877,
                        "sizeFormatted": "2.81 KB",
                        "contentLength": 2877,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Webkul\\Tax\\Facades\\Tax;\n\nclass CartResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        $taxes = collect(Tax::getTaxRatesWithAmount($this, true))->map(function ($rate) {\n            return core()->currency($rate ?? 0);\n        });\n\n        return [\n            'id'                                 => $this->id,\n            'is_guest'                           => $this->is_guest,\n            'customer_id'                        => $this->customer_id,\n            'items_count'                        => $this->items_count,\n            'items_qty'                          => $this->items_qty,\n            'applied_taxes'                      => $taxes,\n            'tax_total'                          => $this->tax_total,\n            'formatted_tax_total'                => core()->formatPrice($this->tax_total),\n            'sub_total_incl_tax'                 => $this->sub_total_incl_tax,\n            'sub_total'                          => $this->sub_total,\n            'formatted_sub_total_incl_tax'       => core()->formatPrice($this->sub_total_incl_tax),\n            'formatted_sub_total'                => core()->formatPrice($this->sub_total),\n            'coupon_code'                        => $this->coupon_code,\n            'discount_amount'                    => $this->discount_amount,\n            'formatted_discount_amount'          => core()->formatPrice($this->discount_amount),\n            'shipping_method'                    => $this->shipping_method,\n            'shipping_amount'                    => $this->shipping_amount,\n            'formatted_shipping_amount'          => core()->formatPrice($this->shipping_amount),\n            'shipping_amount_incl_tax'           => $this->shipping_amount_incl_tax,\n            'formatted_shipping_amount_incl_tax' => core()->formatPrice($this->shipping_amount_incl_tax),\n            'grand_total'                        => $this->grand_total,\n            'formatted_grand_total'              => core()->formatPrice($this->grand_total),\n            'items'                              => CartItemResource::collection($this->items),\n            'billing_address'                    => new AddressResource($this->billing_address),\n            'shipping_address'                   => new AddressResource($this->shipping_address),\n            'have_stockable_items'               => $this->haveStockableItems(),\n            'payment_method'                     => $this->payment?->method,\n            'payment_method_title'               => core()->getConfigData('sales.payment_methods.'.$this->payment?->method.'.title'),\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CategoryResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\CategoryResource.php",
                        "extension": "php",
                        "size": 1839,
                        "sizeFormatted": "1.8 KB",
                        "contentLength": 1839,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass CategoryResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'           => $this->id,\n            'parent_id'    => $this->parent_id,\n            'name'         => $this->name,\n            'slug'         => $this->slug,\n            'status'       => $this->status,\n            'position'     => $this->position,\n            'display_mode' => $this->display_mode,\n            'description'  => $this->description,\n            'logo'         => $this->when($this->logo_path, [\n                'small_image_url'    => url('cache/small/'.$this->logo_path),\n                'medium_image_url'   => url('cache/medium/'.$this->logo_path),\n                'large_image_url'    => url('cache/large/'.$this->logo_path),\n                'original_image_url' => url('cache/original/'.$this->logo_path),\n            ]),\n            'banner'       => $this->when($this->banner_path, [\n                'small_image_url'    => url('cache/small/'.$this->banner_path),\n                'medium_image_url'   => url('cache/medium/'.$this->banner_path),\n                'large_image_url'    => url('cache/large/'.$this->banner_path),\n                'original_image_url' => url('cache/original/'.$this->banner_path),\n            ]),\n            'meta'         => [\n                'title'       => $this->meta_title,\n                'keywords'    => $this->meta_keywords,\n                'description' => $this->meta_description,\n            ],\n            'translations' => $this->translations,\n            'additional'   => $this->additional,\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CategoryTreeResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\CategoryTreeResource.php",
                        "extension": "php",
                        "size": 671,
                        "sizeFormatted": "671 B",
                        "contentLength": 671,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass CategoryTreeResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'        => $this->id,\n            'parent_id' => $this->parent_id,\n            'name'      => $this->name,\n            'slug'      => $this->slug,\n            'url'       => $this->url,\n            'status'    => $this->status,\n            'children'  => self::collection($this->children),\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CompareItemResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\CompareItemResource.php",
                        "extension": "php",
                        "size": 2038,
                        "sizeFormatted": "1.99 KB",
                        "contentLength": 2038,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Webkul\\Attribute\\Repositories\\AttributeFamilyRepository;\n\nclass CompareItemResource extends JsonResource\n{\n    /**\n     * Contains comparable attributes.\n     *\n     * @var array\n     */\n    protected static $comparableAttributes = [];\n\n    /**\n     * Create a new anonymous resource collection.\n     *\n     * @param  mixed  $resource\n     * @return \\Illuminate\\Http\\Resources\\Json\\AnonymousResourceCollection\n     */\n    public static function collection($resource)\n    {\n        self::$comparableAttributes = app(AttributeFamilyRepository::class)->getComparableAttributesBelongsToFamily();\n\n        return parent::collection($resource);\n    }\n\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        $data = (new ProductResource($this->resource))\n            ->toArray($this->resource);\n\n        foreach (self::$comparableAttributes as $attribute) {\n            if (in_array($attribute->code, ['name', 'price'])) {\n                continue;\n            }\n\n            if (in_array($attribute->type, ['select', 'multiselect', 'checkbox'])) {\n                $labels = [];\n\n                $attributeOptions = $attribute->options->whereIn('id', explode(',', $this->{$attribute->code}));\n\n                foreach ($attributeOptions as $attributeOption) {\n                    if ($label = $attributeOption->label) {\n                        $labels[] = strip_tags($label);\n                    }\n                }\n\n                $data[$attribute->code] = implode(', ', $labels);\n            } else {\n                if ($attribute->enable_wysiwyg) {\n                    $data[$attribute->code] = $this->{$attribute->code};\n                } else {\n                    $data[$attribute->code] = strip_tags($this->{$attribute->code});\n                }\n            }\n        }\n\n        return $data;\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ProductResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\ProductResource.php",
                        "extension": "php",
                        "size": 2063,
                        "sizeFormatted": "2.01 KB",
                        "contentLength": 2063,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Webkul\\Product\\Helpers\\Review;\n\nclass ProductResource extends JsonResource\n{\n    /**\n     * Create a new resource instance.\n     *\n     * @param  mixed  $resource\n     * @return void\n     */\n    public function __construct($resource)\n    {\n        $this->reviewHelper = app(Review::class);\n\n        parent::__construct($resource);\n    }\n\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        $productTypeInstance = $this->getTypeInstance();\n\n        return [\n            'id'          => $this->id,\n            'sku'         => $this->sku,\n            'name'        => $this->name,\n            'description' => $this->description,\n            'url_key'     => $this->url_key,\n            'base_image'  => product_image()->getProductBaseImage($this),\n            'images'      => product_image()->getGalleryImages($this),\n            'is_new'      => (bool) $this->new,\n            'is_featured' => (bool) $this->featured,\n            'on_sale'     => (bool) $productTypeInstance->haveDiscount(),\n            'is_saleable' => (bool) $productTypeInstance->isSaleable(),\n            'is_wishlist' => (bool) auth()->guard()->user()?->wishlist_items\n                ->where('channel_id', core()->getCurrentChannel()->id)\n                ->where('product_id', $this->id)->count(),\n            'min_price'   => core()->formatPrice($productTypeInstance->getMinimalPrice()),\n            'prices'      => $productTypeInstance->getProductPrices(),\n            'price_html'  => $productTypeInstance->getPriceHtml(),\n            'ratings'     => [\n                'average' => $this->reviewHelper->getAverageRating($this),\n                'total'   => $this->reviewHelper->getTotalRating($this),\n            ],\n            'reviews'     => [\n                'total'   => $this->reviewHelper->getTotalReviews($this),\n            ],\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ProductReviewResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\ProductReviewResource.php",
                        "extension": "php",
                        "size": 731,
                        "sizeFormatted": "731 B",
                        "contentLength": 731,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass ProductReviewResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n\n        return [\n            'id'         => $this->id,\n            'name'       => $this->name,\n            'title'      => $this->title,\n            'comment'    => $this->comment,\n            'rating'     => $this->rating,\n            'images'     => $this->images,\n            'profile'    => $this->customer?->image_url,\n            'created_at' => $this->created_at->format('M d, Y'),\n        ];\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "WishlistResource.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Http\\Resources\\WishlistResource.php",
                        "extension": "php",
                        "size": 1453,
                        "sizeFormatted": "1.42 KB",
                        "contentLength": 1453,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\n\nclass WishlistResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id'      => $this->id,\n            'product' => new ProductResource($this->product),\n            'options' => $this->formatAdditionalAttributes(),\n        ];\n    }\n\n    /**\n     * Format the additional attributes.\n     */\n    public function formatAdditionalAttributes(): array\n    {\n        $additional = $this->resource->additional ?? [];\n\n        if (! empty($additional['attributes'])) {\n            $additional['attributes'] = collect($additional['attributes'])\n                ->map(function ($attribute) {\n                    if (\n                        isset($attribute['attribute_type'])\n                        && $attribute['attribute_type'] == 'file'\n                    ) {\n                        $attribute['file_name'] = File::basename($attribute['option_label']);\n\n                        $attribute['file_url'] = Storage::url($attribute['option_label']);\n                    }\n\n                    return $attribute;\n                })\n                ->toArray();\n        }\n\n        return $additional;\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Base.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\Base.php",
                        "extension": "php",
                        "size": 1244,
                        "sizeFormatted": "1.21 KB",
                        "contentLength": 1244,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Webkul\\Sales\\Contracts\\OrderComment;\n\nclass Base\n{\n    /**\n     * Get the locale of the customer if somehow item name changes then the english locale will pe provided.\n     *\n     * @param object \\Webkul\\Sales\\Contracts\\Order|\\Webkul\\Sales\\Contracts\\Invoice|\\Webkul\\Sales\\Contracts\\Refund|\\Webkul\\Sales\\Contracts\\Shipment|\\Webkul\\Sales\\Contracts\\OrderComment\n     * @return string\n     */\n    protected function getLocale($object)\n    {\n        if ($object instanceof OrderComment) {\n            $object = $object->order;\n        }\n\n        $objectFirstItem = $object->items->first();\n\n        return $objectFirstItem->additional['locale'] ?? 'en';\n    }\n\n    /**\n     * Prepare mail.\n     *\n     * @return void\n     */\n    protected function prepareMail($entity, $notification)\n    {\n        $customerLocale = $this->getLocale($entity);\n\n        $previousLocale = core()->getCurrentLocale()->code;\n\n        app()->setLocale($customerLocale);\n\n        try {\n            Mail::queue($notification);\n        } catch (\\Exception $e) {\n            \\Log::error('Error in Sending Email'.$e->getMessage());\n        }\n\n        app()->setLocale($previousLocale);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Customer.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\Customer.php",
                        "extension": "php",
                        "size": 2573,
                        "sizeFormatted": "2.51 KB",
                        "contentLength": 2573,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Webkul\\Shop\\Mail\\Customer\\EmailVerificationNotification;\nuse Webkul\\Shop\\Mail\\Customer\\NoteNotification;\nuse Webkul\\Shop\\Mail\\Customer\\RegistrationNotification;\nuse Webkul\\Shop\\Mail\\Customer\\SubscriptionNotification;\nuse Webkul\\Shop\\Mail\\Customer\\UpdatePasswordNotification;\n\nclass Customer extends Base\n{\n    /**\n     * After customer is created\n     *\n     * @param  \\Webkul\\Customer\\Contracts\\Customer  $customer\n     * @return void\n     */\n    public function afterCreated($customer)\n    {\n        if (core()->getConfigData('emails.general.notifications.emails.general.notifications.verification')) {\n            try {\n                if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.verification')) {\n                    return;\n                }\n\n                Mail::queue(new EmailVerificationNotification($customer));\n            } catch (\\Exception $e) {\n                \\Log::info('EmailVerificationNotification Error');\n\n                report($e);\n            }\n\n            return;\n        }\n\n        try {\n            if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.registration')) {\n                return;\n            }\n\n            Mail::queue(new RegistrationNotification($customer));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n\n    /**\n     * Send mail on updating password.\n     *\n     * @param  \\Webkul\\Customer\\Models\\Customer  $customer\n     * @return void\n     */\n    public function afterPasswordUpdated($customer)\n    {\n        try {\n            Mail::queue(new UpdatePasswordNotification($customer));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n\n    /**\n     * Send mail on subscribe\n     *\n     * @param  \\Webkul\\Customer\\Models\\Customer  $customer\n     * @return void\n     */\n    public function afterSubscribed($customer)\n    {\n        try {\n            Mail::queue(new SubscriptionNotification($customer));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n\n    /**\n     * Send mail on creating Note\n     *\n     * @param  \\Webkul\\Customer\\Models\\Customer  $customer\n     * @return void\n     */\n    public function afterNoteCreated($note)\n    {\n        if (! $note->customer_notified) {\n            return;\n        }\n\n        try {\n            Mail::queue(new NoteNotification($note));\n        } catch (\\Exception $e) {\n            session()->flash('warning', $e->getMessage());\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "GDPR.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\GDPR.php",
                        "extension": "php",
                        "size": 1329,
                        "sizeFormatted": "1.3 KB",
                        "contentLength": 1329,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Webkul\\Shop\\Mail\\Customer\\GDPR\\NewRequestNotification;\nuse Webkul\\Shop\\Mail\\Customer\\GDPR\\StatusUpdateNotification;\n\nclass GDPR extends Base\n{\n    /**\n     * Send mail on creating GDPR request\n     *\n     * @param  \\Webkul\\GDPR\\Models\\GDPRDataRequest  $gdprRequest\n     * @return void\n     */\n    public function afterGdprRequestCreated($gdprRequest)\n    {\n        if ($gdprRequest) {\n            try {\n                Mail::queue(new NewRequestNotification($gdprRequest));\n\n                session()->flash('success', trans('shop::app.customers.account.gdpr.success-verify'));\n            } catch (\\Exception) {\n                session()->flash('warning', trans('shop::app.customers.account.gdpr.success-verify-email-unsent'));\n            }\n        } else {\n            session()->flash('error', trans('shop::app.customers.account.gdpr.unable-to-sent'));\n        }\n    }\n\n    /**\n     * Send mail on creating GDPR request\n     *\n     * @param  \\Webkul\\GDPR\\Models\\GDPRDataRequest  $gdprRequest\n     * @return void\n     */\n    public function afterGdprRequestUpdated($gdprRequest)\n    {\n        try {\n            Mail::queue(new StatusUpdateNotification($gdprRequest));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Invoice.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\Invoice.php",
                        "extension": "php",
                        "size": 682,
                        "sizeFormatted": "682 B",
                        "contentLength": 682,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Webkul\\Shop\\Mail\\Order\\InvoicedNotification;\n\nclass Invoice extends Base\n{\n    /**\n     * After order is created\n     *\n     * @param  \\Webkul\\Sale\\Contracts\\Invoice  $invoice\n     * @return void\n     */\n    public function afterCreated($invoice)\n    {\n        try {\n            if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.new_invoice')) {\n                return;\n            }\n\n            $this->prepareMail($invoice, new InvoicedNotification($invoice));\n\n            $invoice->query()->update(['email_sent' => 1]);\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Order.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\Order.php",
                        "extension": "php",
                        "size": 1709,
                        "sizeFormatted": "1.67 KB",
                        "contentLength": 1709,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Webkul\\Sales\\Contracts\\Order as OrderContract;\nuse Webkul\\Shop\\Mail\\Order\\CanceledNotification;\nuse Webkul\\Shop\\Mail\\Order\\CommentedNotification;\nuse Webkul\\Shop\\Mail\\Order\\CreatedNotification;\n\nclass Order extends Base\n{\n    /**\n     * After order is created\n     *\n     * @return void\n     */\n    public function afterCreated(OrderContract $order)\n    {\n        try {\n            if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.new_order')) {\n                return;\n            }\n\n            $this->prepareMail($order, new CreatedNotification($order));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n\n    /**\n     * Send cancel order mail.\n     *\n     * @param  \\Webkul\\Sales\\Contracts\\Order  $order\n     * @return void\n     */\n    public function afterCanceled($order)\n    {\n        try {\n            if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.cancel_order')) {\n                return;\n            }\n\n            $this->prepareMail($order, new CanceledNotification($order));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n\n    /**\n     * Send order comment mail.\n     *\n     * @param  \\Webkul\\Sales\\Contracts\\OrderComment  $comment\n     * @return void\n     */\n    public function afterCommented($comment)\n    {\n        if (! $comment->customer_notified) {\n            return;\n        }\n\n        try {\n            /**\n             * Email to customer.\n             */\n            $this->prepareMail($comment, new CommentedNotification($comment));\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Refund.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\Refund.php",
                        "extension": "php",
                        "size": 674,
                        "sizeFormatted": "674 B",
                        "contentLength": 674,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Webkul\\Shop\\Mail\\Order\\RefundedNotification;\n\nclass Refund extends Base\n{\n    /**\n     * After order is created\n     *\n     * @param  \\Webkul\\Sale\\Contracts\\Refund  $refund\n     * @return void\n     */\n    public function afterCreated($refund)\n    {\n        try {\n            if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.new_refund')) {\n                return;\n            }\n\n            $this->prepareMail($refund, new RefundedNotification($refund));\n\n            $refund->query()->update(['email_sent' => 1]);\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Shipment.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Listeners\\Shipment.php",
                        "extension": "php",
                        "size": 688,
                        "sizeFormatted": "688 B",
                        "contentLength": 688,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Listeners;\n\nuse Webkul\\Shop\\Mail\\Order\\ShippedNotification;\n\nclass Shipment extends Base\n{\n    /**\n     * After order is created\n     *\n     * @param  \\Webkul\\Sale\\Contracts\\Shipment  $shipment\n     * @return void\n     */\n    public function afterCreated($shipment)\n    {\n        try {\n            if (! core()->getConfigData('emails.general.notifications.emails.general.notifications.new_shipment')) {\n                return;\n            }\n\n            $this->prepareMail($shipment, new ShippedNotification($shipment));\n\n            $shipment->query()->update(['email_sent' => 1]);\n        } catch (\\Exception $e) {\n            report($e);\n        }\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ContactUs.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\ContactUs.php",
                        "extension": "php",
                        "size": 1021,
                        "sizeFormatted": "1021 B",
                        "contentLength": 1021,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\n\nclass ContactUs extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public $contactUs) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address(\n                    core()->getAdminEmailDetails()['email'],\n                    core()->getAdminEmailDetails()['name']\n                ),\n            ],\n            subject: trans('shop::app.emails.contact-us.inquiry-from').' '.$this->contactUs['name'].' '.trans('shop::app.emails.contact-us.contact-from'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.contact-us',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "EmailVerificationNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\EmailVerificationNotification.php",
                        "extension": "php",
                        "size": 957,
                        "sizeFormatted": "957 B",
                        "contentLength": 957,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Customer\\Contracts\\Customer;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass EmailVerificationNotification extends Mailable\n{\n    /**\n     * Create a new mailable instance.\n     *\n     * @return void\n     */\n    public function __construct(public Customer $customer) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->customer->email),\n            ],\n            subject: trans('shop::app.emails.customers.verification.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.customers.email-verification',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "InvoiceOverdueReminder.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\InvoiceOverdueReminder.php",
                        "extension": "php",
                        "size": 1076,
                        "sizeFormatted": "1.05 KB",
                        "contentLength": 1076,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Admin\\Mail\\Mailable;\nuse Webkul\\Sales\\Contracts\\Invoice;\n\nclass InvoiceOverdueReminder extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public Invoice $invoice) {}\n\n    /**\n     * Build the message.\n     *\n     * @return $this\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address(\n                    core()->getSenderEmailDetails()['email'],\n                    core()->getSenderEmailDetails()['name']\n                ),\n            ],\n            subject: trans('shop::app.emails.customers.reminder.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.customers.invoice-reminder',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "NoteNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\NoteNotification.php",
                        "extension": "php",
                        "size": 951,
                        "sizeFormatted": "951 B",
                        "contentLength": 951,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Customer\\Models\\CustomerNote;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass NoteNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public CustomerNote $customerNote) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->customerNote->customer->email),\n            ],\n            subject: trans('shop::app.emails.orders.commented.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.customers.commented',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "RegistrationNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\RegistrationNotification.php",
                        "extension": "php",
                        "size": 946,
                        "sizeFormatted": "946 B",
                        "contentLength": 946,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Customer\\Contracts\\Customer;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass RegistrationNotification extends Mailable\n{\n    /**\n     * Create a new mailable instance.\n     *\n     * @return void\n     */\n    public function __construct(public Customer $customer) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->customer->email),\n            ],\n            subject: trans('shop::app.emails.customers.registration.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.customers.registration',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ResetPasswordNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\ResetPasswordNotification.php",
                        "extension": "php",
                        "size": 957,
                        "sizeFormatted": "957 B",
                        "contentLength": 957,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Auth\\Notifications\\ResetPassword;\nuse Illuminate\\Notifications\\Messages\\MailMessage;\n\nclass ResetPasswordNotification extends ResetPassword\n{\n    /**\n     * Build the mail representation of the notification.\n     *\n     * @param  mixed  $notifiable\n     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n     */\n    public function toMail($notifiable)\n    {\n        if (static::$toMailCallback) {\n            return call_user_func(static::$toMailCallback, $notifiable, $this->token);\n        }\n\n        return (new MailMessage)\n            ->from(core()->getSenderEmailDetails()['email'], core()->getSenderEmailDetails()['name'])\n            ->subject(__('shop::app.emails.customers.forgot-password.subject'))\n            ->view('shop::emails.customers.forgot-password', [\n                'userName' => $notifiable->name,\n                'token'    => $this->token,\n            ]);\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "SubscriptionNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\SubscriptionNotification.php",
                        "extension": "php",
                        "size": 1106,
                        "sizeFormatted": "1.08 KB",
                        "contentLength": 1106,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Core\\Contracts\\SubscribersList;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass SubscriptionNotification extends Mailable\n{\n    /**\n     * Create a mailable instance\n     *\n     * @return void\n     */\n    public function __construct(public SubscribersList $subscribersList) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->subscribersList->email),\n            ],\n            subject: trans('shop::app.emails.customers.subscribed.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.customers.subscribed',\n            with: [\n                'fullName' => trim($this->subscribersList->first_name.' '.$this->subscribersList->last_name),\n            ],\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "UpdatePasswordNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Customer\\UpdatePasswordNotification.php",
                        "extension": "php",
                        "size": 973,
                        "sizeFormatted": "973 B",
                        "contentLength": 973,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Customer;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Customer\\Models\\Customer;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass UpdatePasswordNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public Customer $customer) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->customer->email, $this->customer->name),\n            ],\n            subject: trans('shop::app.emails.customers.update-password.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.customers.update-password',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "Mailable.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Mailable.php",
                        "extension": "php",
                        "size": 718,
                        "sizeFormatted": "718 B",
                        "contentLength": 718,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Mail\\Mailable as BaseMailable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass Mailable extends BaseMailable implements ShouldQueue\n{\n    use Queueable, SerializesModels;\n\n    /**\n     * Add the sender to the message.\n     *\n     * @param  \\Illuminate\\Mail\\Message  $message\n     */\n    protected function buildFrom($message): Mailable\n    {\n        ! empty($this->from)\n            ? $message->from($this->from[0]['address'], $this->from[0]['name'])\n            : $message->from(core()->getSenderEmailDetails()['email'], core()->getSenderEmailDetails()['name']);\n\n        return $this;\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CanceledNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Order\\CanceledNotification.php",
                        "extension": "php",
                        "size": 926,
                        "sizeFormatted": "926 B",
                        "contentLength": 926,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Order;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass CanceledNotification extends Mailable\n{\n    /**\n     * Create a new CanceledNotification instance.\n     *\n     * @return void\n     */\n    public function __construct(public $order) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->order->customer_email, $this->order->customer_full_name),\n            ],\n            subject: trans('admin::app.emails.orders.canceled.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.orders.canceled',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CommentedNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Order\\CommentedNotification.php",
                        "extension": "php",
                        "size": 989,
                        "sizeFormatted": "989 B",
                        "contentLength": 989,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Order;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Sales\\Contracts\\OrderComment;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass CommentedNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public OrderComment $comment) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address($this->comment->order->customer_email, $this->comment->order->customer_full_name),\n            ],\n            subject: trans('shop::app.emails.orders.commented.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.orders.commented',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CreatedNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Order\\CreatedNotification.php",
                        "extension": "php",
                        "size": 1007,
                        "sizeFormatted": "1007 B",
                        "contentLength": 1007,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Order;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Sales\\Contracts\\Order;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass CreatedNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public Order $order) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address(\n                    $this->order->customer_email,\n                    $this->order->customer_full_name\n                ),\n            ],\n            subject: trans('shop::app.emails.orders.created.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.orders.created',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "InvoicedNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Order\\InvoicedNotification.php",
                        "extension": "php",
                        "size": 1034,
                        "sizeFormatted": "1.01 KB",
                        "contentLength": 1034,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Order;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Sales\\Contracts\\Invoice;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass InvoicedNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public Invoice $invoice) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address(\n                    $this->invoice->order->customer_email,\n                    $this->invoice->order->customer_full_name\n                ),\n            ],\n            subject: trans('shop::app.emails.orders.invoiced.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.orders.invoiced',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "RefundedNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Order\\RefundedNotification.php",
                        "extension": "php",
                        "size": 1029,
                        "sizeFormatted": "1 KB",
                        "contentLength": 1029,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Order;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Sales\\Contracts\\Refund;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass RefundedNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public Refund $refund) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address(\n                    $this->refund->order->customer_email,\n                    $this->refund->order->customer_full_name\n                ),\n            ],\n            subject: trans('shop::app.emails.orders.refunded.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.orders.refunded',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ShippedNotification.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Mail\\Order\\ShippedNotification.php",
                        "extension": "php",
                        "size": 1036,
                        "sizeFormatted": "1.01 KB",
                        "contentLength": 1036,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Mail\\Order;\n\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Webkul\\Sales\\Contracts\\Shipment;\nuse Webkul\\Shop\\Mail\\Mailable;\n\nclass ShippedNotification extends Mailable\n{\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct(public Shipment $shipment) {}\n\n    /**\n     * Get the message envelope.\n     */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            to: [\n                new Address(\n                    $this->shipment->order->customer_email,\n                    $this->shipment->order->customer_full_name\n                ),\n            ],\n            subject: trans('shop::app.emails.orders.shipped.subject'),\n        );\n    }\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'shop::emails.orders.shipped',\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "EventServiceProvider.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Providers\\EventServiceProvider.php",
                        "extension": "php",
                        "size": 2064,
                        "sizeFormatted": "2.02 KB",
                        "contentLength": 2064,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Providers;\n\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\nuse Webkul\\Shop\\Listeners\\Customer;\nuse Webkul\\Shop\\Listeners\\GDPR;\nuse Webkul\\Shop\\Listeners\\Invoice;\nuse Webkul\\Shop\\Listeners\\Order;\nuse Webkul\\Shop\\Listeners\\Refund;\nuse Webkul\\Shop\\Listeners\\Shipment;\n\nclass EventServiceProvider extends ServiceProvider\n{\n    /**\n     * The event handler mappings for the application.\n     *\n     * @var array\n     */\n    protected $listen = [\n        /**\n         * Customer related events.\n         */\n        'customer.registration.after' => [\n            [Customer::class, 'afterCreated'],\n        ],\n\n        'customer.password.update.after' => [\n            [Customer::class, 'afterPasswordUpdated'],\n        ],\n\n        'customer.subscription.after' => [\n            [Customer::class, 'afterSubscribed'],\n        ],\n\n        'customer.note.create.after' => [\n            [Customer::class, 'afterNoteCreated'],\n        ],\n\n        /**\n         * GDPR related events.\n         */\n        'customer.account.gdpr-request.create.after' => [\n            [GDPR::class, 'afterGdprRequestCreated'],\n        ],\n\n        'customer.account.gdpr-request.update.after' => [\n            [GDPR::class, 'afterGdprRequestUpdated'],\n        ],\n\n        /**\n         * Sales related events.\n         */\n        'checkout.order.save.after' => [\n            [Order::class, 'afterCreated'],\n        ],\n\n        'sales.order.cancel.after' => [\n            [Order::class, 'afterCanceled'],\n        ],\n\n        'sales.order.comment.create.after' => [\n            [Order::class, 'afterCommented'],\n        ],\n\n        'sales.invoice.save.after' => [\n            [Invoice::class, 'afterCreated'],\n        ],\n\n        'sales.invoice.send_duplicate_email' => [\n            [Invoice::class, 'afterCreated'],\n        ],\n\n        'sales.shipment.save.after' => [\n            [Shipment::class, 'afterCreated'],\n        ],\n\n        'sales.refund.save.after' => [\n            [Refund::class, 'afterCreated'],\n        ],\n    ];\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ModuleServiceProvider.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Providers\\ModuleServiceProvider.php",
                        "extension": "php",
                        "size": 160,
                        "sizeFormatted": "160 B",
                        "contentLength": 160,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Providers;\n\nuse Webkul\\Core\\Providers\\CoreModuleServiceProvider;\n\nclass ModuleServiceProvider extends CoreModuleServiceProvider {}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ShopServiceProvider.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Providers\\ShopServiceProvider.php",
                        "extension": "php",
                        "size": 2229,
                        "sizeFormatted": "2.18 KB",
                        "contentLength": 2229,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Providers;\n\nuse Illuminate\\Pagination\\Paginator;\nuse Illuminate\\Routing\\Router;\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\ServiceProvider;\nuse Webkul\\Core\\Http\\Middleware\\PreventRequestsDuringMaintenance;\nuse Webkul\\Shop\\Http\\Middleware\\AuthenticateCustomer;\nuse Webkul\\Shop\\Http\\Middleware\\CacheResponse;\nuse Webkul\\Shop\\Http\\Middleware\\Currency;\nuse Webkul\\Shop\\Http\\Middleware\\Locale;\nuse Webkul\\Shop\\Http\\Middleware\\Theme;\n\nclass ShopServiceProvider extends ServiceProvider\n{\n    /**\n     * Register services.\n     */\n    public function register(): void\n    {\n        $this->registerConfig();\n    }\n\n    /**\n     * Bootstrap services.\n     */\n    public function boot(Router $router): void\n    {\n        $router->middlewareGroup('shop', [\n            Theme::class,\n            Locale::class,\n            Currency::class,\n        ]);\n\n        $router->aliasMiddleware('theme', Theme::class);\n        $router->aliasMiddleware('locale', Locale::class);\n        $router->aliasMiddleware('currency', Currency::class);\n        $router->aliasMiddleware('cache.response', CacheResponse::class);\n        $router->aliasMiddleware('customer', AuthenticateCustomer::class);\n\n        Route::middleware(['web', 'shop', PreventRequestsDuringMaintenance::class])->group(__DIR__.'/../Routes/web.php');\n        Route::middleware(['web', 'shop', PreventRequestsDuringMaintenance::class])->group(__DIR__.'/../Routes/api.php');\n\n        $this->loadMigrationsFrom(__DIR__.'/../Database/Migrations');\n\n        $this->loadTranslationsFrom(__DIR__.'/../Resources/lang', 'shop');\n\n        $this->loadViewsFrom(__DIR__.'/../Resources/views', 'shop');\n\n        Paginator::defaultView('shop::partials.pagination');\n        Paginator::defaultSimpleView('shop::partials.pagination');\n\n        Blade::anonymousComponentPath(__DIR__.'/../Resources/views/components', 'shop');\n\n        $this->app->register(EventServiceProvider::class);\n    }\n\n    /**\n     * Register package config.\n     */\n    protected function registerConfig(): void\n    {\n        $this->mergeConfigFrom(\n            dirname(__DIR__).'/Config/menu.php',\n            'menu.customer'\n        );\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "manifest.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Resources\\manifest.php",
                        "extension": "php",
                        "size": 95,
                        "sizeFormatted": "95 B",
                        "contentLength": 95,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nreturn [\n    'name'    => 'Webkul Bagisto Shop',\n    'version' => core()->version(),\n];\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "api.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Routes\\api.php",
                        "extension": "php",
                        "size": 5539,
                        "sizeFormatted": "5.41 KB",
                        "contentLength": 5539,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Webkul\\Shop\\Http\\Controllers\\API\\AddressController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\CartController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\CategoryController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\CompareController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\CoreController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\CustomerController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\OnepageController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\ProductController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\ReviewController;\nuse Webkul\\Shop\\Http\\Controllers\\API\\WishlistController;\n\nRoute::group(['prefix' => 'api'], function () {\n    Route::controller(CoreController::class)->prefix('core')->group(function () {\n        Route::get('countries', 'getCountries')->name('shop.api.core.countries');\n\n        Route::get('states', 'getStates')->name('shop.api.core.states');\n    });\n\n    Route::controller(CategoryController::class)->prefix('categories')->group(function () {\n        Route::get('', 'index')->name('shop.api.categories.index');\n\n        Route::get('tree', 'tree')->name('shop.api.categories.tree');\n\n        Route::get('attributes', 'getAttributes')->name('shop.api.categories.attributes');\n\n        Route::get('attributes/{attribute_id}/options', 'getAttributeOptions')->name('shop.api.categories.attribute_options');\n\n        Route::get('max-price/{id?}', 'getProductMaxPrice')->name('shop.api.categories.max_price');\n    });\n\n    Route::controller(ProductController::class)->prefix('products')->group(function () {\n        Route::get('', 'index')->name('shop.api.products.index');\n\n        Route::get('{id}/related', 'relatedProducts')->name('shop.api.products.related.index');\n\n        Route::get('{id}/up-sell', 'upSellProducts')->name('shop.api.products.up-sell.index');\n    });\n\n    Route::controller(ReviewController::class)->prefix('product/{id}')->group(function () {\n        Route::get('reviews', 'index')->name('shop.api.products.reviews.index');\n\n        Route::post('review', 'store')->name('shop.api.products.reviews.store');\n\n        Route::get('reviews/{review_id}/translate', 'translate')->name('shop.api.products.reviews.translate');\n    });\n\n    Route::controller(CompareController::class)->prefix('compare-items')->group(function () {\n        Route::get('', 'index')->name('shop.api.compare.index');\n\n        Route::post('', 'store')->name('shop.api.compare.store');\n\n        Route::delete('', 'destroy')->name('shop.api.compare.destroy');\n\n        Route::delete('all', 'destroyAll')->name('shop.api.compare.destroy_all');\n    });\n\n    Route::controller(CartController::class)->prefix('checkout/cart')->group(function () {\n        Route::get('', 'index')->name('shop.api.checkout.cart.index');\n\n        Route::post('', 'store')->name('shop.api.checkout.cart.store');\n\n        Route::put('', 'update')->name('shop.api.checkout.cart.update');\n\n        Route::delete('', 'destroy')->name('shop.api.checkout.cart.destroy');\n\n        Route::delete('selected', 'destroySelected')->name('shop.api.checkout.cart.destroy_selected');\n\n        Route::post('move-to-wishlist', 'moveToWishlist')->name('shop.api.checkout.cart.move_to_wishlist');\n\n        Route::post('coupon', 'storeCoupon')->name('shop.api.checkout.cart.coupon.apply');\n\n        Route::post('estimate-shipping-methods', 'estimateShippingMethods')->name('shop.api.checkout.cart.estimate_shipping');\n\n        Route::delete('coupon', 'destroyCoupon')->name('shop.api.checkout.cart.coupon.remove');\n\n        Route::get('cross-sell', 'crossSellProducts')->name('shop.api.checkout.cart.cross-sell.index');\n    });\n\n    Route::controller(OnepageController::class)->prefix('checkout/onepage')->group(function () {\n        Route::get('summary', 'summary')->name('shop.checkout.onepage.summary');\n\n        Route::post('addresses', 'storeAddress')->name('shop.checkout.onepage.addresses.store');\n\n        Route::post('shipping-methods', 'storeShippingMethod')->name('shop.checkout.onepage.shipping_methods.store');\n\n        Route::post('payment-methods', 'storePaymentMethod')->name('shop.checkout.onepage.payment_methods.store');\n\n        Route::post('orders', 'storeOrder')->name('shop.checkout.onepage.orders.store');\n    });\n\n    /**\n     * Login routes.\n     */\n    Route::controller(CustomerController::class)->prefix('customer')->group(function () {\n        Route::post('login', 'login')->name('shop.api.customers.session.create');\n    });\n\n    Route::group(['middleware' => ['customer'], 'prefix' => 'customer'], function () {\n        Route::controller(AddressController::class)->prefix('addresses')->group(function () {\n            Route::get('', 'index')->name('shop.api.customers.account.addresses.index');\n\n            Route::post('', 'store')->name('shop.api.customers.account.addresses.store');\n\n            Route::put('edit/{id?}', 'update')->name('shop.api.customers.account.addresses.update');\n        });\n\n        Route::controller(WishlistController::class)->prefix('wishlist')->group(function () {\n            Route::get('', 'index')->name('shop.api.customers.account.wishlist.index');\n\n            Route::post('', 'store')->name('shop.api.customers.account.wishlist.store');\n\n            Route::post('{id}/move-to-cart', 'moveToCart')->name('shop.api.customers.account.wishlist.move_to_cart');\n\n            Route::delete('all', 'destroyAll')->name('shop.api.customers.account.wishlist.destroy_all');\n\n            Route::delete('{id}', 'destroy')->name('shop.api.customers.account.wishlist.destroy');\n        });\n    });\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "checkout-routes.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Routes\\checkout-routes.php",
                        "extension": "php",
                        "size": 567,
                        "sizeFormatted": "567 B",
                        "contentLength": 567,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Webkul\\Shop\\Http\\Controllers\\CartController;\nuse Webkul\\Shop\\Http\\Controllers\\OnepageController;\n\n/**\n * Cart routes.\n */\nRoute::controller(CartController::class)->prefix('checkout/cart')->group(function () {\n    Route::get('', 'index')->name('shop.checkout.cart.index');\n});\n\nRoute::controller(OnepageController::class)->prefix('checkout/onepage')->group(function () {\n    Route::get('', 'index')->name('shop.checkout.onepage.index');\n\n    Route::get('success', 'success')->name('shop.checkout.onepage.success');\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "customer-routes.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Routes\\customer-routes.php",
                        "extension": "php",
                        "size": 7583,
                        "sizeFormatted": "7.41 KB",
                        "contentLength": 7583,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Webkul\\Core\\Http\\Middleware\\NoCacheMiddleware;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\Account\\AddressController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\Account\\DownloadableProductController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\Account\\OrderController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\Account\\WishlistController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\CustomerController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\ForgotPasswordController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\GDPRController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\RegistrationController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\ResetPasswordController;\nuse Webkul\\Shop\\Http\\Controllers\\Customer\\SessionController;\nuse Webkul\\Shop\\Http\\Controllers\\DataGridController;\n\n\nRoute::prefix('customer')->group(function () {\n    /**\n     * Forgot password routes.\n     */\n    Route::controller(ForgotPasswordController::class)->prefix('forgot-password')->group(function () {\n        Route::get('', 'create')->name('shop.customers.forgot_password.create');\n\n        Route::post('', 'store')->name('shop.customers.forgot_password.store');\n    });\n\n    Route::controller(SessionController::class)->prefix('login')->group(function () {\n        Route::get('', 'index')->name('shop.customer.session.index');\n        Route::post('', 'store')->name('shop.customer.session.create');\n\n        // OTP routes\n        Route::post('phone/send-otp', 'sendPhoneOtp')->name('shop.customer.session.phone.send_otp');\n        Route::post('phone/verify-otp', 'verifyPhoneOtp')->name('shop.customer.session.phone.verify_otp');\n        Route::post('phone/resend-otp', 'resendPhoneOtp')->name('shop.customer.session.phone.resend_otp');\n    });\n\n    /**\n     * Reset password routes.\n     */\n    Route::controller(ResetPasswordController::class)->prefix('reset-password')->group(function () {\n        Route::get('{token}', 'create')->name('shop.customers.reset_password.create');\n\n        Route::post('', 'store')->name('shop.customers.reset_password.store');\n    });\n\n    /**\n     * Login routes.\n     */\n    Route::controller(SessionController::class)->prefix('login')->group(function () {\n        Route::get('', 'index')->name('shop.customer.session.index');\n\n        Route::post('', 'store')->name('shop.customer.session.create');\n    });\n\n    /**\n     * Registration routes.\n     */\n    Route::controller(RegistrationController::class)->group(function () {\n        Route::prefix('register')->group(function () {\n            Route::get('', 'index')->name('shop.customers.register.index');\n\n            Route::post('', 'store')->name('shop.customers.register.store');\n        });\n\n        /**\n         * Customer verification routes.\n         */\n        Route::get('verify-account/{token}', 'verifyAccount')->name('shop.customers.verify');\n\n        Route::get('resend/verification/{email}', 'resendVerificationEmail')->name('shop.customers.resend.verification_email');\n    });\n\n    /**\n     * Customer authenticated routes. All the below routes only be accessible\n     * if customer is authenticated.\n     */\n    Route::group(['middleware' => ['customer', NoCacheMiddleware::class]], function () {\n        /**\n         * Datagrid routes.\n         */\n        Route::get('datagrid/look-up', [DataGridController::class, 'lookUp'])->name('shop.customer.datagrid.look_up');\n\n        /**\n         * Logout.\n         */\n        Route::delete('logout', [SessionController::class, 'destroy'])->name('shop.customer.session.destroy');\n\n        /**\n         * Customer account. All the below routes are related to\n         * customer account details.\n         */\n        Route::prefix('account')->group(function () {\n            Route::get('', [CustomerController::class, 'account'])->name('shop.customers.account.index');\n\n            /**\n             * Wishlist.\n             */\n            Route::get('wishlist', [WishlistController::class, 'index'])->name('shop.customers.account.wishlist.index');\n\n            /**\n             * Profile.\n             */\n            Route::controller(CustomerController::class)->group(function () {\n                Route::prefix('profile')->group(function () {\n                    Route::get('', 'index')->name('shop.customers.account.profile.index');\n\n                    Route::get('edit', 'edit')->name('shop.customers.account.profile.edit');\n\n                    Route::post('edit', 'update')->name('shop.customers.account.profile.update');\n\n                    Route::post('destroy', 'destroy')->name('shop.customers.account.profile.destroy');\n                });\n\n                Route::get('reviews', 'reviews')->name('shop.customers.account.reviews.index');\n            });\n\n            /**\n             * GDPR.\n             */\n            Route::controller(GDPRController::class)->prefix('gdpr')->group(function () {\n                Route::get('', 'index')->name('shop.customers.account.gdpr.index');\n\n                Route::post('', 'store')->name('shop.customers.account.gdpr.store');\n\n                Route::get('pdf-view', 'pdfView')->name('shop.customers.account.gdpr.pdf-view');\n\n                Route::get('html-view', 'htmlView')->name('shop.customers.account.gdpr.html-view');\n\n                Route::get('revoke/{id}', 'revoke')->name('shop.customers.account.gdpr.revoke');\n            });\n\n            /**\n             * Cookie consent.\n             */\n            Route::get('your-cookie-consent-preferences', [GDPRController::class, 'cookieConsent'])\n                ->name('shop.customers.gdpr.cookie-consent');\n\n            /**\n             * Addresses.\n             */\n            Route::controller(AddressController::class)->prefix('addresses')->group(function () {\n                Route::get('', 'index')->name('shop.customers.account.addresses.index');\n\n                Route::get('create', 'create')->name('shop.customers.account.addresses.create');\n\n                Route::post('create', 'store')->name('shop.customers.account.addresses.store');\n\n                Route::get('edit/{id}', 'edit')->name('shop.customers.account.addresses.edit');\n\n                Route::put('edit/{id}', 'update')->name('shop.customers.account.addresses.update');\n\n                Route::patch('edit/{id}', 'makeDefault')->name('shop.customers.account.addresses.update.default');\n\n                Route::delete('delete/{id}', 'destroy')->name('shop.customers.account.addresses.delete');\n            });\n\n            /**\n             * Orders.\n             */\n            Route::controller(OrderController::class)->prefix('orders')->group(function () {\n                Route::get('', 'index')->name('shop.customers.account.orders.index');\n\n                Route::get('view/{id}', 'view')->name('shop.customers.account.orders.view');\n\n                Route::get('reorder/{id}', 'reorder')->name('shop.customers.account.orders.reorder');\n\n                Route::post('cancel/{id}', 'cancel')->name('shop.customers.account.orders.cancel');\n\n                Route::get('print/Invoice/{id}', 'printInvoice')->name('shop.customers.account.orders.print-invoice');\n            });\n\n            /**\n             * Downloadable products.\n             */\n            Route::controller(DownloadableProductController::class)->prefix('downloadable-products')->group(function () {\n                Route::get('', 'index')->name('shop.customers.account.downloadable_products.index');\n\n                Route::get('download/{id}', 'download')->name('shop.customers.account.downloadable_products.download');\n            });\n        });\n    });\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "store-front-routes.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Routes\\store-front-routes.php",
                        "extension": "php",
                        "size": 2402,
                        "sizeFormatted": "2.35 KB",
                        "contentLength": 2402,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Webkul\\Shop\\Http\\Controllers\\BookingProductController;\nuse Webkul\\Shop\\Http\\Controllers\\CompareController;\nuse Webkul\\Shop\\Http\\Controllers\\HomeController;\nuse Webkul\\Shop\\Http\\Controllers\\PageController;\nuse Webkul\\Shop\\Http\\Controllers\\ProductController;\nuse Webkul\\Shop\\Http\\Controllers\\ProductsCategoriesProxyController;\nuse Webkul\\Shop\\Http\\Controllers\\SearchController;\nuse Webkul\\Shop\\Http\\Controllers\\SubscriptionController;\n\n/**\n * CMS pages.\n */\nRoute::get('page/{slug}', [PageController::class, 'view'])\n    ->name('shop.cms.page')\n    ->middleware('cache.response');\n\n/**\n * Fallback route.\n */\nRoute::fallback(ProductsCategoriesProxyController::class.'@index')\n    ->name('shop.product_or_category.index')\n    ->middleware('cache.response');\n\n/**\n * Store front home.\n */\nRoute::get('/', [HomeController::class, 'index'])\n    ->name('shop.home.index')\n    ->middleware('cache.response');\n\nRoute::get('contact-us', [HomeController::class, 'contactUs'])\n    ->name('shop.home.contact_us')\n    ->middleware('cache.response');\n\nRoute::post('contact-us/send-mail', [HomeController::class, 'sendContactUsMail'])\n    ->name('shop.home.contact_us.send_mail')\n    ->middleware('cache.response');\n\n/**\n * Store front search.\n */\nRoute::get('search', [SearchController::class, 'index'])\n    ->name('shop.search.index')\n    ->middleware('cache.response');\n\nRoute::post('search/upload', [SearchController::class, 'upload'])->name('shop.search.upload');\n\n/**\n * Subscription routes.\n */\nRoute::controller(SubscriptionController::class)->group(function () {\n    Route::post('subscription', 'store')->name('shop.subscription.store');\n\n    Route::get('subscription/{token}', 'destroy')->name('shop.subscription.destroy');\n});\n\n/**\n * Compare products\n */\nRoute::get('compare', [CompareController::class, 'index'])\n    ->name('shop.compare.index')\n    ->middleware('cache.response');\n\n/**\n * Downloadable products\n */\nRoute::controller(ProductController::class)->group(function () {\n    Route::get('downloadable/download-sample/{type}/{id}', 'downloadSample')->name('shop.downloadable.download_sample');\n\n    Route::get('product/{id}/{attribute_id}', 'download')->name('shop.product.file.download');\n});\n\n/**\n * Booking products\n */\nRoute::get('booking-slots/{id}', [BookingProductController::class, 'index'])\n    ->name('shop.booking-product.slots.index');\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "web.php",
                        "relativePath": "packages/Webkul/Shop\\src\\Routes\\web.php",
                        "extension": "php",
                        "size": 340,
                        "sizeFormatted": "340 B",
                        "contentLength": 340,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\n/**\n * Store front routes.\n */\nrequire 'store-front-routes.php';\n\n/**\n * Customer routes. All routes related to customer\n * in storefront will be placed here.\n */\nrequire 'customer-routes.php';\n\n/**\n * Checkout routes. All routes related to checkout like\n * cart, coupons, etc will be placed here.\n */\nrequire 'checkout-routes.php';\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ShopTestBench.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Concerns\\ShopTestBench.php",
                        "extension": "php",
                        "size": 466,
                        "sizeFormatted": "466 B",
                        "contentLength": 466,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Tests\\Concerns;\n\nuse Webkul\\Customer\\Contracts\\Customer as CustomerContract;\nuse Webkul\\Faker\\Helpers\\Customer as CustomerFaker;\n\ntrait ShopTestBench\n{\n    /**\n     * Login as customer.\n     */\n    public function loginAsCustomer(?CustomerContract $customer = null): CustomerContract\n    {\n        $customer = $customer ?? (new CustomerFaker)->factory()->create();\n\n        $this->actingAs($customer);\n\n        return $customer;\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CategoryProductTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\API\\CategoryProductTest.php",
                        "extension": "php",
                        "size": 5531,
                        "sizeFormatted": "5.4 KB",
                        "contentLength": 5531,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Webkul\\Faker\\Helpers\\Category as CategoryFaker;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\nuse Webkul\\Product\\Helpers\\Toolbar;\n\nuse function Pest\\Laravel\\getJson;\n\nit('returns paginated category products', function () {\n    // Arrange.\n    $productsCount = 50;\n\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory)\n        ->count($productsCount)\n        ->create();\n\n    $availableLimits = (new Toolbar)->getAvailableLimits();\n\n    // Act and Assert.\n    $availableLimits->each(function ($limit) use ($specifiedCategory, $productsCount) {\n        getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'limit' => $limit]))\n            ->assertOk()\n            ->assertJsonCount($limit, 'data')\n            ->assertJsonPath('meta.total', $productsCount);\n    });\n});\n\nit('returns category products sorted by name descending', function () {\n    // Arrange.\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    $products = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory)\n        ->count(3)\n        ->create();\n\n    $expectedNamesInDescOrder = $products\n        ->map(fn ($product) => $product->name)\n        ->sortDesc()\n        ->toArray();\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'sort' => 'name-desc']))\n        ->assertOk()\n        ->assertSeeTextInOrder($expectedNamesInDescOrder);\n});\n\nit('returns category products sorted by name ascending', function () {\n    // Arrange.\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    $products = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory)\n        ->count(3)\n        ->create();\n\n    $expectedNamesInAscOrder = $products\n        ->map(fn ($product) => $product->name)\n        ->sort()\n        ->toArray();\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'sort' => 'name-asc']))\n        ->assertOk()\n        ->assertSeeTextInOrder($expectedNamesInAscOrder);\n});\n\nit('returns category products sorted by created_at descending', function () {\n    // Arrange.\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    $simpleProductFactory = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory);\n\n    $firstProduct = $simpleProductFactory->create([\n        'created_at' => now()->subYear(),\n    ]);\n\n    $secondProduct = $simpleProductFactory->create([\n        'created_at' => now()->subMonth(),\n    ]);\n\n    $lastProduct = $simpleProductFactory->create([\n        'created_at' => now(),\n    ]);\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'sort' => 'created_at-desc']))\n        ->assertOk()\n        ->assertSeeTextInOrder([\n            $lastProduct->id,\n            $secondProduct->id,\n            $firstProduct->id,\n        ]);\n});\n\nit('returns category products sorted by created_at ascending', function () {\n    // Arrange.\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    $simpleProductFactory = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory);\n\n    $firstProduct = $simpleProductFactory->create([\n        'created_at' => now()->subYear(),\n    ]);\n\n    $secondProduct = $simpleProductFactory->create([\n        'created_at' => now()->subMonth(),\n    ]);\n\n    $lastProduct = $simpleProductFactory->create([\n        'created_at' => now(),\n    ]);\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'sort' => 'created_at-asc']))\n        ->assertOk()\n        ->assertSeeTextInOrder([\n            $firstProduct->id,\n            $secondProduct->id,\n            $lastProduct->id,\n        ]);\n});\n\nit('returns category products sorted by price descending', function () {\n    // Arrange.\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    $products = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory)\n        ->count(3)\n        ->create();\n\n    $expectedPricesInDescOrder = $products\n        ->map(fn ($product) => $product->getTypeInstance()->getMinimalPrice())\n        ->sortDesc()\n        ->map(fn ($price) =>  core()->formatPrice($price))\n        ->toArray();\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'sort' => 'price-desc']))\n        ->assertOk()\n        ->assertSeeTextInOrder($expectedPricesInDescOrder);\n});\n\nit('returns category products sorted by price ascending', function () {\n    // Arrange.\n    $specifiedCategory = (new CategoryFaker)->factory()->create();\n\n    $products = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->hasAttached($specifiedCategory)\n        ->count(3)\n        ->create();\n\n    $expectedPricesInAscOrder = $products\n        ->map(fn ($product) => $product->getTypeInstance()->getMinimalPrice())\n        ->sort()\n        ->map(fn ($price) =>  core()->formatPrice($price))\n        ->toArray();\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index', ['category_id' => $specifiedCategory->id, 'sort' => 'price-asc']))\n        ->assertOk()\n        ->assertSeeTextInOrder($expectedPricesInAscOrder);\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ProductTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\API\\ProductTest.php",
                        "extension": "php",
                        "size": 1820,
                        "sizeFormatted": "1.78 KB",
                        "contentLength": 1820,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Pest\\Expectation;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\n\nuse function Pest\\Laravel\\getJson;\n\nit('returns a new products listing', function () {\n    // Arrange.\n    $newProductOptions = [\n        'attributes' => [\n            5 => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ];\n\n    (new ProductFaker($newProductOptions))\n        ->getSimpleProductFactory()\n        ->create();\n\n    // Act\n    $response = getJson(route('shop.api.products.index', ['new' => 1]))\n        ->assertOk()\n        ->collect();\n\n    // Assert\n    expect($response['data'])->each(function (Expectation $product) {\n        return $product->is_new->toBeTrue();\n    });\n});\n\nit('returns a featured products listing', function () {\n    // Arrange.\n    $featuredProductOptions = [\n        'attributes' => [\n            6 => 'featured',\n        ],\n\n        'attribute_value' => [\n            'featured' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ];\n\n    (new ProductFaker($featuredProductOptions))\n        ->getSimpleProductFactory()\n        ->create();\n\n    // Act\n    $response = getJson(route('shop.api.products.index', ['featured' => 1]))\n        ->assertOk()\n        ->collect();\n\n    // Assert\n    expect($response['data'])->each(function (Expectation $product) {\n        return $product->is_featured->toBeTrue();\n    });\n});\n\nit('returns all products listing', function () {\n    // Arrange.\n    $product = (new ProductFaker)\n        ->getSimpleProductFactory()\n        ->create();\n\n    // Act and Assert.\n    getJson(route('shop.api.products.index'))\n        ->assertOk()\n        ->assertJsonIsArray('data')\n        ->assertJsonFragment([\n            'id' => $product->id,\n        ]);\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CartTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\Checkout\\CartTest.php",
                        "extension": "php",
                        "size": 102620,
                        "sizeFormatted": "100.21 KB",
                        "contentLength": 50071,
                        "truncated": true
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Webkul\\Checkout\\Models\\Cart;\nuse Webkul\\Checkout\\Models\\CartAddress;\nuse Webkul\\Checkout\\Models\\CartItem;\nuse Webkul\\Core\\Models\\CoreConfig;\nuse Webkul\\Customer\\Models\\Customer;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\nuse Webkul\\Tax\\Models\\TaxCategory;\nuse Webkul\\Tax\\Models\\TaxMap;\nuse Webkul\\Tax\\Models\\TaxRate;\n\nuse function Pest\\Laravel\\deleteJson;\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\getJson;\nuse function Pest\\Laravel\\postJson;\nuse function Pest\\Laravel\\putJson;\n\nit('should display the cart items for a guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    cart()->setCart($cart);\n\n    cart()->collectTotals();\n\n    // Act and Assert.\n    $response = get(route('shop.api.checkout.cart.index'))\n        ->assertOk()\n        ->assertJsonPath('data.id', $cart->id)\n        ->assertJsonPath('data.is_guest', $cart->is_guest)\n        ->assertJsonPath('data.customer_id', $cart->customer_id)\n        ->assertJsonPath('data.items_count', 1)\n        ->assertJsonPath('data.items_qty', 1);\n\n    $cart->refresh();\n\n    $response->assertJsonPath('data.formatted_discount_amount', core()->currency($cart->discount_amount));\n\n    $this->assertPrice(! empty($cart->tax_total) ? $cart->tax_total : 0, $response['data']['tax_total']);\n\n    $this->assertPrice(! empty($cart->discount_amount) ? $cart->discount_amount : 0, $response['data']['discount_amount']);\n\n    $this->assertPrice($cart->grand_total, $response['data']['grand_total']);\n\n    $this->assertPrice($cart->sub_total, $response['data']['sub_total']);\n\n    foreach ($cart->items as $key => $cartItem) {\n        $response->assertJsonPath('data.items.'.$key.'.id', $cartItem->id);\n        $response->assertJsonPath('data.items.'.$key.'.quantity', $cartItem->quantity);\n        $response->assertJsonPath('data.items.'.$key.'.type', $cartItem->type);\n        $response->assertJsonPath('data.items.'.$key.'.name', $cartItem->name);\n        $response->assertJsonPath('data.items.'.$key.'.price', $cartItem->price);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_price', core()->formatPrice($cartItem->price));\n        $response->assertJsonPath('data.items.'.$key.'.total', $cartItem->total);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_total', core()->formatPrice($cartItem->total));\n        $response->assertJsonPath('data.items.'.$key.'.options', $cartItem->options ?? []);\n        $response->assertJsonPath('data.items.'.$key.'.product_url_key', $cartItem->product->url_key);\n    }\n});\n\nit('should display the cart items for a customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    cart()->setCart($cart);\n\n    cart()->collectTotals();\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    $response = get(route('shop.api.checkout.cart.index'))\n        ->assertOk()\n        ->assertJsonPath('data.id', $cart->id)\n        ->assertJsonPath('data.is_guest', $cart->is_guest)\n        ->assertJsonPath('data.customer_id', $cart->customer_id)\n        ->assertJsonPath('data.items_count', 1)\n        ->assertJsonPath('data.items_qty', 1);\n\n    $cart->refresh();\n\n    $response->assertJsonPath('data.formatted_discount_amount', core()->currency($cart->discount_amount));\n\n    $this->assertPrice(! empty($cart->tax_total) ? $cart->tax_total : 0, $response['data']['tax_total']);\n\n    $this->assertPrice(! empty($cart->discount_amount) ? $cart->discount_amount : 0, $response['data']['discount_amount']);\n\n    $this->assertPrice($cart->grand_total, $response['data']['grand_total']);\n\n    $this->assertPrice($cart->sub_total, $response['data']['sub_total']);\n\n    foreach ($cart->items as $key => $cartItem) {\n        $response->assertJsonPath('data.items.'.$key.'.id', $cartItem->id);\n        $response->assertJsonPath('data.items.'.$key.'.quantity', $cartItem->quantity);\n        $response->assertJsonPath('data.items.'.$key.'.type', $cartItem->type);\n        $response->assertJsonPath('data.items.'.$key.'.name', $cartItem->name);\n        $response->assertJsonPath('data.items.'.$key.'.price', $cartItem->price);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_price', core()->formatPrice($cartItem->price));\n        $response->assertJsonPath('data.items.'.$key.'.total', $cartItem->total);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_total', core()->formatPrice($cartItem->total));\n        $response->assertJsonPath('data.items.'.$key.'.options', $cartItem->options ?? []);\n        $response->assertJsonPath('data.items.'.$key.'.product_url_key', $cartItem->product->url_key);\n    }\n});\n\nit('should fails the validation error when the cart item id not provided when remove product items into the cart for a guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    // Act and Assert.\n    deleteJson(route('shop.api.checkout.cart.destroy'))\n        ->assertJsonValidationErrorFor('cart_item_id')\n        ->assertUnprocessable();\n});\n\nit('should fails the validation error when the cart item id not provided when remove product items into the cart for a customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    deleteJson(route('shop.api.checkout.cart.destroy'))\n        ->assertJsonValidationErrorFor('cart_item_id')\n        ->assertUnprocessable();\n});\n\nit('should fails the validation error when the wrong cart item id provided when remove product items to the cart for a guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    // Act and Assert.\n    deleteJson(route('shop.api.checkout.cart.destroy'), [\n        'cart_item_id' => 'WRONG_ID',\n    ])\n        ->assertJsonValidationErrorFor('cart_item_id')\n        ->assertUnprocessable();\n});\n\nit('should fails the validation error when the wrong cart item id provided when remove product items to the cart for a customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    $this->loginAsCustomer($customer);\n\n    // Act and Assert.\n    deleteJson(route('shop.api.checkout.cart.destroy'), [\n        'cart_item_id' => 'WRONG_ID',\n    ])\n        ->assertJsonValidationErrorFor('cart_item_id')\n        ->assertUnprocessable();\n});\n\nit('should remove only one product item from the cart for the guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    deleteJson(route('shop.api.checkout.cart.destroy', [\n        'cart_item_id' => $cartItem->id,\n    ]))\n        ->assertOk()\n        ->assertJsonPath('data', null)\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.success-remove'));\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem->id,\n    ]);\n\n    $this->assertDatabaseMissing('cart', [\n        'id' => $cart->id,\n    ]);\n});\n\nit('should remove only one product item from the cart for the customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    deleteJson(route('shop.api.checkout.cart.destroy', [\n        'cart_item_id' => $cartItem->id,\n    ]))\n        ->assertOk()\n        ->assertJsonPath('data', null)\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.success-remove'));\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem->id,\n    ]);\n\n    $this->assertDatabaseMissing('cart', [\n        'id' => $cart->id,\n    ]);\n});\n\nit('should only remove one product from the cart for now the cart will contains two products for a guest user', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->count(2)\n        ->create();\n\n    [$product1, $product2] = $products;\n\n    $cart = Cart::factory()->create();\n\n    $additional1 = [\n        'product_id' => $product1->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $additional2 = [\n        'product_id' => $product2->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem1 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product1->id,\n        'sku'               => $product1->sku,\n        'quantity'          => $additional1['quantity'],\n        'name'              => $product1->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product1->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional1['quantity'],\n        'base_total'        => $price * $additional1['quantity'],\n        'weight'            => $product1->weight ?? 0,\n        'total_weight'      => ($product1->weight ?? 0) * $additional1['quantity'],\n        'base_total_weight' => ($product1->weight ?? 0) * $additional1['quantity'],\n        'type'              => $product1->type,\n        'additional'        => $additional1,\n    ]);\n\n    $cartItem2 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product2->id,\n        'sku'               => $product2->sku,\n        'quantity'          => $additional2['quantity'],\n        'name'              => $product2->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product2->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional2['quantity'],\n        'base_total'        => $price * $additional2['quantity'],\n        'weight'            => $product2->weight ?? 0,\n        'total_weight'      => ($product2->weight ?? 0) * $additional2['quantity'],\n        'base_total_weight' => ($product2->weight ?? 0) * $additional2['quantity'],\n        'type'              => $product2->type,\n        'additional'        => $additional2,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $response = deleteJson(route('shop.api.checkout.cart.destroy'), [\n        'cart_item_id' => $cartItem1->id,\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.id', $cart->id)\n        ->assertJsonPath('data.is_guest', $cart->is_guest)\n        ->assertJsonPath('data.customer_id', $cart->customer_id)\n        ->assertJsonPath('data.items_count', 1)\n        ->assertJsonPath('data.items_qty', 1)\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.success-remove'));\n\n    $cart->refresh();\n\n    $cartItem2->refresh();\n\n    $response->assertJsonPath('data.formatted_discount_amount', core()->currency($cart->discount_amount));\n\n    $this->assertPrice(! empty($cart->tax_total) ? $cart->tax_total : 0, $response['data']['tax_total']);\n\n    $this->assertPrice(! empty($cart->discount_amount) ? $cart->discount_amount : 0, $response['data']['discount_amount']);\n\n    $this->assertPrice($cart->grand_total, $response['data']['grand_total']);\n\n    $this->assertPrice($cart->sub_total, $response['data']['sub_total']);\n\n    foreach ($cart->items as $key => $cartItem) {\n        $response->assertJsonPath('data.items.'.$key.'.id', $cartItem->id);\n        $response->assertJsonPath('data.items.'.$key.'.quantity', $cartItem->quantity);\n        $response->assertJsonPath('data.items.'.$key.'.type', $cartItem->type);\n        $response->assertJsonPath('data.items.'.$key.'.name', $cartItem->name);\n        $response->assertJsonPath('data.items.'.$key.'.price', $cartItem->price);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_price', core()->formatPrice($cartItem->price));\n        $response->assertJsonPath('data.items.'.$key.'.total', $cartItem->total);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_total', core()->formatPrice($cartItem->total));\n        $response->assertJsonPath('data.items.'.$key.'.options', $cartItem->options ?? []);\n        $response->assertJsonPath('data.items.'.$key.'.product_url_key', $cartItem->product->url_key);\n    }\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem1->id,\n    ]);\n\n    $cart->refresh();\n\n    $cartItem->refresh();\n\n    $this->assertModelWise([\n        Cart::class => [\n            $this->prepareCart($cart),\n        ],\n\n        CartItem::class => [\n            $this->prepareCartItem($cartItem),\n        ],\n    ]);\n});\n\nit('should only remove one product from the cart for now the cart will contains two products for a customer', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->count(2)\n        ->create();\n\n    [$product1, $product2] = $products;\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional1 = [\n        'product_id' => $product1->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $additional2 = [\n        'product_id' => $product2->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem1 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product1->id,\n        'sku'               => $product1->sku,\n        'quantity'          => $additional1['quantity'],\n        'name'              => $product1->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product1->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional1['quantity'],\n        'base_total'        => $price * $additional1['quantity'],\n        'weight'            => $product1->weight ?? 0,\n        'total_weight'      => ($product1->weight ?? 0) * $additional1['quantity'],\n        'base_total_weight' => ($product1->weight ?? 0) * $additional1['quantity'],\n        'type'              => $product1->type,\n        'additional'        => $additional1,\n    ]);\n\n    $cartItem2 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product2->id,\n        'sku'               => $product2->sku,\n        'quantity'          => $additional2['quantity'],\n        'name'              => $product2->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product2->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional2['quantity'],\n        'base_total'        => $price * $additional2['quantity'],\n        'weight'            => $product2->weight ?? 0,\n        'total_weight'      => ($product2->weight ?? 0) * $additional2['quantity'],\n        'base_total_weight' => ($product2->weight ?? 0) * $additional2['quantity'],\n        'type'              => $product2->type,\n        'additional'        => $additional2,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    $response = deleteJson(route('shop.api.checkout.cart.destroy'), [\n        'cart_item_id' => $cartItem1->id,\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.id', $cart->id)\n        ->assertJsonPath('data.is_guest', $cart->is_guest)\n        ->assertJsonPath('data.customer_id', $cart->customer_id)\n        ->assertJsonPath('data.items_count', $cart->items_count)\n        ->assertJsonPath('data.items_qty', 1)\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.success-remove'));\n\n    $cart->refresh();\n\n    $cartItem2->refresh();\n\n    $response->assertJsonPath('data.formatted_discount_amount', core()->currency($cart->discount_amount));\n\n    $this->assertPrice(! empty($cart->tax_total) ? $cart->tax_total : 0, $response['data']['tax_total']);\n\n    $this->assertPrice(! empty($cart->discount_amount) ? $cart->discount_amount : 0, $response['data']['discount_amount']);\n\n    $this->assertPrice($cart->grand_total, $response['data']['grand_total']);\n\n    $this->assertPrice($cart->sub_total, $response['data']['sub_total']);\n\n    foreach ($cart->items as $key => $cartItem) {\n        $response->assertJsonPath('data.items.'.$key.'.id', $cartItem->id);\n        $response->assertJsonPath('data.items.'.$key.'.quantity', $cartItem->quantity);\n        $response->assertJsonPath('data.items.'.$key.'.type', $cartItem->type);\n        $response->assertJsonPath('data.items.'.$key.'.name', $cartItem->name);\n        $response->assertJsonPath('data.items.'.$key.'.price', $cartItem->price);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_price', core()->formatPrice($cartItem->price));\n        $response->assertJsonPath('data.items.'.$key.'.total', $cartItem->total);\n        $response->assertJsonPath('data.items.'.$key.'.formatted_total', core()->formatPrice($cartItem->total));\n        $response->assertJsonPath('data.items.'.$key.'.options', $cartItem->options ?? []);\n        $response->assertJsonPath('data.items.'.$key.'.product_url_key', $cartItem->product->url_key);\n    }\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem1->id,\n    ]);\n\n    $cart->refresh();\n\n    $cartItem2->refresh();\n\n    $this->assertModelWise([\n        Cart::class => [\n            $this->prepareCart($cart),\n        ],\n\n        CartItem::class => [\n            $this->prepareCartItem($cartItem2),\n        ],\n    ]);\n});\n\nit('should remove all products from the cart for a guest user', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->count(2)\n        ->create();\n\n    [$product1, $product2] = $products;\n\n    $cart = Cart::factory()->create();\n\n    $additional1 = [\n        'product_id' => $product1->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $additional2 = [\n        'product_id' => $product2->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem1 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product1->id,\n        'sku'               => $product1->sku,\n        'quantity'          => $additional1['quantity'],\n        'name'              => $product1->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product1->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional1['quantity'],\n        'base_total'        => $price * $additional1['quantity'],\n        'weight'            => $product1->weight ?? 0,\n        'total_weight'      => ($product1->weight ?? 0) * $additional1['quantity'],\n        'base_total_weight' => ($product1->weight ?? 0) * $additional1['quantity'],\n        'type'              => $product1->type,\n        'additional'        => $additional1,\n    ]);\n\n    $cartItem2 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product2->id,\n        'sku'               => $product2->sku,\n        'quantity'          => $additional2['quantity'],\n        'name'              => $product2->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product2->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional2['quantity'],\n        'base_total'        => $price * $additional2['quantity'],\n        'weight'            => $product2->weight ?? 0,\n        'total_weight'      => ($product2->weight ?? 0) * $additional2['quantity'],\n        'base_total_weight' => ($product2->weight ?? 0) * $additional2['quantity'],\n        'type'              => $product2->type,\n        'additional'        => $additional2,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    deleteJson(route('shop.api.checkout.cart.destroy_selected'), [\n        'ids' => [$cartItem1->id, $cartItem2->id],\n    ]);\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem1->id,\n    ]);\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem2->id,\n    ]);\n});\n\nit('should remove all products from the cart for a customer', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->count(2)\n        ->create();\n\n    [$product1, $product2] = $products;\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional1 = [\n        'product_id' => $product1->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $additional2 = [\n        'product_id' => $product2->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem1 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product1->id,\n        'sku'               => $product1->sku,\n        'quantity'          => $additional1['quantity'],\n        'name'              => $product1->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product1->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional1['quantity'],\n        'base_total'        => $price * $additional1['quantity'],\n        'weight'            => $product1->weight ?? 0,\n        'total_weight'      => ($product1->weight ?? 0) * $additional1['quantity'],\n        'base_total_weight' => ($product1->weight ?? 0) * $additional1['quantity'],\n        'type'              => $product1->type,\n        'additional'        => $additional1,\n    ]);\n\n    $cartItem2 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product2->id,\n        'sku'               => $product2->sku,\n        'quantity'          => $additional2['quantity'],\n        'name'              => $product2->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product2->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional2['quantity'],\n        'base_total'        => $price * $additional2['quantity'],\n        'weight'            => $product2->weight ?? 0,\n        'total_weight'      => ($product2->weight ?? 0) * $additional2['quantity'],\n        'base_total_weight' => ($product2->weight ?? 0) * $additional2['quantity'],\n        'type'              => $product2->type,\n        'additional'        => $additional2,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    deleteJson(route('shop.api.checkout.cart.destroy_selected'), [\n        'ids' => [$cartItem1->id, $cartItem2->id],\n    ]);\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem1->id,\n    ]);\n\n    $this->assertDatabaseMissing('cart_items', [\n        'id' => $cartItem2->id,\n    ]);\n});\n\nit('should update cart quantities for guest user', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->count(2)\n        ->create();\n\n    [$product1, $product2] = $products;\n\n    $cart = Cart::factory()->create();\n\n    $additional1 = [\n        'product_id' => $product1->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $additional2 = [\n        'product_id' => $product2->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem1 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product1->id,\n        'sku'               => $product1->sku,\n        'quantity'          => $additional1['quantity'],\n        'name'              => $product1->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product1->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional1['quantity'],\n        'base_total'        => $price * $additional1['quantity'],\n        'weight'            => $product1->weight ?? 0,\n        'total_weight'      => ($product1->weight ?? 0) * $additional1['quantity'],\n        'base_total_weight' => ($product1->weight ?? 0) * $additional1['quantity'],\n        'type'              => $product1->type,\n        'additional'        => $additional1,\n    ]);\n\n    $cartItem2 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product2->id,\n        'sku'               => $product2->sku,\n        'quantity'          => $additional2['quantity'],\n        'name'              => $product2->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product2->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional2['quantity'],\n        'base_total'        => $price * $additional2['quantity'],\n        'weight'            => $product2->weight ?? 0,\n        'total_weight'      => ($product2->weight ?? 0) * $additional2['quantity'],\n        'base_total_weight' => ($product2->weight ?? 0) * $additional2['quantity'],\n        'type'              => $product2->type,\n        'additional'        => $additional2,\n    ]);\n\n    cart()->collectTotals();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $response = putJson(route('shop.api.checkout.cart.update'), [\n        'qty' => $data = [\n            $cartItem1->id => rand(2, 10),\n            $cartItem2->id => rand(2, 10),\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.id', $cart->id)\n        ->assertJsonPath('data.is_guest', $cart->is_guest)\n        ->assertJsonPath('data.customer_id', $cart->customer_id)\n        ->assertJsonPath('data.items_count', 2)\n        ->assertJsonPath('data.items_qty', array_sum($data))\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.index.quantity-update'));\n\n    $cart->refresh();\n\n    $cartItem1->refresh();\n\n    $cartItem2->refresh();\n\n    $response->assertJsonPath('data.formatted_discount_amount', core()->currency($cart->discount_amount));\n\n    $this->assertPrice(! empty($cart->tax_total) ? $cart->tax_total : 0, $response['data']['tax_total']);\n\n    $this->assertPrice(! empty($cart->discount_amount) ? $cart->discount_amount : 0, $response['data']['discount_amount']);\n\n    $this->assertPrice($cart->grand_total, $response['data']['grand_total']);\n\n    $this->assertPrice($cart->sub_total, $response['data']['sub_total']);\n\n    $cart->refresh();\n\n    $cartItem1->refresh();\n\n    $cartItem2->refresh();\n\n    $this->assertModelWise([\n        CartItem::class => [\n            $this->prepareCartItem($cartItem1),\n\n            $this->prepareCartItem($cartItem2),\n        ],\n    ]);\n\n    foreach ($cart->items as $cartItem) {\n        $this->assertModelWise([\n            CartItem::class => [\n                $this->prepareCartItem($cartItem),\n            ],\n        ]);\n    }\n});\n\nit('should update cart quantities for customer', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->count(2)\n        ->create();\n\n    [$product1, $product2] = $products;\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional1 = [\n        'product_id' => $product1->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $additional2 = [\n        'product_id' => $product2->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem1 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product1->id,\n        'sku'               => $product1->sku,\n        'quantity'          => $additional1['quantity'],\n        'name'              => $product1->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product1->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional1['quantity'],\n        'base_total'        => $price * $additional1['quantity'],\n        'weight'            => $product1->weight ?? 0,\n        'total_weight'      => ($product1->weight ?? 0) * $additional1['quantity'],\n        'base_total_weight' => ($product1->weight ?? 0) * $additional1['quantity'],\n        'type'              => $product1->type,\n        'additional'        => $additional1,\n    ]);\n\n    $cartItem2 = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product2->id,\n        'sku'               => $product2->sku,\n        'quantity'          => $additional2['quantity'],\n        'name'              => $product2->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product2->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional2['quantity'],\n        'base_total'        => $price * $additional2['quantity'],\n        'weight'            => $product2->weight ?? 0,\n        'total_weight'      => ($product2->weight ?? 0) * $additional2['quantity'],\n        'base_total_weight' => ($product2->weight ?? 0) * $additional2['quantity'],\n        'type'              => $product2->type,\n        'additional'        => $additional2,\n    ]);\n\n    cart()->setCart($cart);\n\n    cart()->collectTotals();\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    $response = putJson(route('shop.api.checkout.cart.update'), [\n        'qty' => $data = [\n            $cartItem1->id => rand(2, 10),\n            $cartItem2->id => rand(2, 10),\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.id', $cart->id)\n        ->assertJsonPath('data.is_guest', $cart->is_guest)\n        ->assertJsonPath('data.customer_id', $cart->customer_id)\n        ->assertJsonPath('data.items_count', 2)\n        ->assertJsonPath('data.items_qty', array_sum($data))\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.index.quantity-update'));\n\n    $cart->refresh();\n\n    $cartItem1->refresh();\n\n    $cartItem2->refresh();\n\n    $response->assertJsonPath('data.formatted_discount_amount', core()->currency($cart->discount_amount));\n\n    $this->assertPrice(! empty($cart->tax_total) ? $cart->tax_total : 0, $response['data']['tax_total']);\n\n    $this->assertPrice(! empty($cart->discount_amount) ? $cart->discount_amount : 0, $response['data']['discount_amount']);\n\n    $this->assertPrice($cart->grand_total, $response['data']['grand_total']);\n\n    $this->assertPrice($cart->sub_total, $response['data']['sub_total']);\n\n    $this->assertModelWise([\n        CartItem::class => [\n            $this->prepareCartItem($cartItem1),\n\n            $this->prepareCartItem($cartItem2),\n        ],\n    ]);\n\n    foreach ($cart->items as $cartItem) {\n        $this->assertModelWise([\n            CartItem::class => [\n                $this->prepareCartItem($cartItem),\n            ],\n        ]);\n    }\n});\n\nit('should fails the validation error when the product id not provided when add a simple product to the cart', function () {\n    // Arrange.\n    (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => rand(1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    postJson(route('shop.api.checkout.cart.store', [\n        'quantity' => rand(1, 10),\n    ]))\n        ->assertJsonValidationErrorFor('product_id')\n        ->assertUnprocessable();\n});\n\nit('should add a simple product to the cart for guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => rand(1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    $response = postJson(route('shop.api.checkout.cart.store', [\n        'product_id' => $product->id,\n        'quantity'   => $quantity = rand(1, 10),\n    ]))\n        ->assertOk()\n        ->assertJsonPath('data.items_count', 1)\n        ->assertJsonPath('data.is_guest', 1)\n        ->assertJsonPath('data.customer_id', null)\n        ->assertJsonPath('data.items_qty', $quantity)\n        ->assertJsonPath('data.tax_total', 0)\n        ->assertJsonPath('data.discount_amount', 0)\n        ->assertJsonPath('data.coupon_code', null)\n        ->assertJsonPath('data.items.0.type', $product->type)\n        ->assertJsonPath('data.items.0.name', $product->name)\n        ->assertJsonPath('data.items.0.quantity', $quantity)\n        ->assertJsonPath('data.billing_address', null)\n        ->assertJsonPath('data.shipping_address', null)\n        ->assertJsonPath('data.have_stockable_items', true)\n        ->assertJsonPath('data.payment_method', null)\n        ->assertJsonPath('message', trans('shop::app.checkout.cart.item-add-to-cart'));\n\n    $this->assertPrice($product->price, $response['data']['items'][0]['price']);\n\n    $this->assertPrice($product->price * $quantity, $response['data']['grand_total']);\n\n    $this->assertPrice($product->price * $quantity, $response['data']['sub_total']);\n});\n\nit('should add a simple product to the cart for customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => rand(1000, 5000),\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    $customer = $this->loginAsCustomer();\n\n    $response = postJson(route('shop.api.checkout.cart.store', [\n        'product_id' => $product->id,\n        'quantity'   => $quantity = rand(1, 10),\n    ]))\n        ->assertOk()\n        ->assertJsonPath('data.items_count', 1)\n        ->assertJsonPath('data.is_guest', 0)\n        ->assertJsonPath('data.customer_id', $customer->id)\n        ->assertJsonPath('data.items_qty', $quantity)\n        ->assertJsonPath('data.tax_total', 0)\n        ->assertJsonPath('data.discount_amount', 0)\n        ->assertJsonPath('data.coupon_code', null)\n        ->assertJsonPath('data.items.0.type', $product->type)\n        ->assertJsonPath('data.items.0.name', $product->name)\n        ->assertJsonPath('data.items.0.quantity', $quantity)\n \n\n... [تم قطع المحتوى - الطول الأصلي: 100.21 KB]"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "CheckoutTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\Checkout\\CheckoutTest.php",
                        "extension": "php",
                        "size": 172896,
                        "sizeFormatted": "168.84 KB",
                        "contentLength": 50071,
                        "truncated": true
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Webkul\\Admin\\Mail\\Order\\CreatedNotification as AdminOrderCreatedNotification;\nuse Webkul\\Checkout\\Models\\Cart;\nuse Webkul\\Checkout\\Models\\CartAddress;\nuse Webkul\\Checkout\\Models\\CartItem;\nuse Webkul\\Checkout\\Models\\CartPayment;\nuse Webkul\\Checkout\\Models\\CartShippingRate;\nuse Webkul\\Customer\\Models\\Customer;\nuse Webkul\\Customer\\Models\\CustomerAddress;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\nuse Webkul\\Product\\Models\\ProductInventoryIndex;\nuse Webkul\\Product\\Models\\ProductOrderedInventory;\nuse Webkul\\Sales\\Models\\Order;\nuse Webkul\\Sales\\Models\\OrderAddress;\nuse Webkul\\Sales\\Models\\OrderItem;\nuse Webkul\\Sales\\Models\\OrderPayment;\nuse Webkul\\Shop\\Mail\\Order\\CreatedNotification as ShopOrderCreatedNotification;\n\nuse function Pest\\Laravel\\postJson;\n\nit('should handle certain validation errors when storing the guest user address for cart billing and shipping', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    postJson(route('shop.checkout.onepage.addresses.store'), [\n        'shipping' => [],\n        'billing'  => [],\n    ])\n        ->assertJsonValidationErrorFor('billing.first_name')\n        ->assertJsonValidationErrorFor('billing.last_name')\n        ->assertJsonValidationErrorFor('billing.email')\n        ->assertJsonValidationErrorFor('billing.address')\n        ->assertJsonValidationErrorFor('billing.city')\n        ->assertJsonValidationErrorFor('billing.phone')\n        ->assertJsonValidationErrorFor('shipping.first_name')\n        ->assertJsonValidationErrorFor('shipping.last_name')\n        ->assertJsonValidationErrorFor('shipping.email')\n        ->assertJsonValidationErrorFor('shipping.address')\n        ->assertJsonValidationErrorFor('shipping.city')\n        ->assertJsonValidationErrorFor('shipping.phone')\n        ->assertUnprocessable();\n});\n\nit('should handle certain validation errors when storing the customer address for cart billing and shipping', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.checkout.onepage.addresses.store'), [\n        'shipping' => [],\n        'billing'  => [],\n    ])\n        ->assertJsonValidationErrorFor('billing.first_name')\n        ->assertJsonValidationErrorFor('billing.last_name')\n        ->assertJsonValidationErrorFor('billing.email')\n        ->assertJsonValidationErrorFor('billing.address')\n        ->assertJsonValidationErrorFor('billing.city')\n        ->assertJsonValidationErrorFor('billing.phone')\n        ->assertJsonValidationErrorFor('shipping.first_name')\n        ->assertJsonValidationErrorFor('shipping.last_name')\n        ->assertJsonValidationErrorFor('shipping.email')\n        ->assertJsonValidationErrorFor('shipping.address')\n        ->assertJsonValidationErrorFor('shipping.city')\n        ->assertJsonValidationErrorFor('shipping.phone')\n        ->assertUnprocessable();\n});\n\nit('should store the shipping address as the billing address when use_for_shipping key is set to true in billing for guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $response = postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => $billingAddress = [\n            ...$customerAddress,\n            'use_for_shipping' => 1,\n            'address'          => [fake()->address()],\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('redirect', false)\n        ->assertJsonPath('data.shippingMethods.flatrate.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier', 'flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method', 'flatrate_flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.price', 10)\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.base_price', 10)\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier', 'free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method', 'free_free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.price', 0)\n        ->assertJsonPath('data.shippingMethods.free.rates.0.base_price', 0);\n\n    $response->assertJsonPath('data.shippingMethods.flatrate.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $response->assertJsonPath('data.shippingMethods.free.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $this->assertModelWise([\n        CartAddress::class => [\n            [\n                'address'          => implode(\"\\n\", $billingAddress['address']),\n                'address_type'     => CartAddress::ADDRESS_TYPE_BILLING,\n                'cart_id'          => $cart->id,\n                'use_for_shipping' => $billingAddress['use_for_shipping'],\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n\n        CartAddress::class => [\n            [\n                'address'      => implode(\"\\n\", $billingAddress['address']),\n                'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n                'cart_id'      => $cart->id,\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n    ]);\n});\n\nit('should store the billing and shipping address for guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $response = postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => $billingAddress = [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => 0,\n        ],\n\n        'shipping' => $shippingAddress = [\n            ...$customerAddress,\n            'address' => [fake()->address()],\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('redirect', false)\n        ->assertJsonPath('data.shippingMethods.flatrate.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier', 'flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method', 'flatrate_flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.price', 10)\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.base_price', 10)\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier', 'free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method', 'free_free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.price', 0)\n        ->assertJsonPath('data.shippingMethods.free.rates.0.base_price', 0);\n\n    $response->assertJsonPath('data.shippingMethods.flatrate.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $response->assertJsonPath('data.shippingMethods.free.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $this->assertModelWise([\n        CartAddress::class => [\n            [\n                'address'          => implode(\"\\n\", $billingAddress['address']),\n                'address_type'     => CartAddress::ADDRESS_TYPE_BILLING,\n                'cart_id'          => $cart->id,\n                'use_for_shipping' => $billingAddress['use_for_shipping'],\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n\n        CartAddress::class => [\n            [\n                'address'      => implode(\"\\n\", $shippingAddress['address']),\n                'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n                'cart_id'      => $cart->id,\n                ...Arr::only($shippingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n    ]);\n});\n\nit('should store the billing address for non stockable items for guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getVirtualProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => $billingAddress = [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => 1,\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.payment_methods.0.method', 'moneytransfer')\n        ->assertJsonPath('data.payment_methods.0.method_title', 'Money Transfer')\n        ->assertJsonPath('data.payment_methods.0.description', 'Money Transfer')\n        ->assertJsonPath('data.payment_methods.0.sort', 2)\n        ->assertJsonPath('data.payment_methods.1.method', 'paypal_standard')\n        ->assertJsonPath('data.payment_methods.1.method_title', 'PayPal Standard')\n        ->assertJsonPath('data.payment_methods.1.description', 'PayPal Standard')\n        ->assertJsonPath('data.payment_methods.1.sort', 3)\n        ->assertJsonPath('data.payment_methods.2.method', 'paypal_smart_button')\n        ->assertJsonPath('data.payment_methods.2.method_title', 'PayPal Smart Button')\n        ->assertJsonPath('data.payment_methods.2.description', 'PayPal')\n        ->assertJsonPath('data.payment_methods.2.sort', 4)\n        ->assertJsonPath('redirect', false);\n\n    $this->assertModelWise([\n        CartAddress::class => [\n            [\n                'address'          => implode(\"\\n\", $billingAddress['address']),\n                'address_type'     => CartAddress::ADDRESS_TYPE_BILLING,\n                'cart_id'          => $cart->id,\n                'use_for_shipping' => $billingAddress['use_for_shipping'],\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n    ]);\n});\n\nit('should store the shipping address as the billing address when use_for_shipping key is set to true in billing for customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    $response = postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => $billingAddress = [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => 1,\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('redirect', false)\n        ->assertJsonPath('data.shippingMethods.flatrate.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier', 'flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method', 'flatrate_flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.price', 10)\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.base_price', 10)\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier', 'free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method', 'free_free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.price', 0)\n        ->assertJsonPath('data.shippingMethods.free.rates.0.base_price', 0);\n\n    $response->assertJsonPath('data.shippingMethods.flatrate.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $response->assertJsonPath('data.shippingMethods.free.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $this->assertModelWise([\n        CartAddress::class => [\n            [\n                'address'          => implode(\"\\n\", $billingAddress['address']),\n                'address_type'     => CartAddress::ADDRESS_TYPE_BILLING,\n                'cart_id'          => $cart->id,\n                'use_for_shipping' => $billingAddress['use_for_shipping'],\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n\n        CartAddress::class => [\n            [\n                'address'      => implode(\"\\n\", $billingAddress['address']),\n                'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n                'cart_id'      => $cart->id,\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n    ]);\n});\n\nit('should store the billing and shipping address for customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    $response = postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => $billingAddress = [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => 0,\n        ],\n\n        'shipping' => $shippingAddress = [\n            ...$customerAddress,\n            'address' => [fake()->address()],\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('redirect', false)\n        ->assertJsonPath('data.shippingMethods.flatrate.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier', 'flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.carrier_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method', 'flatrate_flatrate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.method_title', 'Flat Rate')\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.price', 10)\n        ->assertJsonPath('data.shippingMethods.flatrate.rates.0.base_price', 10)\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier', 'free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.carrier_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method', 'free_free')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.method_title', 'Free Shipping')\n        ->assertJsonPath('data.shippingMethods.free.rates.0.price', 0)\n        ->assertJsonPath('data.shippingMethods.free.rates.0.base_price', 0);\n\n    $response->assertJsonPath('data.shippingMethods.flatrate.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $response->assertJsonPath('data.shippingMethods.free.rates.0.cart_address_id', $cart->shipping_address->id);\n\n    $this->assertModelWise([\n        CartAddress::class => [\n            [\n                'address'          => implode(\"\\n\", $billingAddress['address']),\n                'address_type'     => CartAddress::ADDRESS_TYPE_BILLING,\n                'cart_id'          => $cart->id,\n                'use_for_shipping' => $billingAddress['use_for_shipping'],\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n\n        CartAddress::class => [\n            [\n                'address'      => implode(\"\\n\", $shippingAddress['address']),\n                'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n                'cart_id'      => $cart->id,\n                ...Arr::only($shippingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n    ]);\n});\n\nit('should store the billing address for non stockable items for customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getVirtualProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => $billingAddress = [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => 1,\n        ],\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.payment_methods.0.method', 'moneytransfer')\n        ->assertJsonPath('data.payment_methods.0.method_title', 'Money Transfer')\n        ->assertJsonPath('data.payment_methods.0.description', 'Money Transfer')\n        ->assertJsonPath('data.payment_methods.0.sort', 2)\n        ->assertJsonPath('data.payment_methods.1.method', 'paypal_standard')\n        ->assertJsonPath('data.payment_methods.1.method_title', 'PayPal Standard')\n        ->assertJsonPath('data.payment_methods.1.description', 'PayPal Standard')\n        ->assertJsonPath('data.payment_methods.1.sort', 3)\n        ->assertJsonPath('data.payment_methods.2.method', 'paypal_smart_button')\n        ->assertJsonPath('data.payment_methods.2.method_title', 'PayPal Smart Button')\n        ->assertJsonPath('data.payment_methods.2.description', 'PayPal')\n        ->assertJsonPath('data.payment_methods.2.sort', 4)\n        ->assertJsonPath('redirect', false);\n\n    $this->assertModelWise([\n        CartAddress::class => [\n            [\n                'address'          => implode(\"\\n\", $billingAddress['address']),\n                'address_type'     => CartAddress::ADDRESS_TYPE_BILLING,\n                'cart_id'          => $cart->id,\n                'use_for_shipping' => $billingAddress['use_for_shipping'],\n                ...Arr::only($billingAddress, ['first_name', 'last_name', 'company_name', 'city', 'state', 'country', 'email', 'postcode', 'phone']),\n            ],\n        ],\n    ]);\n});\n\nit('should fails the certain validation errors when use for shipping is set to false in billing address and shipping address not provided for customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => false,\n        ],\n    ])\n        ->assertJsonValidationErrorFor('shipping.first_name')\n        ->assertJsonValidationErrorFor('shipping.last_name')\n        ->assertJsonValidationErrorFor('shipping.email')\n        ->assertJsonValidationErrorFor('shipping.address')\n        ->assertJsonValidationErrorFor('shipping.city')\n        ->assertJsonValidationErrorFor('shipping.phone')\n        ->assertUnprocessable();\n});\n\nit('should fails the certain validation errors when use for shipping is set to false in billing address and shipping address not provided for guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    $customerAddress = CustomerAddress::factory()->create()->toArray();\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    postJson(route('shop.checkout.onepage.addresses.store'), [\n        'billing' => [\n            ...$customerAddress,\n            'address'          => [fake()->address()],\n            'use_for_shipping' => false,\n        ],\n    ])\n        ->assertJsonValidationErrorFor('shipping.first_name')\n        ->assertJsonValidationErrorFor('shipping.last_name')\n        ->assertJsonValidationErrorFor('shipping.email')\n        ->assertJsonValidationErrorFor('shipping.address')\n        ->assertJsonValidationErrorFor('shipping.city')\n        ->assertJsonValidationErrorFor('shipping.phone')\n        ->assertUnprocessable();\n});\n\nit('should fails the validation error when shipping method not providing when store the shipping method for the guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    postJson(route('shop.checkout.onepage.shipping_methods.store'))\n        ->assertJsonValidationErrorFor('shipping_method')\n        ->assertUnprocessable();\n});\n\nit('should fails the validation error when shipping method not providing when store the shipping method for the customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.checkout.onepage.shipping_methods.store'))\n        ->assertJsonValidationErrorFor('shipping_method')\n        ->assertUnprocessable();\n});\n\nit('should store the shipping method for guest user', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            26 => 'guest_checkout',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $cart = Cart::factory()->create();\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    postJson(route('shop.checkout.onepage.shipping_methods.store'), [\n        'shipping_method' => 'free_free',\n    ])\n        ->assertOk()\n        ->assertJsonPath('payment_methods.0.method', 'cashondelivery')\n        ->assertJsonPath('payment_methods.0.method_title', 'Cash On Delivery')\n        ->assertJsonPath('payment_methods.0.description', 'Cash On Delivery')\n        ->assertJsonPath('payment_methods.0.sort', 1)\n        ->assertJsonPath('payment_methods.1.method', 'moneytransfer')\n        ->assertJsonPath('payment_methods.1.method_title', 'Money Transfer')\n        ->assertJsonPath('payment_methods.1.description', 'Money Transfer')\n        ->assertJsonPath('payment_methods.1.sort', 2)\n        ->assertJsonPath('payment_methods.2.method', 'paypal_standard')\n        ->assertJsonPath('payment_methods.2.method_title', 'PayPal Standard')\n        ->assertJsonPath('payment_methods.2.description', 'PayPal Standard')\n        ->assertJsonPath('payment_methods.2.sort', 3)\n        ->assertJsonPath('payment_methods.3.method', 'paypal_smart_button')\n        ->assertJsonPath('payment_methods.3.method_title', 'PayPal Smart Button')\n        ->assertJsonPath('payment_methods.3.description', 'PayPal')\n        ->assertJsonPath('payment_methods.3.sort', 4);\n});\n\nit('should store the shipping method for customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    CartItem::factory()->create([\n        'cart_id'             => $cart->id,\n        'product_id'          => $product->id,\n        'sku'                 => $product->sku,\n        'quantity'            => $additional['quantity'],\n        'name'                => $product->name,\n        'price'               => $convertedPrice = core()->convertPrice($price = $product->price),\n        'price_incl_tax'      => $convertedPrice,\n        'base_price'          => $price,\n        'base_price_incl_tax' => $price,\n        'total'               => $total = $convertedPrice * $additional['quantity'],\n        'total_incl_tax'      => $total,\n        'base_total'          => $price * $additional['quantity'],\n        'weight'              => $product->weight ?? 0,\n        'total_weight'        => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight'   => ($product->weight ?? 0) * $additional['quantity'],\n        'type'                => $product->type,\n        'additional'          => $additional,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    cart()->setCart($cart);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.checkout.onepage.shipping_methods.store'), [\n        'shipping_method' => 'free_free',\n    ])\n        ->assertOk()\n        ->assertJsonPath('payment_methods.0.method', 'cashondelivery')\n        ->assertJsonPath('payment_methods.0.method_title', 'Cash On Delivery')\n        ->assertJsonPath('payment_methods.0.description', 'Cash On Delivery')\n        ->assert\n\n... [تم قطع المحتوى - الطول الأصلي: 168.84 KB]"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "AccountTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\Customers\\AccountTest.php",
                        "extension": "php",
                        "size": 17383,
                        "sizeFormatted": "16.98 KB",
                        "contentLength": 17383,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Webkul\\Customer\\Models\\Customer;\nuse Webkul\\Customer\\Models\\CustomerAddress;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\nuse Webkul\\Product\\Models\\ProductReview;\nuse Webkul\\Shop\\Mail\\Customer\\ResetPasswordNotification;\nuse Webkul\\Shop\\Mail\\Customer\\UpdatePasswordNotification;\n\nuse function Pest\\Laravel\\deleteJson;\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\patchJson;\nuse function Pest\\Laravel\\postJson;\nuse function Pest\\Laravel\\putJson;\n\nit('should returns the profile page', function () {\n    // Act and Assert.\n    $customer = $this->loginAsCustomer();\n\n    get(route('shop.customers.account.profile.index'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.profile.index.edit'))\n        ->assertSeeText(trans('shop::app.customers.account.profile.index.delete'))\n        ->assertSeeText($customer->first_name)\n        ->assertSeeText($customer->last_name)\n        ->assertSeeText($customer->email);\n});\n\nit('should returns the edit page of the customer', function () {\n    // Act and Assert.\n    $customer = $this->loginAsCustomer();\n\n    get(route('shop.customers.account.profile.edit'))\n        ->assertOk()\n        ->assertSeeText($customer->email)\n        ->assertSeeText($customer->first_name)\n        ->assertSeeText(trans('shop::app.customers.account.profile.edit.edit-profile'));\n});\n\nit('should fails the validations error when certain inputs are not provided when update the customer', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.customers.account.profile.update'), [\n        'gender'                    => 'UNKNOWN_GENDER',\n        'date_of_birth'             => now()->tomorrow()->toDateString(),\n        'email'                     => 'WRONG_EMAIL_FORMAT',\n        'image'                     => 'INVALID_FORMAT_IMAGE',\n    ])\n        ->assertJsonValidationErrorFor('first_name')\n        ->assertJsonValidationErrorFor('last_name')\n        ->assertJsonValidationErrorFor('gender')\n        ->assertJsonValidationErrorFor('phone')\n        ->assertJsonValidationErrorFor('date_of_birth')\n        ->assertJsonValidationErrorFor('email')\n        ->assertJsonValidationErrorFor('image')\n        ->assertUnprocessable();\n});\n\nit('should update the customer', function () {\n    // Act and Assert.\n    $customer = $this->loginAsCustomer();\n\n    postJson(route('shop.customers.account.profile.update'), [\n        'first_name'                => $firstName = 'test',\n        'last_name'                 => $lastName = fake()->lastName(),\n        'gender'                    => $gender = fake()->randomElement(['Other', 'Male', 'Female']),\n        'email'                     => $customer->email,\n        'status'                    => 1,\n        'customer_group_id'         => 2,\n        'phone'                     => $phone = fake()->e164PhoneNumber(),\n        'date_of_birth'             => now()->subYear(20)->toDateString(),\n        'subscribed_to_news_letter' => true,\n        'image'                     => [\n            UploadedFile::fake()->image('TEST.png'),\n        ],\n    ])\n        ->assertRedirect(route('shop.customers.account.profile.index'));\n\n    $this->assertModelWise([\n        Customer::class => [\n            [\n                'first_name'        => $firstName,\n                'last_name'         => $lastName,\n                'gender'            => $gender,\n                'email'             => $customer->email,\n                'status'            => 1,\n                'customer_group_id' => 2,\n                'phone'             => $phone,\n            ],\n        ],\n    ]);\n});\n\nit('should update the customer password and send email to the customer', function () {\n    // Act and Assert.\n    Mail::fake();\n\n    $customer = Customer::factory()->create([\n        'password' => Hash::make($currentPassword = fake()->password(8, 10)),\n    ]);\n\n    $customer = $this->loginAsCustomer($customer);\n\n    postJson(route('shop.customers.account.profile.update'), [\n        'first_name'                => $firstName = fake()->firstName(),\n        'last_name'                 => $lastName = fake()->lastName(),\n        'gender'                    => $gender = fake()->randomElement(['Other', 'Male', 'Female']),\n        'email'                     => $customer->email,\n        'status'                    => 1,\n        'customer_group_id'         => 2,\n        'phone'                     => $phone = fake()->e164PhoneNumber(),\n        'current_password'          => $currentPassword,\n        'new_password'              => $newPassword = fake()->password(8, 10),\n        'new_password_confirmation' => $newPassword,\n    ])\n        ->assertRedirect(route('shop.customers.account.profile.index'));\n\n    $this->assertModelWise([\n        Customer::class => [\n            [\n                'first_name'        => $firstName,\n                'last_name'         => $lastName,\n                'gender'            => $gender,\n                'email'             => $customer->email,\n                'status'            => 1,\n                'customer_group_id' => 2,\n                'phone'             => $phone,\n            ],\n        ],\n    ]);\n\n    Mail::assertQueued(UpdatePasswordNotification::class);\n\n    Mail::assertQueuedCount(1);\n});\n\nit('should fails the validation error when password is not provided when delete the customer account', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.customers.account.profile.destroy'))\n        ->assertJsonValidationErrorFor('password')\n        ->assertUnprocessable();\n});\n\nit('should delete the customer account', function () {\n    // Arrange.\n    $customer = Customer::factory()->create([\n        'password' => Hash::make('admin123'),\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.customers.account.profile.destroy'), [\n        'password' => 'admin123',\n    ])\n        ->assertRedirect(route('shop.customer.session.index'));\n\n    $this->assertDatabaseMissing('customers', [\n        'id' => $customer->id,\n    ]);\n});\n\nit('should shows the reviews of customer', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    $customer = Customer::factory()->create();\n\n    $productReview = ProductReview::factory()->create([\n        'product_id'  => $product->id,\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $customer = $this->loginAsCustomer($customer);\n\n    get(route('shop.customers.account.reviews.index'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.reviews.title'))\n        ->assertSeeText($productReview->title)\n        ->assertSeeText($productReview->comment);\n});\n\nit('should returns the address page of the customer', function () {\n    // Arrange.\n    $customer = Customer::factory()->create();\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    get(route('shop.customers.account.addresses.index'))\n        ->assertOk()\n        ->assertSeeText($customerAddress->fast_name)\n        ->assertSeeText($customerAddress->last_name)\n        ->assertSeeText($customerAddress->address)\n        ->assertSeeText($customerAddress->city)\n        ->assertSeeText($customerAddress->state)\n        ->assertSeeText($customerAddress->company_name)\n        ->assertSeeText(trans('shop::app.customers.account.addresses.index.add-address'));\n});\n\nit('should returns the create page of address', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    get(route('shop.customers.account.addresses.create'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.addresses.index.add-address'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.create.first-name'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.create.last-name'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.create.vat-id'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.create.street-address'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.create.company-name'));\n});\n\nit('should fails the validation error when certain inputs not provided when store the customer address', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.customers.account.addresses.store'))\n        ->assertJsonValidationErrorFor('city')\n        ->assertJsonValidationErrorFor('phone')\n        ->assertJsonValidationErrorFor('state')\n        ->assertJsonValidationErrorFor('country')\n        ->assertJsonValidationErrorFor('address')\n        ->assertJsonValidationErrorFor('postcode')\n        ->assertJsonValidationErrorFor('last_name')\n        ->assertJsonValidationErrorFor('first_name')\n        ->assertJsonValidationErrorFor('email')\n        ->assertUnprocessable();\n});\n\nit('should store the customer address', function () {\n    // Act and Assert.\n    $customer = $this->loginAsCustomer();\n\n    postJson(route('shop.customers.account.addresses.store'), [\n        'customer_id'     => $customer->id,\n        'company_name'    => $companyName = fake()->word(),\n        'first_name'      => $firstName = fake()->firstName(),\n        'last_name'       => $lastName = fake()->lastName(),\n        'address'         => [fake()->word()],\n        'country'         => $countryCode = fake()->countryCode(),\n        'state'           => $state = fake()->state(),\n        'city'            => $city = fake()->city(),\n        'postcode'        => $postCode = rand(11111, 99999),\n        'phone'           => $phoneNumber = fake()->e164PhoneNumber(),\n        'default_address' => fake()->randomElement([0, 1]),\n        'address_type'    => $addressType = CustomerAddress::ADDRESS_TYPE,\n        'email'           => $email = fake()->email(),\n    ])\n        ->assertRedirect(route('shop.customers.account.addresses.index'));\n\n    $this->assertModelWise([\n        CustomerAddress::class => [\n            [\n                'customer_id'  => $customer->id,\n                'company_name' => $companyName,\n                'first_name'   => $firstName,\n                'last_name'    => $lastName,\n                'country'      => $countryCode,\n                'state'        => $state,\n                'city'         => $city,\n                'postcode'     => $postCode,\n                'phone'        => $phoneNumber,\n                'address_type' => $addressType,\n                'email'        => $email,\n            ],\n        ],\n    ]);\n});\n\nit('should edit the customer address', function () {\n    // Arrange.\n    $customer = Customer::factory()->create();\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    get(route('shop.customers.account.addresses.edit', $customerAddress->id))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.addresses.edit.edit'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.edit.title'))\n        ->assertSeeText(trans('shop::app.customers.account.addresses.edit.update-btn'));\n});\n\nit('should fails the validation error when certain inputs not provided update the customer address', function () {\n    $customer = Customer::factory()->create();\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    putJson(route('shop.customers.account.addresses.update', $customerAddress->id))\n        ->assertJsonValidationErrorFor('city')\n        ->assertJsonValidationErrorFor('phone')\n        ->assertJsonValidationErrorFor('state')\n        ->assertJsonValidationErrorFor('country')\n        ->assertJsonValidationErrorFor('address')\n        ->assertJsonValidationErrorFor('postcode')\n        ->assertJsonValidationErrorFor('last_name')\n        ->assertJsonValidationErrorFor('first_name')\n        ->assertJsonValidationErrorFor('email')\n        ->assertUnprocessable();\n});\n\nit('should update the customer address', function () {\n    $customer = Customer::factory()->create();\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    putJson(route('shop.customers.account.addresses.update', $customerAddress->id), [\n        'customer_id'     => $customer->id,\n        'company_name'    => $companyName = fake()->word(),\n        'first_name'      => $firstName = fake()->firstName(),\n        'last_name'       => $lastName = fake()->lastName(),\n        'address'         => [fake()->word()],\n        'country'         => $customerAddress->country,\n        'state'           => $customerAddress->state,\n        'city'            => $customerAddress->city,\n        'postcode'        => $postCode = rand(1111, 99999),\n        'phone'           => $customerAddress->phone,\n        'default_address' => 1,\n        'address_type'    => $customerAddress->address_type,\n        'email'           => $email = fake()->email(),\n    ])\n        ->assertRedirect(route('shop.customers.account.addresses.index'));\n\n    $this->assertModelWise([\n        CustomerAddress::class => [\n            [\n                'customer_id'     => $customer->id,\n                'company_name'    => $companyName,\n                'first_name'      => $firstName,\n                'last_name'       => $lastName,\n                'country'         => $customerAddress->country,\n                'state'           => $customerAddress->state,\n                'city'            => $customerAddress->city,\n                'postcode'        => $postCode,\n                'phone'           => $customerAddress->phone,\n                'default_address' => $customerAddress->default_address,\n                'address_type'    => $customerAddress->address_type,\n                'email'           => $email,\n            ],\n        ],\n    ]);\n});\n\nit('should set default address for the customer', function () {\n    // Arrange.\n    $customer = Customer::factory()->create();\n\n    $customerAddresses = CustomerAddress::factory()->create([\n        'customer_id'     => $customer->id,\n        'default_address' => 0,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    patchJson(route('shop.customers.account.addresses.update.default', $customerAddresses->id))\n        ->assertRedirect();\n\n    $this->assertModelWise([\n        CustomerAddress::class => [\n            [\n                'customer_id'     => $customer->id,\n                'default_address' => 1,\n            ],\n        ],\n    ]);\n});\n\nit('should delete the customer address', function () {\n    // Arrange.\n    $customer = Customer::factory()->create();\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'customer_id'     => $customer->id,\n        'default_address' => 0,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    deleteJson(route('shop.customers.account.addresses.delete', $customerAddress->id))\n        ->assertRedirect();\n\n    $this->assertDatabaseMissing('addresses', [\n        'customer_id' => $customer->id,\n        'id'          => $customerAddress->id,\n    ]);\n});\n\nit('should send email for password reset', function () {\n    // Arrange.\n    Notification::fake();\n\n    $customer = Customer::factory()->create();\n\n    postJson(route('shop.customers.forgot_password.store'), [\n        'email' => $customer->email,\n    ])\n        ->assertRedirect(route('shop.customers.forgot_password.create'))\n        ->isRedirect();\n\n    $this->assertDatabaseHas('customer_password_resets', [\n        'email' => $customer->email,\n    ]);\n\n    Notification::assertSentTo(\n        $customer,\n        ResetPasswordNotification::class,\n    );\n\n    Notification::assertCount(1);\n});\n\nit('should not send email for password reset when email is invalid', function () {\n    // Arrange.\n    postJson(route('shop.customers.forgot_password.store'), [\n        'email' => $email = 'WRONG_EMAIL@gmail.com',\n    ])\n        ->assertRedirect(route('shop.customers.forgot_password.create'))\n        ->isRedirect();\n\n    $this->assertDatabaseMissing('customer_password_resets', [\n        'email' => $email,\n    ]);\n});\n\nit('should fails the validation errors certain inputs not provided', function () {\n    // Arrange.\n    postJson(route('shop.customers.forgot_password.store'))\n        ->assertJsonValidationErrorFor('email');\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "OrdersTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\Customers\\OrdersTest.php",
                        "extension": "php",
                        "size": 18010,
                        "sizeFormatted": "17.59 KB",
                        "contentLength": 18010,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Webkul\\Checkout\\Models\\Cart;\nuse Webkul\\Checkout\\Models\\CartAddress;\nuse Webkul\\Checkout\\Models\\CartItem;\nuse Webkul\\Checkout\\Models\\CartPayment;\nuse Webkul\\Customer\\Models\\Customer;\nuse Webkul\\Customer\\Models\\CustomerAddress;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\nuse Webkul\\Sales\\Models\\Invoice;\nuse Webkul\\Sales\\Models\\InvoiceItem;\nuse Webkul\\Sales\\Models\\Order;\nuse Webkul\\Sales\\Models\\OrderAddress;\nuse Webkul\\Sales\\Models\\OrderItem;\nuse Webkul\\Sales\\Models\\OrderPayment;\n\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\getJson;\nuse function Pest\\Laravel\\postJson;\n\nit('should returns the index page customers orders', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    get(route('shop.customers.account.orders.index'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.orders.title'));\n});\n\nit('should view the order', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5 => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CustomerAddress::ADDRESS_TYPE,\n    ]);\n\n    $cartBillingAddress = CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    $cartShippingAddress = CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    $cartPayment = CartPayment::factory()->create([\n        'cart_id'      => $cart->id,\n        'method'       => $paymentMethod = 'cashondelivery',\n        'method_title' => core()->getConfigData('sales.payment_methods.'.$paymentMethod.'.title'),\n    ]);\n\n    $order = Order::factory()->create([\n        'cart_id'             => $cart->id,\n        'customer_id'         => $customer->id,\n        'customer_email'      => $customer->email,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n    ]);\n\n    $orderItem = OrderItem::factory()->create([\n        'product_id' => $product->id,\n        'order_id'   => $order->id,\n        'sku'        => $product->sku,\n        'type'       => $product->type,\n        'name'       => $product->name,\n    ]);\n\n    $orderBillingAddress = OrderAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => OrderAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    $orderShippingAddress = OrderAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => OrderAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    $orderPayment = OrderPayment::factory()->create([\n        'order_id' => $order->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    get(route('shop.customers.account.orders.view', $order->id))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.orders.view.information.sku'))\n        ->assertSeeText(trans('shop::app.customers.account.orders.view.information.product-name'))\n        ->assertSeeText(trans('shop::app.customers.account.orders.view.information.total-due'))\n        ->assertSeeText(trans('shop::app.customers.account.orders.view.page-title', ['order_id' => $order->increment_id]));\n\n    $cart->refresh();\n\n    $cartItem->refresh();\n\n    $cartBillingAddress->refresh();\n\n    $cartShippingAddress->refresh();\n\n    $orderBillingAddress->refresh();\n\n    $orderShippingAddress->refresh();\n\n    $order->refresh();\n\n    $orderItem->refresh();\n\n    $this->assertModelWise([\n        Cart::class => [\n            $this->prepareCart($cart),\n        ],\n\n        CartItem::class => [\n            $this->prepareCartItem($cartItem),\n        ],\n\n        CartPayment::class => [\n            $this->prepareCartPayment($cartPayment),\n        ],\n\n        CartAddress::class => [\n            $this->prepareAddress($cartBillingAddress),\n        ],\n\n        CartAddress::class => [\n            $this->prepareAddress($cartShippingAddress),\n        ],\n\n        CustomerAddress::class => [\n            $this->prepareAddress($customerAddress),\n        ],\n\n        Order::class => [\n            $this->prepareOrder($order),\n        ],\n\n        OrderItem::class => [\n            $this->prepareOrderItem($orderItem),\n        ],\n\n        OrderAddress::class => [\n            $this->prepareAddress($orderBillingAddress),\n\n            $this->prepareAddress($orderShippingAddress),\n        ],\n\n        OrderPayment::class => [\n            $this->prepareOrderPayment($orderPayment),\n        ],\n    ]);\n});\n\nit('should cancel the customer order', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5 => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CustomerAddress::ADDRESS_TYPE,\n    ]);\n\n    $cartBillingAddress = CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    $cartShippingAddress = CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    $cartPayment = CartPayment::factory()->create([\n        'cart_id'      => $cart->id,\n        'method'       => $paymentMethod = 'cashondelivery',\n        'method_title' => core()->getConfigData('sales.payment_methods.'.$paymentMethod.'.title'),\n    ]);\n\n    $order = Order::factory()->create([\n        'cart_id'             => $cart->id,\n        'customer_id'         => $customer->id,\n        'customer_email'      => $customer->email,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n    ]);\n\n    $orderItem = OrderItem::factory()->create([\n        'product_id' => $product->id,\n        'order_id'   => $order->id,\n        'sku'        => $product->sku,\n        'type'       => $product->type,\n        'name'       => $product->name,\n    ]);\n\n    $orderBillingAddress = OrderAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => OrderAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    $orderShippingAddress = OrderAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => OrderAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    $orderPayment = OrderPayment::factory()->create([\n        'order_id' => $order->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.customers.account.orders.cancel', $order->id))\n        ->assertRedirect();\n\n    $cart->refresh();\n\n    $cartItem->refresh();\n\n    $cartBillingAddress->refresh();\n\n    $cartShippingAddress->refresh();\n\n    $orderBillingAddress->refresh();\n\n    $orderShippingAddress->refresh();\n\n    $order->refresh();\n\n    $orderItem->refresh();\n\n    $this->assertModelWise([\n        Cart::class => [\n            $this->prepareCart($cart),\n        ],\n\n        CartItem::class => [\n            $this->prepareCartItem($cartItem),\n        ],\n\n        CartPayment::class => [\n            $this->prepareCartPayment($cartPayment),\n        ],\n\n        CartAddress::class => [\n            $this->prepareAddress($cartBillingAddress),\n        ],\n\n        CartAddress::class => [\n            $this->prepareAddress($cartShippingAddress),\n        ],\n\n        CustomerAddress::class => [\n            $this->prepareAddress($customerAddress),\n        ],\n\n        Order::class => [\n            $this->prepareOrder($order),\n        ],\n\n        OrderItem::class => [\n            $this->prepareOrderItem($orderItem),\n        ],\n\n        OrderAddress::class => [\n            $this->prepareAddress($orderBillingAddress),\n\n            $this->prepareAddress($orderShippingAddress),\n        ],\n\n        OrderPayment::class => [\n            $this->prepareOrderPayment($orderPayment),\n        ],\n    ]);\n});\n\nit('should print the order invoice', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5 => 'new',\n        ],\n\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))\n        ->getSimpleProductFactory()\n        ->create();\n\n    $customer = Customer::factory()->create();\n\n    $cart = Cart::factory()->create([\n        'customer_id'         => $customer->id,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n        'customer_email'      => $customer->email,\n        'is_guest'            => 0,\n    ]);\n\n    $additional = [\n        'product_id' => $product->id,\n        'rating'     => '0',\n        'is_buy_now' => '0',\n        'quantity'   => '1',\n    ];\n\n    $cartItem = CartItem::factory()->create([\n        'cart_id'           => $cart->id,\n        'product_id'        => $product->id,\n        'sku'               => $product->sku,\n        'quantity'          => $additional['quantity'],\n        'name'              => $product->name,\n        'price'             => $convertedPrice = core()->convertPrice($price = $product->price),\n        'base_price'        => $price,\n        'total'             => $convertedPrice * $additional['quantity'],\n        'base_total'        => $price * $additional['quantity'],\n        'weight'            => $product->weight ?? 0,\n        'total_weight'      => ($product->weight ?? 0) * $additional['quantity'],\n        'base_total_weight' => ($product->weight ?? 0) * $additional['quantity'],\n        'type'              => $product->type,\n        'additional'        => $additional,\n    ]);\n\n    $customerAddress = CustomerAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CustomerAddress::ADDRESS_TYPE,\n    ]);\n\n    $cartBillingAddress = CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    $cartShippingAddress = CartAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => CartAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    $cartPayment = CartPayment::factory()->create([\n        'cart_id'      => $cart->id,\n        'method'       => $paymentMethod = 'cashondelivery',\n        'method_title' => core()->getConfigData('sales.payment_methods.'.$paymentMethod.'.title'),\n    ]);\n\n    $order = Order::factory()->create([\n        'cart_id'             => $cart->id,\n        'customer_id'         => $customer->id,\n        'customer_email'      => $customer->email,\n        'customer_first_name' => $customer->first_name,\n        'customer_last_name'  => $customer->last_name,\n    ]);\n\n    $orderItem = OrderItem::factory()->create([\n        'product_id' => $product->id,\n        'order_id'   => $order->id,\n        'sku'        => $product->sku,\n        'type'       => $product->type,\n        'name'       => $product->name,\n    ]);\n\n    $orderBillingAddress = OrderAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => OrderAddress::ADDRESS_TYPE_BILLING,\n    ]);\n\n    $orderShippingAddress = OrderAddress::factory()->create([\n        'cart_id'      => $cart->id,\n        'customer_id'  => $customer->id,\n        'address_type' => OrderAddress::ADDRESS_TYPE_SHIPPING,\n    ]);\n\n    $orderPayment = OrderPayment::factory()->create([\n        'order_id' => $order->id,\n    ]);\n\n    $invoice = Invoice::factory([\n        'order_id' => $order->id,\n        'state'    => 'paid',\n    ])->create();\n\n    $invoiceItem = InvoiceItem::factory()->create([\n        'invoice_id'           => $invoice->id,\n        'order_item_id'        => $orderItem->id,\n        'name'                 => $orderItem->name,\n        'sku'                  => $orderItem->sku,\n        'qty'                  => 1,\n        'price'                => $orderItem->price,\n        'base_price'           => $orderItem->base_price,\n        'total'                => $orderItem->price,\n        'base_total'           => $orderItem->base_price,\n        'tax_amount'           => (($orderItem->tax_amount / $orderItem->qty_ordered)),\n        'base_tax_amount'      => (($orderItem->base_tax_amount / $orderItem->qty_ordered)),\n        'discount_amount'      => (($orderItem->discount_amount / $orderItem->qty_ordered)),\n        'base_discount_amount' => (($orderItem->base_discount_amount / $orderItem->qty_ordered)),\n        'product_id'           => $orderItem->product_id,\n        'product_type'         => $orderItem->product_type,\n        'additional'           => $orderItem->additional,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    getJson(route('shop.customers.account.orders.print-invoice', $invoice->id))\n        ->assertDownload('invoice-'.$invoice->created_at->format('d-m-Y').'.pdf');\n\n    $cart->refresh();\n\n    $cartItem->refresh();\n\n    $cartBillingAddress->refresh();\n\n    $cartShippingAddress->refresh();\n\n    $orderBillingAddress->refresh();\n\n    $orderShippingAddress->refresh();\n\n    $order->refresh();\n\n    $orderItem->refresh();\n\n    $invoiceItem->refresh();\n\n    $this->assertModelWise([\n        Cart::class => [\n            $this->prepareCart($cart),\n        ],\n\n        CartItem::class => [\n            $this->prepareCartItem($cartItem),\n        ],\n\n        CartPayment::class => [\n            $this->prepareCartPayment($cartPayment),\n        ],\n\n        CartAddress::class => [\n            $this->prepareAddress($cartBillingAddress),\n        ],\n\n        CartAddress::class => [\n            $this->prepareAddress($cartShippingAddress),\n        ],\n\n        CustomerAddress::class => [\n            $this->prepareAddress($customerAddress),\n        ],\n\n        Order::class => [\n            $this->prepareOrder($order),\n        ],\n\n        OrderItem::class => [\n            $this->prepareOrderItem($orderItem),\n        ],\n\n        OrderAddress::class => [\n            $this->prepareAddress($orderBillingAddress),\n\n            $this->prepareAddress($orderShippingAddress),\n        ],\n\n        OrderPayment::class => [\n            $this->prepareOrderPayment($orderPayment),\n        ],\n\n        InvoiceItem::class => [\n            $this->prepareInvoiceItem($invoiceItem),\n        ],\n    ]);\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "WishlistTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\Customers\\WishlistTest.php",
                        "extension": "php",
                        "size": 7991,
                        "sizeFormatted": "7.8 KB",
                        "contentLength": 7991,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Webkul\\Customer\\Models\\Customer as ModelsCustomer;\nuse Webkul\\Customer\\Models\\Wishlist;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\n\nuse function Pest\\Laravel\\deleteJson;\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\postJson;\n\nit('should returns the wishlist index page', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    $customer = ModelsCustomer::factory()->create();\n\n    Wishlist::factory()->create([\n        'channel_id'  => core()->getCurrentChannel()->id,\n        'product_id'  => $product->id,\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    get(route('shop.customers.account.wishlist.index'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.account.wishlist.page-title'));\n});\n\nit('should returns all the wishlisted items', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->count(2)->create();\n\n    $customer = ModelsCustomer::factory()->create();\n\n    $wishLists = [];\n\n    foreach ($products as $product) {\n        $wishLists[] = Wishlist::factory()->create([\n            'channel_id'  => core()->getCurrentChannel()->id,\n            'product_id'  => $product->id,\n            'customer_id' => $customer->id,\n        ]);\n    }\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    get(route('shop.api.customers.account.wishlist.index'))\n        ->assertOk();\n\n    foreach ($wishLists as $wishList) {\n        $this->assertModelWise([\n            Wishlist::class => [\n                [\n                    'id' => $wishList->id,\n                ],\n            ],\n        ]);\n    }\n});\n\nit('should fails the validation error when product id is not provide when add the products to the wishlist', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.api.customers.account.wishlist.store'))\n        ->assertJsonValidationErrorFor('product_id')\n        ->assertUnprocessable();\n});\n\nit('should add the products to the wishlist', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.api.customers.account.wishlist.store'), [\n        'product_id' => $product->id,\n    ])\n        ->assertOk()\n        ->assertJsonPath('data.message', trans('shop::app.customers.account.wishlist.success'));\n});\n\nit('should move wishlisted product to the cart', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    $customer = ModelsCustomer::factory()->create();\n\n    $wishList = Wishlist::factory()->create([\n        'channel_id'  => core()->getCurrentChannel()->id,\n        'product_id'  => $product->id,\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and Assert.\n    $this->loginAsCustomer($customer);\n\n    postJson(route('shop.api.customers.account.wishlist.move_to_cart', $wishList->id))\n        ->assertOk()\n        ->assertJsonPath('message', trans('shop::app.customers.account.wishlist.moved-success'));\n});\n\nit('should remove all wishlisted items', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->count(2)->create();\n\n    $customer = ModelsCustomer::factory()->create();\n\n    $wishLists = [];\n\n    foreach ($products as $product) {\n        $wishLists[] = Wishlist::factory()->create([\n            'channel_id'  => core()->getCurrentChannel()->id,\n            'product_id'  => $product->id,\n            'customer_id' => $customer->id,\n        ]);\n    }\n\n    // Act and Assert.\n\n    $this->loginAsCustomer($customer);\n\n    deleteJson(route('shop.api.customers.account.wishlist.destroy_all'))\n        ->assertOk()\n        ->assertJsonPath('data.message', trans('shop::app.customers.account.wishlist.removed'));\n});\n\nit('should remove specified wishlisted item', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    $customer = ModelsCustomer::factory()->create();\n\n    $wishList = Wishlist::factory()->create([\n        'channel_id'  => core()->getCurrentChannel()->id,\n        'product_id'  => $product->id,\n        'customer_id' => $customer->id,\n    ]);\n\n    // Act and  Assert\n    $this->loginAsCustomer($customer);\n\n    deleteJson(route('shop.api.customers.account.wishlist.destroy', $wishList->id))\n        ->assertOk()\n        ->assertJsonPath('message', trans('shop::app.customers.account.wishlist.removed'));\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "HomePageTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\HomePageTest.php",
                        "extension": "php",
                        "size": 9212,
                        "sizeFormatted": "9 KB",
                        "contentLength": 9212,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Str;\nuse Webkul\\Core\\Models\\SubscribersList;\nuse Webkul\\Customer\\Models\\CompareItem;\nuse Webkul\\Faker\\Helpers\\Product as ProductFaker;\nuse Webkul\\Shop\\Mail\\Customer\\SubscriptionNotification;\n\nuse function Pest\\Laravel\\deleteJson;\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\postJson;\n\nit('returns a successful response', function () {\n    // Act and Assert.\n    get(route('shop.home.index'))\n        ->assertOk();\n});\n\nit('displays the current currency code and channel code', function () {\n    // Act\n    $response = get(route('shop.home.index'));\n\n    // Assert\n    $response->assertOk();\n\n    /**\n     * We avoid using the `assertSeeText` method of the response because it may sometimes\n     * produce false positive results when dealing with large DOM sizes.\n     */\n    expect(Str::contains($response->content(), core()->getCurrentChannelCode()))\n        ->toBeTruthy();\n\n    expect(Str::contains($response->content(), core()->getCurrentCurrencyCode()))\n        ->toBeTruthy();\n});\n\nit('displays the \"Sign In\" and \"Sign Up\" buttons when the customer is not logged in', function () {\n    // Act\n    $response = get(route('shop.home.index'));\n\n    // Assert\n    $response->assertOk();\n\n    /**\n     * We avoid using the `assertSeeText` method of the response because it may sometimes\n     * produce false positive results when dealing with large DOM sizes.\n     */\n    expect(Str::contains($response->content(), trans('shop::app.components.layouts.header.desktop.bottom.sign-in')))\n        ->toBeTruthy();\n\n    expect(Str::contains($response->content(), trans('shop::app.components.layouts.header.desktop.bottom.sign-up')))\n        ->toBeTruthy();\n});\n\nit('displays navigation buttons when the customer is logged in', function () {\n    // Act\n    $this->loginAsCustomer();\n\n    $response = get(route('shop.home.index'));\n\n    // Assert\n    $response->assertOk();\n\n    /**\n     * We avoid using the `assertSeeText` method of the response because it may sometimes\n     * produce false positive results when dealing with large DOM sizes.\n     */\n    expect(Str::contains($response->content(), trans('shop::app.components.layouts.header.desktop.bottom.profile')))\n        ->toBeTruthy();\n\n    expect(Str::contains($response->content(), trans('shop::app.components.layouts.header.desktop.bottom.orders')))\n        ->toBeTruthy();\n\n    expect(Str::contains($response->content(), trans('shop::app.components.layouts.header.desktop.bottom.wishlist')))\n        ->toBeTruthy();\n\n    expect(Str::contains($response->content(), trans('shop::app.components.layouts.header.desktop.bottom.logout')))\n        ->toBeTruthy();\n});\n\nit('should returns the home page of the store', function () {\n    get(route('shop.home.index'))\n        ->assertOk()\n        ->assertSeeText('The game with our new additions!')\n        ->assertSeeText('Our Collections')\n        ->assertSeeText('Get Ready for our new Bold Collections!')\n        ->assertSeeText('Get UPTO 40% OFF on your 1st order SHOP NOW');\n});\n\nit('should returns the search page of the products', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    get(route('shop.search.index', [\n        'query' => $query = $product->name,\n    ]))\n        ->assertOk()\n        ->assertSeeText($query)\n        ->assertSeeText(trans('shop::app.search.title', ['query' => $query]));\n});\n\nit('should fails the validation error when provided wrong email address when subscribe to the shop', function () {\n    // Act and Assert.\n    postJson(route('shop.subscription.store'))\n        ->assertJsonValidationErrorFor('email')\n        ->assertUnprocessable();\n});\n\nit('should store the subscription of the shop', function () {\n    // Act and Assert.\n    postJson(route('shop.subscription.store'), [\n        'email' => $email = fake()->email(),\n    ])\n        ->assertRedirect();\n\n    $this->assertModelWise([\n        SubscribersList::class => [\n            [\n                'email'         => $email,\n                'is_subscribed' => 1,\n            ],\n        ],\n    ]);\n});\n\nit('should store the subscription of the shop and send the mail to the admin', function () {\n    // Act and Assert.\n    Mail::fake();\n\n    postJson(route('shop.subscription.store'), [\n        'email' => $email = fake()->email(),\n    ])\n        ->assertRedirect();\n\n    $this->assertModelWise([\n        SubscribersList::class => [\n            [\n                'email'         => $email,\n                'is_subscribed' => 1,\n            ],\n        ],\n    ]);\n\n    Mail::assertQueued(SubscriptionNotification::class);\n\n    Mail::assertQueuedCount(1);\n});\n\nit('should unsubscribe from the shop', function () {\n    // Arrange.\n    $subscriber = SubscribersList::factory()->create();\n\n    // Act and Assert.\n    get(route('shop.subscription.destroy', [\n        'token' => $subscriber->token,\n    ]))\n        ->assertRedirect();\n\n    $this->assertDatabaseMissing('subscribers_list', [\n        'id' => $subscriber->id,\n    ]);\n});\n\nit('should store the products to the compare list', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.api.compare.store'), [\n        'product_id' => $product->id,\n    ])\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.compare.item-add-success'));\n});\n\nit('should fails the validation error when not provided product id when move the compare list item', function () {\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    postJson(route('shop.api.compare.store'))\n        ->assertJsonValidationErrorFor('product_id')\n        ->assertUnprocessable();\n});\n\nit('should remove product from compare list', function () {\n    // Arrange.\n    $product = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->create();\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    CompareItem::factory()->create([\n        'customer_id'  => auth()->guard('customer')->user()->id,\n        'product_id'   => $product->id,\n    ]);\n\n    deleteJson(route('shop.api.compare.destroy'), [\n        'product_id' => $product->id,\n    ])\n        ->assertOk()\n        ->assertJsonPath('message', trans('shop::app.compare.remove-success'));\n});\n\nit('should remove all the products from compare list', function () {\n    // Arrange.\n    $products = (new ProductFaker([\n        'attributes' => [\n            5  => 'new',\n            6  => 'featured',\n            11 => 'price',\n            26 => 'guest_checkout',\n        ],\n        'attribute_value' => [\n            'new' => [\n                'boolean_value' => true,\n            ],\n            'featured' => [\n                'boolean_value' => true,\n            ],\n            'price' => [\n                'float_value' => fake()->randomFloat(2, 1000, 5000),\n            ],\n            'guest_checkout' => [\n                'boolean_value' => true,\n            ],\n        ],\n    ]))->getSimpleProductFactory()->count(5)->create();\n\n    // Act and Assert.\n    $this->loginAsCustomer();\n\n    foreach ($products as $product) {\n        CompareItem::factory()->create([\n            'customer_id'  => auth()->guard('customer')->user()->id,\n            'product_id'   => $product->id,\n        ]);\n    }\n\n    deleteJson(route('shop.api.compare.destroy_all'))\n        ->assertOk()\n        ->assertJsonPath('data.message', trans('shop::app.compare.remove-all-success'));\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "LoginPageTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\LoginPageTest.php",
                        "extension": "php",
                        "size": 2739,
                        "sizeFormatted": "2.67 KB",
                        "contentLength": 2739,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Hash;\nuse Webkul\\Faker\\Helpers\\Customer as CustomerFaker;\n\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\post;\nuse function Pest\\Laravel\\postJson;\n\nit('returns a successful response', function () {\n    // Act and Assert.\n    get(route('shop.customer.session.index'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.login-form.page-title'));\n});\n\nit('should fails validation errors when email and password not provided when login', function () {\n    // Act and Assert.\n    postJson(route('shop.customer.session.create'))\n        ->assertJsonValidationErrorFor('email')\n        ->assertJsonValidationErrorFor('password')\n        ->assertUnprocessable();\n});\n\nit('should fails validation errors when email is not valid', function () {\n    // Act and Assert.\n    postJson(route('shop.customer.session.create'), [\n        'email'    => fake()->word(),\n        'password' => 'shop123',\n    ])\n        ->assertJsonValidationErrorFor('email')\n        ->assertUnprocessable();\n});\n\nit('should fails validation errors when password length not valid', function () {\n    // Act and Assert.\n    postJson(route('shop.customer.session.create'), [\n        'email'    => fake()->email(),\n        'password' => 'shop',\n    ])\n        ->assertJsonValidationErrorFor('password')\n        ->assertUnprocessable();\n});\n\nit('successfully logins a customer', function () {\n    // Arrange.\n    $customer = (new CustomerFaker)->factory()->create([\n        'password' => Hash::make($password = 'admin123'),\n    ]);\n\n    // Act and Assert.\n    post(route('shop.customer.session.create'), [\n        'email'    => $customer->email,\n        'password' => $password,\n    ])\n        ->assertRedirectToRoute('shop.home.index')\n        ->assertSessionMissing('error')\n        ->assertSessionMissing('warning')\n        ->assertSessionMissing('info');\n});\n\nit('fails to log in a customer if the email is invalid', function () {\n    // Arrange.\n    (new CustomerFaker)->factory()->create([\n        'password' => Hash::make($password = 'admin123'),\n    ]);\n\n    // Act and Assert.\n    post(route('shop.customer.session.create'), [\n        'email'    => 'wrong@email.com',\n        'password' => $password,\n    ])\n        ->assertRedirectToRoute('shop.home.index')\n        ->assertSessionHas('error');\n});\n\nit('fails to log in a customer if the password is invalid', function () {\n    // Arrange.\n    $customer = (new CustomerFaker)->factory()->create();\n\n    // Act and Assert.\n    post(route('shop.customer.session.create'), [\n        'email'    => $customer->email,\n        'password' => 'WRONG_PASSWORD',\n    ])\n        ->assertRedirectToRoute('shop.home.index')\n        ->assertSessionHas('error');\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "RegistrationPageTest.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\Feature\\RegistrationPageTest.php",
                        "extension": "php",
                        "size": 5006,
                        "sizeFormatted": "4.89 KB",
                        "contentLength": 5006,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Webkul\\Admin\\Mail\\Customer\\RegistrationNotification as AdminRegistrationNotification;\nuse Webkul\\Core\\Models\\CoreConfig;\nuse Webkul\\Shop\\Mail\\Customer\\EmailVerificationNotification;\nuse Webkul\\Shop\\Mail\\Customer\\RegistrationNotification as ShopRegistrationNotification;\n\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\post;\nuse function Pest\\Laravel\\postJson;\n\nit('returns a successful response', function () {\n    // Act and Assert.\n    get(route('shop.customers.register.index'))\n        ->assertOk()\n        ->assertSeeText(trans('shop::app.customers.signup-form.page-title'));\n});\n\nit('should fails validation error when certain inputs are invalid when register', function () {\n    // Act and Assert.\n    postJson(route('shop.customers.register.store'))\n        ->assertJsonValidationErrorFor('first_name')\n        ->assertJsonValidationErrorFor('last_name')\n        ->assertJsonValidationErrorFor('email')\n        ->assertJsonValidationErrorFor('password')\n        ->assertUnprocessable();\n});\n\nit('should fails validation error when email is not valid when register', function () {\n    // Act and Assert.\n    postJson(route('shop.customers.register.store'), [\n        'email' => 'invalid.email.com',\n    ])\n        ->assertJsonValidationErrorFor('first_name')\n        ->assertJsonValidationErrorFor('last_name')\n        ->assertJsonValidationErrorFor('email')\n        ->assertJsonValidationErrorFor('password')\n        ->assertUnprocessable();\n});\n\nit('should fails validation error when password length is not valid when register', function () {\n    // Act and Assert.\n    postJson(route('shop.customers.register.store'), [\n        'password' => 'shop',\n    ])\n        ->assertJsonValidationErrorFor('first_name')\n        ->assertJsonValidationErrorFor('last_name')\n        ->assertJsonValidationErrorFor('email')\n        ->assertJsonValidationErrorFor('password')\n        ->assertUnprocessable();\n});\n\nit('successfully registers a customer', function () {\n    CoreConfig::where('code', 'emails.general.notifications.emails.general.notifications.verification')->update([\n        'value' => 0,\n    ]);\n\n    // Arrange.\n    $requestedCustomer = [\n        'first_name'            => fake()->firstName(),\n        'last_name'             => fake()->lastName(),\n        'email'                 => fake()->email(),\n        'password'              => 'admin123',\n        'password_confirmation' => 'admin123',\n    ];\n\n    // Act and Assert.\n    post(route('shop.customers.register.store'), $requestedCustomer)\n        ->assertRedirectToRoute('shop.customer.session.index')\n        ->assertSessionHas('success', trans('shop::app.customers.signup-form.success'));\n});\n\nit('successfully registers a customer and send mail to the customer verify the account', function () {\n    // Arrange.\n    Mail::fake();\n\n    CoreConfig::factory()->create([\n        'code'  => 'emails.general.notifications.emails.general.notifications.verification',\n        'value' => 1,\n    ]);\n\n    $requestedCustomer = [\n        'first_name'            => fake()->firstName(),\n        'last_name'             => fake()->lastName(),\n        'email'                 => fake()->email(),\n        'password'              => 'admin123',\n        'password_confirmation' => 'admin123',\n    ];\n\n    // Act and Assert.\n    post(route('shop.customers.register.store'), $requestedCustomer)\n        ->assertRedirectToRoute('shop.customer.session.index')\n        ->assertSessionHas('success', trans('shop::app.customers.signup-form.success-verify'));\n\n    Mail::assertQueued(EmailVerificationNotification::class);\n\n    Mail::assertQueuedCount(1);\n});\n\nit('registers a customer successfully and sends a registration email to customer and admin along with a success message', function () {\n    // Arrange.\n    Mail::fake();\n\n    CoreConfig::where('code', 'emails.general.notifications.emails.general.notifications.registration')->update([\n        'value' => 1,\n    ]);\n\n    CoreConfig::where('code', 'emails.general.notifications.emails.general.notifications.customer_registration_confirmation_mail_to_admin')->update([\n        'value' => 1,\n    ]);\n\n    CoreConfig::where('code', 'emails.general.notifications.emails.general.notifications.verification')->update([\n        'value' => 0,\n    ]);\n\n    $requestedCustomer = [\n        'first_name'            => fake()->firstName(),\n        'last_name'             => fake()->lastName(),\n        'email'                 => fake()->email(),\n        'password'              => 'admin123',\n        'password_confirmation' => 'admin123',\n    ];\n\n    // Act and Assert.\n    post(route('shop.customers.register.store'), $requestedCustomer)\n        ->assertRedirectToRoute('shop.customer.session.index')\n        ->assertSessionHas('success', trans('shop::app.customers.signup-form.success'));\n\n    Mail::assertQueued(AdminRegistrationNotification::class);\n\n    Mail::assertQueued(ShopRegistrationNotification::class);\n\n    Mail::assertQueuedCount(2);\n});\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "ShopTestCase.php",
                        "relativePath": "packages/Webkul/Shop\\tests\\ShopTestCase.php",
                        "extension": "php",
                        "size": 230,
                        "sizeFormatted": "230 B",
                        "contentLength": 230,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Webkul\\Shop\\Tests;\n\nuse Tests\\TestCase;\nuse Webkul\\Core\\Tests\\Concerns\\CoreAssertions;\nuse Webkul\\Shop\\Tests\\Concerns\\ShopTestBench;\n\nclass ShopTestCase extends TestCase\n{\n    use CoreAssertions, ShopTestBench;\n}\n"
                    }
                }
            ],
            "statistics": {
                "fileCount": 80,
                "totalSize": 462355,
                "totalSizeFormatted": "451.52 KB"
            }
        },
        "database": {
            "categoryInfo": {
                "displayName": "ملفات قاعدة البيانات",
                "description": "الهجرات والبذور والمصانع",
                "path": "C:\\Users\\capta\\OneDrive\\Documents\\bagisto\\database",
                "extensions": [
                    "php"
                ],
                "maxDepth": 3,
                "priority": 3
            },
            "files": [
                {
                    "fileInfo": {
                        "fileName": "2014_10_12_000000_create_users_table.php",
                        "relativePath": "database\\migrations\\2014_10_12_000000_create_users_table.php",
                        "extension": "php",
                        "size": 741,
                        "sizeFormatted": "741 B",
                        "contentLength": 741,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n};\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "2014_10_12_100000_create_password_resets_table.php",
                        "relativePath": "database\\migrations\\2014_10_12_100000_create_password_resets_table.php",
                        "extension": "php",
                        "size": 669,
                        "sizeFormatted": "669 B",
                        "contentLength": 669,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('password_resets', function (Blueprint $table) {\n            $table->string('email')->index();\n            $table->string('token');\n            $table->timestamp('created_at')->nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('password_resets');\n    }\n};\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "2019_12_14_000001_create_personal_access_tokens_table.php",
                        "relativePath": "database\\migrations\\2019_12_14_000001_create_personal_access_tokens_table.php",
                        "extension": "php",
                        "size": 856,
                        "sizeFormatted": "856 B",
                        "contentLength": 856,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('personal_access_tokens', function (Blueprint $table) {\n            $table->id();\n            $table->morphs('tokenable');\n            $table->string('name');\n            $table->string('token', 64)->unique();\n            $table->text('abilities')->nullable();\n            $table->timestamp('last_used_at')->nullable();\n            $table->timestamp('expires_at')->nullable();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('personal_access_tokens');\n    }\n};\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "2020_12_27_121950_create_jobs_table.php",
                        "relativePath": "database\\migrations\\2020_12_27_121950_create_jobs_table.php",
                        "extension": "php",
                        "size": 856,
                        "sizeFormatted": "856 B",
                        "contentLength": 856,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('jobs', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('queue')->index();\n            $table->longText('payload');\n            $table->unsignedTinyInteger('attempts');\n            $table->unsignedInteger('reserved_at')->nullable();\n            $table->unsignedInteger('available_at');\n            $table->unsignedInteger('created_at');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('jobs');\n    }\n};\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "2022_03_15_160510_create_failed_jobs_table.php",
                        "relativePath": "database\\migrations\\2022_03_15_160510_create_failed_jobs_table.php",
                        "extension": "php",
                        "size": 810,
                        "sizeFormatted": "810 B",
                        "contentLength": 810,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('failed_jobs', function (Blueprint $table) {\n            $table->id();\n            $table->string('uuid')->unique();\n            $table->text('connection');\n            $table->text('queue');\n            $table->longText('payload');\n            $table->longText('exception');\n            $table->timestamp('failed_at')->useCurrent();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('failed_jobs');\n    }\n};\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "2022_10_04_144444_create_job_batches_table.php",
                        "relativePath": "database\\migrations\\2022_10_04_144444_create_job_batches_table.php",
                        "extension": "php",
                        "size": 989,
                        "sizeFormatted": "989 B",
                        "contentLength": 989,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('job_batches', function (Blueprint $table) {\n            $table->string('id')->primary();\n            $table->string('name');\n            $table->integer('total_jobs');\n            $table->integer('pending_jobs');\n            $table->integer('failed_jobs');\n            $table->text('failed_job_ids');\n            $table->mediumText('options')->nullable();\n            $table->integer('cancelled_at')->nullable();\n            $table->integer('created_at');\n            $table->integer('finished_at')->nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('job_batches');\n    }\n};\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "2023_10_05_163612_create_visits_table.php",
                        "relativePath": "database\\migrations\\2023_10_05_163612_create_visits_table.php",
                        "extension": "php",
                        "size": 1319,
                        "sizeFormatted": "1.29 KB",
                        "contentLength": 1319,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateVisitsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(config('visitor.table_name'), function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('method')->nullable();\n            $table->mediumText('request')->nullable();\n            $table->mediumText('url')->nullable();\n            $table->mediumText('referer')->nullable();\n            $table->text('languages')->nullable();\n            $table->text('useragent')->nullable();\n            $table->text('headers')->nullable();\n            $table->text('device')->nullable();\n            $table->text('platform')->nullable();\n            $table->text('browser')->nullable();\n            $table->ipAddress('ip')->nullable();\n            $table->nullableMorphs('visitable'); // object model\n            $table->nullableMorphs('visitor'); // subject model\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(config('visitor.table_name'));\n    }\n}\n"
                    }
                },
                {
                    "fileInfo": {
                        "fileName": "DatabaseSeeder.php",
                        "relativePath": "database\\seeders\\DatabaseSeeder.php",
                        "extension": "php",
                        "size": 360,
                        "sizeFormatted": "360 B",
                        "contentLength": 360,
                        "truncated": false
                    },
                    "fileContent": {
                        "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Webkul\\Installer\\Database\\Seeders\\DatabaseSeeder as BagistoDatabaseSeeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        $this->call(BagistoDatabaseSeeder::class);\n    }\n}\n"
                    }
                }
            ],
            "statistics": {
                "fileCount": 8,
                "totalSize": 6600,
                "totalSizeFormatted": "6.45 KB"
            }
        }
    }
}